// !!!DO NOT EDIT THIS FILE BY HAND!!!
// Create this file by running MethodGen.exe in the rhinocommon directory
// MethodGen.exe parses the cpp files in rhcommon_c to create C# callable
// function declarations

using System;
using System.Runtime.InteropServices;
using Rhino;
using Rhino.Geometry;
using Rhino.Geometry.Intersect;
using Rhino.Collections;

// Atuomatically generated function declarations for calling into
// the support 'C' DLL (rhcommon_c.dll).
internal partial class UnsafeNativeMethods
{
  private UnsafeNativeMethods(){}
  #region curvedisplay.cpp
  //CRhCmnCurveDisplay* CurveDisplay_FromArcCurve(const ON_ArcCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CurveDisplay_FromArcCurve(IntPtr pCurve);

  //CRhCmnCurveDisplay* CurveDisplay_FromNurbsCurve(const ON_NurbsCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CurveDisplay_FromNurbsCurve(IntPtr pCurve);

  //CRhCmnCurveDisplay* CurveDisplay_FromPolyCurve(const ON_PolyCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CurveDisplay_FromPolyCurve(IntPtr pCurve);

  //void CurveDisplay_Delete(CRhCmnCurveDisplay* pCurveDisplay)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CurveDisplay_Delete(IntPtr pCurveDisplay);

  //void CurveDisplay_Draw(CRhCmnCurveDisplay* pCurveDisplay, CRhinoDisplayPipeline* pPipeline, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CurveDisplay_Draw(IntPtr pCurveDisplay, IntPtr pPipeline, int argb, int thickness);
  #endregion


  #region on_3dm_attributes.cpp
  //int ON_3dmObjectAttributes_GetSetInt( ON_3dmObjectAttributes* ptr, int which, bool set, int set_value )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dmObjectAttributes_GetSetInt(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //bool ON_3dmObjectAttributes_GetSetBool( ON_3dmObjectAttributes* ptr, int which, bool set, bool set_value )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dmObjectAttributes_GetSetBool(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_value);

  //ON_UUID ON_3dmObjectAttributes_m_uuid(const ON_3dmObjectAttributes* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_3dmObjectAttributes_m_uuid(IntPtr ptr);

  //const RHMONO_STRING* ON_3dmObjectAttributes_GetSetString(ON_3dmObjectAttributes* ptr, int which, bool set, const RHMONO_STRING* _str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmObjectAttributes_GetSetString(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.LPWStr)]string _str);

  //int ON_3dmObjectAttributes_GetSetColor(ON_3dmObjectAttributes* ptr, int which, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dmObjectAttributes_GetSetColor(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //double ON_3dmObjectAttributes_PlotWeight(ON_3dmObjectAttributes* ptr, bool set, double set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_3dmObjectAttributes_PlotWeight(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, double set_value);

  //ON_UUID ON_3dmObjectAttributes_ViewportId(ON_3dmObjectAttributes* ptr, bool set, ON_UUID set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_3dmObjectAttributes_ViewportId(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, Guid set_value);

  //void ON_3dmObjectAttributes_GroupList(const ON_3dmObjectAttributes* ptr, int* list)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmObjectAttributes_GroupList(IntPtr ptr, ref int list);

  //void ON_3dmObjectAttributes_GroupOp(ON_3dmObjectAttributes* ptr, int whichOp, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmObjectAttributes_GroupOp(IntPtr ptr, int whichOp, int index);
  #endregion


  #region on_3dm_settings.cpp
  //const RHMONO_STRING* ON_3dmConstructionPlane_Copy(const ON_3dmConstructionPlane* pCP, ON_PLANE_STRUCT* plane,
  //                                                          double* grid_spacing, double* snap_spacing,
  //                                                          int* grid_line_count, int* grid_thick_freq,
  //                                                          bool* depthbuffered)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmConstructionPlane_Copy(IntPtr pCP, ref Plane plane, ref double grid_spacing, ref double snap_spacing, ref int grid_line_count, ref int grid_thick_freq, [MarshalAs(UnmanagedType.U1)]ref bool depthbuffered);

  //ON_3dmConstructionPlane* ON_3dmConstructionPlane_New(const ON_PLANE_STRUCT* plane,
  //                                                                   double grid_spacing,
  //                                                                   double snap_spacing,
  //                                                                   int grid_line_count,
  //                                                                   int grid_thick_frequency,
  //                                                                   bool depthBuffered,
  //                                                                   const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmConstructionPlane_New(ref Plane plane, double grid_spacing, double snap_spacing, int grid_line_count, int grid_thick_frequency, [MarshalAs(UnmanagedType.U1)]bool depthBuffered, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //void ON_3dmConstructionPlane_Delete(ON_3dmConstructionPlane* pCPlane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmConstructionPlane_Delete(IntPtr pCPlane);

  //void ON_3dmView_Delete(ON_3dmView* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmView_Delete(IntPtr ptr);

  //const RHMONO_STRING* ON_3dmView_NameGet(const ON_3dmView* pView)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dmView_NameGet(IntPtr pView);

  //void ON_3dmView_NameSet(ON_3dmView* pView, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dmView_NameSet(IntPtr pView, [MarshalAs(UnmanagedType.LPWStr)]string _name);
  #endregion


  #region on_annotation2.cpp
  //double ON_Annotation2_NumericValue(const ON_Annotation2* pConstAnnotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Annotation2_NumericValue(IntPtr pConstAnnotation);

  //void ON_Annotation2_GetPoint(const ON_Annotation2* pConstAnnotation, int which, ON_2dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_GetPoint(IntPtr pConstAnnotation, int which, ref Point2d point);

  //void ON_Annotation2_SetPoint(ON_Annotation2* pAnnotation, int which, ON_2DPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_SetPoint(IntPtr pAnnotation, int which, Point2d point);

  //const wchar_t* ON_Annotation2_Text(ON_Annotation2* pAnnotation2, const RHMONO_STRING* _str, bool formula)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Annotation2_Text(IntPtr pAnnotation2, [MarshalAs(UnmanagedType.LPWStr)]string _str, [MarshalAs(UnmanagedType.U1)]bool formula);

  //double ON_Annotation2_Height(ON_Annotation2* ptr, bool set, double set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Annotation2_Height(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, double set_value);

  //int ON_Annotation2_Index(ON_Annotation2* ptr, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Annotation2_Index(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //void ON_Annotation2_Plane(ON_Annotation2* ptr, ON_PLANE_STRUCT* plane, bool set)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Annotation2_Plane(IntPtr ptr, ref Plane plane, [MarshalAs(UnmanagedType.U1)]bool set);

  //ON_LinearDimension2* ON_LinearDimension2_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LinearDimension2_New();

  //void ON_LinearDimension2_SetLocations(ON_LinearDimension2* pLinearDimension2, ON_2DPOINT_STRUCT ext0, ON_2DPOINT_STRUCT ext1, ON_2DPOINT_STRUCT linePt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LinearDimension2_SetLocations(IntPtr pLinearDimension2, Point2d ext0, Point2d ext1, Point2d linePt);

  //bool ON_LinearDimension2_IsAligned(const ON_LinearDimension2* pConstLinearDimension2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_LinearDimension2_IsAligned(IntPtr pConstLinearDimension2);

  //void ON_LinearDimension2_SetAligned( ON_LinearDimension2* pLinearDimension2, bool val )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LinearDimension2_SetAligned(IntPtr pLinearDimension2, [MarshalAs(UnmanagedType.U1)]bool val);

  //bool ON_RadialDimension2_IsDiameterDimension( const ON_RadialDimension2* pConstRadialDimension2 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_RadialDimension2_IsDiameterDimension(IntPtr pConstRadialDimension2);

  //ON_TextDot* ON_TextDot_New(const RHMONO_STRING* _str, ON_3DPOINT_STRUCT loc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_TextDot_New([MarshalAs(UnmanagedType.LPWStr)]string _str, Point3d loc);

  //void ON_TextDot_GetSetPoint(ON_TextDot* ptr, bool set, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_TextDot_GetSetPoint(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, ref Point3d pt);

  //const RHMONO_STRING* ON_TextDot_GetSetText(ON_TextDot* ptr, bool set, const RHMONO_STRING* _text)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_TextDot_GetSetText(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.LPWStr)]string _text);
  #endregion


  #region on_arc.cpp
  //void ON_Arc_Create1( ON_Arc* pArc, const ON_CIRCLE_STRUCT* pCircle, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create1(ref Arc pArc, ref Circle pCircle, double angle_radians);

  //void ON_Arc_Create2( ON_Arc* pArc, const ON_CIRCLE_STRUCT* pCircle, ON_INTERVAL_STRUCT interval)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create2(ref Arc pArc, ref Circle pCircle, Interval interval);

  //void ON_Arc_Create3( ON_Arc* pArc, const ON_PLANE_STRUCT* plane, double radius, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create3(ref Arc pArc, ref Plane plane, double radius, double angle_radians);

  //void ON_Arc_Create4( ON_Arc* pArc, ON_3DPOINT_STRUCT center, double radius, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create4(ref Arc pArc, Point3d center, double radius, double angle_radians);

  //void ON_Arc_Create5( ON_Arc* pArc, const ON_PLANE_STRUCT* plane, ON_3DPOINT_STRUCT center, double radius, double angle_radians )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create5(ref Arc pArc, ref Plane plane, Point3d center, double radius, double angle_radians);

  //void ON_Arc_Create6( ON_Arc* pArc, ON_3DPOINT_STRUCT p, ON_3DPOINT_STRUCT q, ON_3DPOINT_STRUCT r )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_Create6(ref Arc pArc, Point3d p, Point3d q, Point3d r);

  //bool ON_Arc_IsValid(ON_Arc* pArc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Arc_IsValid(ref Arc pArc);

  //void ON_Arc_BoundingBox(ON_Arc* pArc, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Arc_BoundingBox(ref Arc pArc, ref BoundingBox bbox);

  //bool ON_Arc_Transform( ON_Arc* pArc, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Arc_Transform(ref Arc pArc, ref Transform xf);

  //bool ON_Arc_ClosestPointTo(ON_Arc* pArc,
  //                                         ON_3DPOINT_STRUCT testPoint,
  //                                         double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Arc_ClosestPointTo(ref Arc pArc, Point3d testPoint, ref double t);

  //int ON_Arc_GetNurbForm(ON_Arc* pArc, ON_NurbsCurve* nurbs_curve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Arc_GetNurbForm(ref Arc pArc, IntPtr nurbs_curve);
  #endregion


  #region on_arccurve.cpp
  //ON_ArcCurve* ON_ArcCurve_New( ON_ArcCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New(IntPtr pOther);

  //ON_ArcCurve* ON_ArcCurve_New2( ON_Arc* arc )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New2(ref Arc arc);

  //ON_ArcCurve* ON_ArcCurve_New3( ON_Arc* arc, double t0, double t1 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New3(ref Arc arc, double t0, double t1);

  //ON_ArcCurve* ON_ArcCurve_New4( const ON_CIRCLE_STRUCT* pCircle )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New4(ref Circle pCircle);

  //ON_ArcCurve* ON_ArcCurve_New5( const ON_CIRCLE_STRUCT* pCircle, double t0, double t1 )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ArcCurve_New5(ref Circle pCircle, double t0, double t1);

  //bool ON_ArcCurve_IsCircle( const ON_ArcCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_ArcCurve_IsCircle(IntPtr pCurve);

  //double ON_ArcCurve_GetDouble(const ON_ArcCurve* pCurve, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_ArcCurve_GetDouble(IntPtr pCurve, int which);

  //void ON_ArcCurve_GetArc(const ON_ArcCurve* pConstCurve, ON_Arc* rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ArcCurve_GetArc(IntPtr pConstCurve, ref Arc rc);
  #endregion


  #region on_archive.cpp
  //CRhCmnStringHolder* StringHolder_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr StringHolder_New();

  //void StringHolder_Delete(CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void StringHolder_Delete(IntPtr pStringHolder);

  //const RHMONO_STRING* StringHolder_Get(CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr StringHolder_Get(IntPtr pStringHolder);

  //int ON_BinaryArchive_Archive3dmVersion(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BinaryArchive_Archive3dmVersion(IntPtr pArchive);

  //bool ON_BinaryArchive_Write3dmChunkVersion(ON_BinaryArchive* pArchive, int major, int minor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_Write3dmChunkVersion(IntPtr pArchive, int major, int minor);

  //bool ON_BinaryArchive_Read3dmChunkVersion(ON_BinaryArchive* pArchive, int* major, int* minor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_Read3dmChunkVersion(IntPtr pArchive, ref int major, ref int minor);

  //bool ON_BinaryArchive_ReadBool(ON_BinaryArchive* pArchive, bool* readBool)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadBool(IntPtr pArchive, [MarshalAs(UnmanagedType.U1)]ref bool readBool);

  //bool ON_BinaryArchive_WriteBool(ON_BinaryArchive* pArchive, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteBool(IntPtr pArchive, [MarshalAs(UnmanagedType.U1)]bool val);

  //bool ON_BinaryArchive_ReadBool2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/bool* readBool)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadBool2(IntPtr pArchive, int count, [MarshalAs(UnmanagedType.U1), In, Out] bool[] readBool);

  //bool ON_BinaryArchive_WriteBool2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const bool* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteBool2(IntPtr pArchive, int count, [MarshalAs(UnmanagedType.U1)] bool[] val);

  //bool ON_BinaryArchive_ReadByte(ON_BinaryArchive* pArchive, char* readByte)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadByte(IntPtr pArchive, ref byte readByte);

  //bool ON_BinaryArchive_WriteByte(ON_BinaryArchive* pArchive, char val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteByte(IntPtr pArchive, byte val);

  //bool ON_BinaryArchive_ReadByte2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/char* readByte)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadByte2(IntPtr pArchive, int count, [In,Out] byte[] readByte);

  //bool ON_BinaryArchive_WriteByte2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const char* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteByte2(IntPtr pArchive, int count, byte[] val);

  //bool ON_BinaryArchive_ReadShort(ON_BinaryArchive* pArchive, short* readShort)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadShort(IntPtr pArchive, ref short readShort);

  //bool ON_BinaryArchive_WriteShort(ON_BinaryArchive* pArchive, short val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteShort(IntPtr pArchive, short val);

  //bool ON_BinaryArchive_ReadShort2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/short* readShort)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadShort2(IntPtr pArchive, int count, [In,Out] short[] readShort);

  //bool ON_BinaryArchive_WriteShort2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const short* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteShort2(IntPtr pArchive, int count, short[] val);

  //bool ON_BinaryArchive_ReadInt(ON_BinaryArchive* pArchive, int* readInt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadInt(IntPtr pArchive, ref int readInt);

  //bool ON_BinaryArchive_WriteInt(ON_BinaryArchive* pArchive, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteInt(IntPtr pArchive, int val);

  //bool ON_BinaryArchive_ReadInt2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/int* readInt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadInt2(IntPtr pArchive, int count, [In,Out] int[] readInt);

  //bool ON_BinaryArchive_WriteInt2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const int* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteInt2(IntPtr pArchive, int count, int[] val);

  //bool ON_BinaryArchive_ReadInt64(ON_BinaryArchive* pArchive, ON__INT64* readInt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadInt64(IntPtr pArchive, ref Int64 readInt);

  //bool ON_BinaryArchive_WriteInt64(ON_BinaryArchive* pArchive, ON__INT64 val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteInt64(IntPtr pArchive, Int64 val);

  //bool ON_BinaryArchive_ReadSingle(ON_BinaryArchive* pArchive, float* readFloat)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadSingle(IntPtr pArchive, ref float readFloat);

  //bool ON_BinaryArchive_WriteSingle(ON_BinaryArchive* pArchive, float val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteSingle(IntPtr pArchive, float val);

  //bool ON_BinaryArchive_ReadSingle2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/float* readFloat)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadSingle2(IntPtr pArchive, int count, [In,Out] float[] readFloat);

  //bool ON_BinaryArchive_WriteSingle2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const float* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteSingle2(IntPtr pArchive, int count, float[] val);

  //bool ON_BinaryArchive_ReadDouble(ON_BinaryArchive* pArchive, double* readDouble)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadDouble(IntPtr pArchive, ref double readDouble);

  //bool ON_BinaryArchive_WriteDouble(ON_BinaryArchive* pArchive, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteDouble(IntPtr pArchive, double val);

  //bool ON_BinaryArchive_ReadDouble2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/double* readDouble)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadDouble2(IntPtr pArchive, int count, [In,Out] double[] readDouble);

  //bool ON_BinaryArchive_WriteDouble2(ON_BinaryArchive* pArchive, int count, /*ARRAY*/const double* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteDouble2(IntPtr pArchive, int count, double[] val);

  //bool ON_BinaryArchive_ReadGuid(ON_BinaryArchive* pArchive, ON_UUID* readGuid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadGuid(IntPtr pArchive, ref Guid readGuid);

  //bool ON_BinaryArchive_WriteGuid(ON_BinaryArchive* pArchive, const ON_UUID* val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteGuid(IntPtr pArchive, ref Guid val);

  //bool ON_BinaryArchive_ReadString(ON_BinaryArchive* pArchive, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadString(IntPtr pArchive, IntPtr pStringHolder);

  //bool ON_BinaryArchive_WriteString(ON_BinaryArchive* pArchive, const RHMONO_STRING* str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteString(IntPtr pArchive, [MarshalAs(UnmanagedType.LPWStr)]string str);

  //bool ON_BinaryArchive_ReadColor(ON_BinaryArchive* pArchive, int* argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadColor(IntPtr pArchive, ref int argb);

  //bool ON_BinaryArchive_WriteColor(ON_BinaryArchive* pArchive, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteColor(IntPtr pArchive, int argb);

  //bool ON_BinaryArchive_ReadTransform(ON_BinaryArchive* pArchive, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadTransform(IntPtr pArchive, ref Transform xf);

  //bool ON_BinaryArchive_WriteTransform(ON_BinaryArchive* pArchive, const ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteTransform(IntPtr pArchive, ref Transform xf);

  //bool ON_BinaryArchive_ReadPlane(ON_BinaryArchive* pArchive, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_ReadPlane(IntPtr pArchive, ref Plane plane);

  //bool ON_BinaryArchive_WritePlane(ON_BinaryArchive* pArchive, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WritePlane(IntPtr pArchive, ref Plane plane);

  //ON_Object* ON_BinaryArchive_ReadObject(ON_BinaryArchive* pArchive, int* read_rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BinaryArchive_ReadObject(IntPtr pArchive, ref int read_rc);

  //ON_Geometry* ON_BinaryArchive_ReadGeometry(ON_BinaryArchive* pArchive, int* read_rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BinaryArchive_ReadGeometry(IntPtr pArchive, ref int read_rc);

  //ON_MeshParameters* ON_BinaryArchive_ReadMeshParameters(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BinaryArchive_ReadMeshParameters(IntPtr pArchive);

  //bool ON_BinaryArchive_WriteMeshParameters(ON_BinaryArchive* pArchive, bool bSimple, bool bRefine, bool bJagged, bool bCurvature,
  //                                                        int min_count, int max_count, int face_type,
  //                                                        double tolerance, double min_tolerance, double rel_tolerance,
  //                                                        double grid_amp, double grid_angle, double grid_aspect, double refine_angle,
  //                                                        double min_edge_length, double max_edge_length)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteMeshParameters(IntPtr pArchive, [MarshalAs(UnmanagedType.U1)]bool bSimple, [MarshalAs(UnmanagedType.U1)]bool bRefine, [MarshalAs(UnmanagedType.U1)]bool bJagged, [MarshalAs(UnmanagedType.U1)]bool bCurvature, int min_count, int max_count, int face_type, double tolerance, double min_tolerance, double rel_tolerance, double grid_amp, double grid_angle, double grid_aspect, double refine_angle, double min_edge_length, double max_edge_length);

  //bool ON_BinaryArchive_WriteGeometry(ON_BinaryArchive* pArchive, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_WriteGeometry(IntPtr pArchive, IntPtr pConstGeometry);

  //bool ON_BinaryArchive_BeginReadDictionary(ON_BinaryArchive* pArchive, ON_UUID* dictionary_id, unsigned int* version, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_BeginReadDictionary(IntPtr pArchive, ref Guid dictionary_id, ref uint version, IntPtr pStringHolder);

  //bool ON_BinaryArchive_EndReadDictionary(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndReadDictionary(IntPtr pArchive);

  //bool ON_BinaryArchive_BeginWriteDictionary(ON_BinaryArchive* pArchive, ON_UUID dictionary_id, unsigned int version, const RHMONO_STRING* name )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_BeginWriteDictionary(IntPtr pArchive, Guid dictionary_id, uint version, [MarshalAs(UnmanagedType.LPWStr)]string name);

  //bool ON_BinaryArchive_EndWriteDictionary(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndWriteDictionary(IntPtr pArchive);

  //int ON_BinaryArchive_BeginReadDictionaryEntry(ON_BinaryArchive* pArchive, int* de_type, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BinaryArchive_BeginReadDictionaryEntry(IntPtr pArchive, ref int de_type, IntPtr pStringHolder);

  //bool ON_BinaryArchive_EndReadDictionaryEntry(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndReadDictionaryEntry(IntPtr pArchive);

  //bool ON_BinaryArchive_BeginWriteDictionaryEntry(ON_BinaryArchive* pArchive, int de_type, const RHMONO_STRING* entry_name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_BeginWriteDictionaryEntry(IntPtr pArchive, int de_type, [MarshalAs(UnmanagedType.LPWStr)]string entry_name);

  //bool ON_BinaryArchive_EndWriteDictionaryEntry(ON_BinaryArchive* pArchive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BinaryArchive_EndWriteDictionaryEntry(IntPtr pArchive);
  #endregion


  #region on_array.cpp
  //ON_SimpleArray<ON_Line>* ON_LineArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineArray_New();

  //void ON_LineArray_Delete( ON_SimpleArray<ON_Line>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LineArray_Delete(IntPtr pArray);

  //int ON_LineArray_Count( const ON_SimpleArray<ON_Line>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_LineArray_Count(IntPtr pArray);

  //void ON_LineArray_CopyValues( const ON_SimpleArray<ON_Line>* pArray, ON_Line* lines )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LineArray_CopyValues(IntPtr pArray, ref Line lines);

  //ON_SimpleArray<ON_COMPONENT_INDEX>* ON_ComponentIndexArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_ComponentIndexArray_New();

  //void ON_ComponentIndexArray_Delete( ON_SimpleArray<ON_COMPONENT_INDEX>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ComponentIndexArray_Delete(IntPtr pArray);

  //int ON_ComponentIndexArray_Count( const ON_SimpleArray<ON_COMPONENT_INDEX>* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_ComponentIndexArray_Count(IntPtr pArray);

  //void ON_ComponentIndexArray_CopyValues( const ON_SimpleArray<ON_COMPONENT_INDEX>* pArray, ON_COMPONENT_INDEX* ci )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_ComponentIndexArray_CopyValues(IntPtr pArray, ref ComponentIndex ci);

  //ON_3dPointArray* ON_3dPointArray_New(int capacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_3dPointArray_New(int capacity);

  //void ON_3dPointArray_Delete( ON_3dPointArray* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dPointArray_Delete(IntPtr pArray);

  //int ON_3dPointArray_Count( const ON_3dPointArray* pArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dPointArray_Count(IntPtr pArray);

  //void ON_3dPointArray_CopyValues( const ON_3dPointArray* pArray, /*ARRAY*/ON_3dPoint* pts )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dPointArray_CopyValues(IntPtr pArray, [In,Out] Point3d[] pts);

  //ON_SimpleArray<int>* ON_IntArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_IntArray_New();

  //void ON_IntArray_CopyValues(const ON_SimpleArray<int>* ptr, /*ARRAY*/int* vals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_IntArray_CopyValues(IntPtr ptr, [In,Out] int[] vals);

  //int ON_IntArray_Count(const ON_SimpleArray<int>* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_IntArray_Count(IntPtr ptr);

  //void ON_IntArray_Delete(ON_SimpleArray<int>* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_IntArray_Delete(IntPtr p);

  //ON_SimpleArray<double>* ON_DoubleArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_DoubleArray_New();

  //int ON_DoubleArray_Count(const ON_SimpleArray<double>* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_DoubleArray_Count(IntPtr ptr);

  //void ON_DoubleArray_Append(ON_SimpleArray<double>* pArray, int count, /*ARRAY*/const double* vals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DoubleArray_Append(IntPtr pArray, int count, double[] vals);

  //void ON_DoubleArray_CopyValues(const ON_SimpleArray<double>* ptr, double* vals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DoubleArray_CopyValues(IntPtr ptr, ref double vals);

  //void ON_DoubleArray_Delete(ON_SimpleArray<double>* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DoubleArray_Delete(IntPtr p);

  //ON_SimpleArray<ON_Brep*>* ON_BrepArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepArray_New();

  //void ON_BrepArray_Delete(ON_SimpleArray<ON_Brep*>* pBrepArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepArray_Delete(IntPtr pBrepArray);

  //int ON_BrepArray_Count(const ON_SimpleArray<ON_Brep*>* pBrepArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_BrepArray_Count(IntPtr pBrepArray);

  //void ON_BrepArray_Append(ON_SimpleArray<ON_Brep*>* pBrepArray, ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_BrepArray_Append(IntPtr pBrepArray, IntPtr pBrep);

  //ON_Brep* ON_BrepArray_Get(ON_SimpleArray<ON_Brep*>* pBrepArray, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepArray_Get(IntPtr pBrepArray, int index);

  //ON_SimpleArray<ON_Mesh*>* ON_MeshArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_MeshArray_New();

  //void ON_MeshArray_Delete(ON_SimpleArray<ON_Mesh*>* pMeshArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshArray_Delete(IntPtr pMeshArray);

  //int ON_MeshArray_Count(const ON_SimpleArray<ON_Mesh*>* pMeshArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_MeshArray_Count(IntPtr pMeshArray);

  //void ON_MeshArray_Append(ON_SimpleArray<ON_Mesh*>* pMeshArray, ON_Mesh* pMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshArray_Append(IntPtr pMeshArray, IntPtr pMesh);

  //ON_Mesh* ON_MeshArray_Get(ON_SimpleArray<ON_Mesh*>* pMeshArray, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_MeshArray_Get(IntPtr pMeshArray, int index);

  //ON_ClassArray<ON_wString>* ON_StringArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_StringArray_New();

  //void ON_StringArray_Append(ON_ClassArray<ON_wString>* pStrings, const RHMONO_STRING* str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_StringArray_Append(IntPtr pStrings, [MarshalAs(UnmanagedType.LPWStr)]string str);

  //void ON_StringArray_Delete(ON_ClassArray<ON_wString>* pStrings)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_StringArray_Delete(IntPtr pStrings);
  #endregion


  #region on_beam.cpp
  //ON_Extrusion* ON_Extrusion_New(const ON_Extrusion* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_New(IntPtr pOther);

  //ON_Brep* ON_Extrusion_BrepForm(const ON_Extrusion* pConstExtrusion, bool splitKinkyFaces)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_BrepForm(IntPtr pConstExtrusion, [MarshalAs(UnmanagedType.U1)]bool splitKinkyFaces);

  //bool ON_Extrusion_SetPathAndUp( ON_Extrusion* pExtrusion, ON_3DPOINT_STRUCT a, ON_3DPOINT_STRUCT b, ON_3DVECTOR_STRUCT up )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_SetPathAndUp(IntPtr pExtrusion, Point3d a, Point3d b, Vector3d up);

  //void ON_Extrusion_GetPoint( const ON_Extrusion* pConstExtrusion, bool pathStart, ON_3dPoint* pt )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_GetPoint(IntPtr pConstExtrusion, [MarshalAs(UnmanagedType.U1)]bool pathStart, ref Point3d pt);

  //void ON_Extrusion_GetPathTangent(const ON_Extrusion* pConstExtrusion, ON_3dVector* vec)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_GetPathTangent(IntPtr pConstExtrusion, ref Vector3d vec);

  //void ON_Extrusion_GetMiterPlaneNormal(const ON_Extrusion* pConstExtrusion, int end, ON_3dVector* normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_GetMiterPlaneNormal(IntPtr pConstExtrusion, int end, ref Vector3d normal);

  //void ON_Extrusion_SetMiterPlaneNormal(ON_Extrusion* pExtrusion, int end, ON_3DVECTOR_STRUCT normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Extrusion_SetMiterPlaneNormal(IntPtr pExtrusion, int end, Vector3d normal);

  //int ON_Extrusion_IsMitered(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_IsMitered(IntPtr pConstExtrusion);

  //bool ON_Extrusion_IsSolid(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_IsSolid(IntPtr pConstExtrusion);

  //int ON_Extrusion_IsCapped(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_IsCapped(IntPtr pConstExtrusion);

  //int ON_Extrusion_CapCount(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_CapCount(IntPtr pConstExtrusion);

  //ON_Extrusion* ON_Extrusion_CreateCylinder(const ON_Cylinder* cylinder, bool capBottom, bool capTop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_CreateCylinder(ref Cylinder cylinder, [MarshalAs(UnmanagedType.U1)]bool capBottom, [MarshalAs(UnmanagedType.U1)]bool capTop);

  //ON_Extrusion* ON_Extrusion_CreatePipe(const ON_Cylinder* cylinder, double otherRadius, bool capBottom, bool capTop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_CreatePipe(ref Cylinder cylinder, double otherRadius, [MarshalAs(UnmanagedType.U1)]bool capBottom, [MarshalAs(UnmanagedType.U1)]bool capTop);

  //bool ON_Extrusion_GetProfileTransformation(const ON_Extrusion* pConstExtrusion, double s, ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_GetProfileTransformation(IntPtr pConstExtrusion, double s, ref Transform xform);

  //bool ON_Extrusion_GetPlane(const ON_Extrusion* pConstExtrusion, bool profilePlane, double s, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_GetPlane(IntPtr pConstExtrusion, [MarshalAs(UnmanagedType.U1)]bool profilePlane, double s, ref Plane plane);

  //bool ON_Extrusion_SetOuterProfile(ON_Extrusion* pExtrusion, const ON_Curve* pCurve, bool cap)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_SetOuterProfile(IntPtr pExtrusion, IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool cap);

  //bool ON_Extrusion_AddInnerProfile(ON_Extrusion* pExtrusion, const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Extrusion_AddInnerProfile(IntPtr pExtrusion, IntPtr pCurve);

  //int ON_Extrusion_ProfileCount(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_ProfileCount(IntPtr pConstExtrusion);

  //ON_Curve* ON_Extrusion_Profile3d(const ON_Extrusion* pConstExtrusion, int profileIndex, double s)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_Profile3d(IntPtr pConstExtrusion, int profileIndex, double s);

  //ON_Curve* ON_Extrusion_Profile3d2(const ON_Extrusion* pConstExtrusion, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_Profile3d2(IntPtr pConstExtrusion, ComponentIndex componentIndex);

  //ON_Curve* ON_Extrusion_WallEdge(const ON_Extrusion* pConstExtrusion, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_WallEdge(IntPtr pConstExtrusion, ComponentIndex componentIndex);

  //ON_Surface* ON_Extrusion_WallSurface(const ON_Extrusion* pConstExtrusion, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_WallSurface(IntPtr pConstExtrusion, ComponentIndex componentIndex);

  //ON_LineCurve* ON_Extrusion_PathLineCurve(const ON_Extrusion* pConstExtrusion)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Extrusion_PathLineCurve(IntPtr pConstExtrusion);

  //int ON_Extrusion_ProfileIndex(const ON_Extrusion* pConstExtrusion, double profile_parameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Extrusion_ProfileIndex(IntPtr pConstExtrusion, double profile_parameter);
  #endregion


  #region on_brep.cpp
  //ON_Brep* ON_Brep_New(const ON_Brep* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_New(IntPtr pOther);

  //ON_Brep* ON_Brep_FromBox( ON_3DPOINT_STRUCT boxmin, ON_3DPOINT_STRUCT boxmax)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromBox(Point3d boxmin, Point3d boxmax);

  //ON_Brep* ON_Brep_FromBox2( /*ARRAY*/const ON_3dPoint* corners )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromBox2(Point3d[] corners);

  //ON_Brep* ON_Brep_FromCylinder(ON_Cylinder* cylinder, bool capBottom, bool capTop)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromCylinder(ref Cylinder cylinder, [MarshalAs(UnmanagedType.U1)]bool capBottom, [MarshalAs(UnmanagedType.U1)]bool capTop);

  //ON_MassProperties* ON_Brep_MassProperties(bool bArea, const ON_Brep* pBrep, double relativeTolerance, double absoluteTolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_MassProperties([MarshalAs(UnmanagedType.U1)]bool bArea, IntPtr pBrep, double relativeTolerance, double absoluteTolerance);

  //void ON_Brep_DuplicateEdgeCurves(const ON_Brep* pBrep, ON_SimpleArray<ON_Curve*>* pOutCurves, bool nakedOnly)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_DuplicateEdgeCurves(IntPtr pBrep, IntPtr pOutCurves, [MarshalAs(UnmanagedType.U1)]bool nakedOnly);

  //void ON_Brep_GetWireframe( const ON_Brep* pBrep, int density, ON_SimpleArray<ON_Curve*>* pWireframe )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_GetWireframe(IntPtr pBrep, int density, IntPtr pWireframe);

  //void ON_Brep_DuplicateVertices( const ON_Brep* pBrep, ON_3dPointArray* outPoints)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_DuplicateVertices(IntPtr pBrep, IntPtr outPoints);

  //bool ON_Brep_GetClosestPoint(const ON_Brep* pBrep, ON_3DPOINT_STRUCT testPoint,
  //                                           ON_3dPoint* closestPoint, 
  //                                           ON_COMPONENT_INDEX* ci, double* u, double* v,
  //                                           double maximumDistance, ON_3dVector* normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_GetClosestPoint(IntPtr pBrep, Point3d testPoint, ref Point3d closestPoint, ref ComponentIndex ci, ref double u, ref double v, double maximumDistance, ref Vector3d normal);

  //void ON_Brep_Flip(ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Brep_Flip(IntPtr pBrep);

  //bool ON_Brep_SplitKinkyFaces(ON_Brep* pBrep, double tolerance, bool compact)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_SplitKinkyFaces(IntPtr pBrep, double tolerance, [MarshalAs(UnmanagedType.U1)]bool compact);

  //bool ON_Brep_ShrinkFaces( ON_Brep* pBrep )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_ShrinkFaces(IntPtr pBrep);

  //int ON_Brep_GetInt(const ON_Brep* pConstBrep, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_GetInt(IntPtr pConstBrep, int which);

  //bool ON_Brep_FaceIsSurface(const ON_Brep* pConstBrep, int faceIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Brep_FaceIsSurface(IntPtr pConstBrep, int faceIndex);

  //const ON_BrepFace* ON_Brep_BrepFacePointer( const ON_Brep* pConstBrep, int faceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_BrepFacePointer(IntPtr pConstBrep, int faceIndex);

  //bool ON_BrepFace_IsReversed( const ON_BrepFace* pConstFace )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_BrepFace_IsReversed(IntPtr pConstFace);

  //const ON_BrepEdge* ON_Brep_BrepEdgePointer( const ON_Brep* pConstBrep, int edgeIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_BrepEdgePointer(IntPtr pConstBrep, int edgeIndex);

  //ON_Brep* ON_Brep_FromSurface( const ON_Surface* pConstSurface )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_FromSurface(IntPtr pConstSurface);

  //ON_Brep* ON_Brep_DuplicateFace( const ON_Brep* pConstBrep, int faceIndex, bool duplicateMeshes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_DuplicateFace(IntPtr pConstBrep, int faceIndex, [MarshalAs(UnmanagedType.U1)]bool duplicateMeshes);

  //ON_Brep* ON_Brep_SplitFace( const ON_Brep* pConstBrep, int faceIndex, ON_SimpleArray<const ON_Curve*>* curves, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_SplitFace(IntPtr pConstBrep, int faceIndex, IntPtr curves, double tolerance);

  //int ON_Brep_PointIsOnFace( const ON_Brep* pConstBrep, int faceIndex, double u, double v )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_PointIsOnFace(IntPtr pConstBrep, int faceIndex, double u, double v);

  //ON_Surface* ON_Brep_DuplicateFaceSurface( const ON_Brep* pConstBrep, int faceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_DuplicateFaceSurface(IntPtr pConstBrep, int faceIndex);

  //const ON_Mesh* ON_BrepFace_Mesh( const ON_Brep* pConstBrep, int faceIndex )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepFace_Mesh(IntPtr pConstBrep, int faceIndex);

  //const ON_Brep* ON_BrepSubItem_Brep( const ON_Geometry* pConstGeometry, int* index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_BrepSubItem_Brep(IntPtr pConstGeometry, ref int index);

  //int ON_Brep_CreateMesh( const ON_Brep* pConstBrep, ON_SimpleArray<ON_Mesh*>* meshes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_CreateMesh(IntPtr pConstBrep, IntPtr meshes);

  //int ON_Brep_CreateMesh2( const ON_Brep* pConstBrep, ON_SimpleArray<ON_Mesh*>* meshes, 
  //                                      bool bSimplePlanes, 
  //                                      bool bRefine, 
  //                                      bool bJaggedSeams, 
  //                                      bool bComputeCurvature, 
  //                                      int grid_min_count, 
  //                                      int grid_max_count, 
  //                                      int face_type, 
  //                                      double tolerance, 
  //                                      double min_tolerance, 
  //                                      double relative_tolerance, 
  //                                      double grid_amplification, 
  //                                      double grid_angle, 
  //                                      double grid_aspect_ratio, 
  //                                      double refine_angle, 
  //                                      double min_edge_length, 
  //                                      double max_edge_length )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_CreateMesh2(IntPtr pConstBrep, IntPtr meshes, [MarshalAs(UnmanagedType.U1)]bool bSimplePlanes, [MarshalAs(UnmanagedType.U1)]bool bRefine, [MarshalAs(UnmanagedType.U1)]bool bJaggedSeams, [MarshalAs(UnmanagedType.U1)]bool bComputeCurvature, int grid_min_count, int grid_max_count, int face_type, double tolerance, double min_tolerance, double relative_tolerance, double grid_amplification, double grid_angle, double grid_aspect_ratio, double refine_angle, double min_edge_length, double max_edge_length);

  //int ON_Brep_EdgeTrimCount( const ON_Brep* pConstBrep, int edge_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_EdgeTrimCount(IntPtr pConstBrep, int edge_index);

  //int ON_Brep_EdgeFaceIndices( const ON_Brep* pConstBrep, int edge_index, ON_SimpleArray<int>* fi )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_EdgeFaceIndices(IntPtr pConstBrep, int edge_index, IntPtr fi);

  //int ON_Brep_FaceEdgeIndices( const ON_Brep* pConstBrep, int face_index, ON_SimpleArray<int>* ei )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_FaceEdgeIndices(IntPtr pConstBrep, int face_index, IntPtr ei);

  //int ON_Brep_FaceFaceIndices( const ON_Brep* pConstBrep, int face_index, ON_SimpleArray<int>* fi )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Brep_FaceFaceIndices(IntPtr pConstBrep, int face_index, IntPtr fi);

  //ON_Brep* RHC_RhinoRetrimSurface( const ON_BrepFace* pConstBrepFace, const ON_Surface* pConstSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoRetrimSurface(IntPtr pConstBrepFace, IntPtr pConstSurface);

  //ON_Brep* ON_Brep_CopyTrims( const ON_BrepFace* pConstBrepFace, const ON_Surface* pConstSurface, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Brep_CopyTrims(IntPtr pConstBrepFace, IntPtr pConstSurface, double tolerance);

  //ON_Brep* ONC_ON_BrepCone( const ON_Cone* cone, bool cap )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONC_ON_BrepCone(ref Cone cone, [MarshalAs(UnmanagedType.U1)]bool cap);

  //ON_Brep* ONC_ON_BrepRevSurface( const ON_RevSurface* pConstRevSurface, bool capStart, bool capEnd )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ONC_ON_BrepRevSurface(IntPtr pConstRevSurface, [MarshalAs(UnmanagedType.U1)]bool capStart, [MarshalAs(UnmanagedType.U1)]bool capEnd);
  #endregion


  #region on_circle.cpp
  //void ON_Circle_Create3Pt(ON_CIRCLE_STRUCT* c, ON_3DPOINT_STRUCT p, ON_3DPOINT_STRUCT q, ON_3DPOINT_STRUCT r)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Circle_Create3Pt(ref Circle c, Point3d p, Point3d q, Point3d r);

  //bool ON_Circle_CreatePtVecPt(ON_CIRCLE_STRUCT* c, ON_3DPOINT_STRUCT p, ON_3DVECTOR_STRUCT tan_at_p, ON_3DPOINT_STRUCT q)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_CreatePtVecPt(ref Circle c, Point3d p, Vector3d tan_at_p, Point3d q);

  //bool ON_Circle_IsInPlane(const ON_CIRCLE_STRUCT* c, const ON_PLANE_STRUCT* plane, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_IsInPlane(ref Circle c, ref Plane plane, double tolerance);

  //void ON_Circle_BoundingBox(const ON_CIRCLE_STRUCT* c, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Circle_BoundingBox(ref Circle c, ref BoundingBox bbox);

  //bool ON_Circle_Transform( ON_CIRCLE_STRUCT* c, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_Transform(ref Circle c, ref Transform xf);

  //bool ON_Circle_ClosestPointTo( const ON_CIRCLE_STRUCT* c,
  //                                             ON_3DPOINT_STRUCT testPoint,
  //                                             double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Circle_ClosestPointTo(ref Circle c, Point3d testPoint, ref double t);

  //int ON_Circle_GetNurbForm(const ON_CIRCLE_STRUCT* pCircle, ON_NurbsCurve* nurbs_curve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Circle_GetNurbForm(ref Circle pCircle, IntPtr nurbs_curve);
  #endregion


  #region on_curve.cpp
  //bool ON_Curve_Domain( ON_Curve* pCurve, bool set, ON_Interval* ival )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Domain(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool set, ref Interval ival);

  //ON_Curve* ON_Curve_DuplicateCurve(ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_DuplicateCurve(IntPtr pCurve);

  //bool ON_Curve_ChangeClosedCurveSeam(ON_Curve* pCurve, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_ChangeClosedCurveSeam(IntPtr pCurve, double t);

  //int ON_Curve_SpanCount(const ON_Curve* pConstCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_SpanCount(IntPtr pConstCurve);

  //int ON_Curve_Dimension(const ON_Curve* pConstCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_Dimension(IntPtr pConstCurve);

  //int ON_Curve_Degree(const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_Degree(IntPtr pCurve);

  //bool ON_Curve_IsLinear(const ON_Curve* pCurve, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsLinear(IntPtr pCurve, double tolerance);

  //int ON_Curve_IsPolyline1( const ON_Curve* pCurve, ON_3dPointArray* points )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_IsPolyline1(IntPtr pCurve, IntPtr points);

  //double* ON_Curve_IsPolyline2( const ON_Curve* pCurve, ON_3dPointArray* points, int* pointCount )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_IsPolyline2(IntPtr pCurve, IntPtr points, ref int pointCount);

  //bool ON_Curve_IsArc( const ON_Curve* pCurve, int ignore, ON_PLANE_STRUCT* plane, ON_Arc* arc, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsArc(IntPtr pCurve, int ignore, ref Plane plane, ref Arc arc, double tolerance);

  //bool ON_Curve_IsEllipse( const ON_Curve* pCurve, int ignore, ON_PLANE_STRUCT* plane, ON_Ellipse* ellipse, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsEllipse(IntPtr pCurve, int ignore, ref Plane plane, ref Ellipse ellipse, double tolerance);

  //bool ON_Curve_IsPlanar( const ON_Curve* pCurve, bool ignorePlane, ON_PLANE_STRUCT* plane, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsPlanar(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool ignorePlane, ref Plane plane, double tolerance);

  //bool ON_Curve_IsInPlane(const ON_Curve* pCurve, const ON_PLANE_STRUCT* plane, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsInPlane(IntPtr pCurve, ref Plane plane, double tolerance);

  //bool ON_Curve_GetBool( const ON_Curve* pCurve, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetBool(IntPtr pCurve, int which);

  //bool ON_Curve_Reverse( ON_Curve* pCurve )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Reverse(IntPtr pCurve);

  //bool ON_Curve_SetPoint( ON_Curve* pCurve, ON_3DPOINT_STRUCT pt, bool startpoint )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_SetPoint(IntPtr pCurve, Point3d pt, [MarshalAs(UnmanagedType.U1)]bool startpoint);

  //void ON_Curve_PointAt( const ON_Curve* pCurve, double t, ON_3dPoint* pt, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Curve_PointAt(IntPtr pCurve, double t, ref Point3d pt, int which);

  //void ON_Curve_GetVector( const ON_Curve* pCurve, int which, double t, ON_3dVector* vec )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Curve_GetVector(IntPtr pCurve, int which, double t, ref Vector3d vec);

  //bool ON_Curve_Evaluate( const ON_Curve* pCurve, int derivatives, int side, double t, ON_3dPointArray* outVectors )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Evaluate(IntPtr pCurve, int derivatives, int side, double t, IntPtr outVectors);

  //bool ON_Curve_FrameAt( const ON_Curve* pCurve, double t, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_FrameAt(IntPtr pCurve, double t, ref Plane plane);

  //bool ON_Curve_GetClosestPoint( const ON_Curve* pCurve, ON_3DPOINT_STRUCT test_point, double* t, double maximum_distance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetClosestPoint(IntPtr pCurve, Point3d test_point, ref double t, double maximum_distance);

  //bool ON_Curve_GetLength( const ON_Curve* pCurve, double* length, double fractional_tol, ON_INTERVAL_STRUCT sub_domain, bool ignoreSubDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetLength(IntPtr pCurve, ref double length, double fractional_tol, Interval sub_domain, [MarshalAs(UnmanagedType.U1)]bool ignoreSubDomain);

  //bool ON_Curve_IsShort( const ON_Curve* pCurve, double tolerance, ON_INTERVAL_STRUCT sub_domain, bool ignoreSubDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsShort(IntPtr pCurve, double tolerance, Interval sub_domain, [MarshalAs(UnmanagedType.U1)]bool ignoreSubDomain);

  //bool ON_Curve_RemoveShortSegments( ON_Curve* pCurve, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_RemoveShortSegments(IntPtr pCurve, double tolerance);

  //bool ON_Curve_GetNormalizedArcLengthPoint( const ON_Curve* pCurve, double s, double* t, double fractional_tol, ON_INTERVAL_STRUCT sub_domain, bool ignoreSubDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetNormalizedArcLengthPoint(IntPtr pCurve, double s, ref double t, double fractional_tol, Interval sub_domain, [MarshalAs(UnmanagedType.U1)]bool ignoreSubDomain);

  //bool ON_Curve_GetNormalizedArcLengthPoints( const ON_Curve* pCurve, int count, /*ARRAY*/double* s, /*ARRAY*/double* t, double abs_tol, double frac_tol, ON_INTERVAL_STRUCT sub_domain, bool ignoreSubDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetNormalizedArcLengthPoints(IntPtr pCurve, int count, [In,Out] double[] s, [In,Out] double[] t, double abs_tol, double frac_tol, Interval sub_domain, [MarshalAs(UnmanagedType.U1)]bool ignoreSubDomain);

  //ON_Curve* ON_Curve_TrimExtend( const ON_Curve* pCurve, double t0, double t1, bool trimming)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_TrimExtend(IntPtr pCurve, double t0, double t1, [MarshalAs(UnmanagedType.U1)]bool trimming);

  //bool ON_Curve_Split( const ON_Curve* pCurve, double t, ON_Curve** left, ON_Curve** right )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_Split(IntPtr pCurve, double t, ref IntPtr left, ref IntPtr right);

  //int ON_Curve_HasNurbForm(const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_HasNurbForm(IntPtr pCurve);

  //ON_NurbsCurve* ON_Curve_NurbsCurve(const ON_Curve* pCurve, double tolerance, ON_INTERVAL_STRUCT sub_domain, bool ignoreSubDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_NurbsCurve(IntPtr pCurve, double tolerance, Interval sub_domain, [MarshalAs(UnmanagedType.U1)]bool ignoreSubDomain);

  //bool ON_Curve_GetNurbParameter(const ON_Curve* pCurve, double t_in, double* t_out, bool nurbToCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetNurbParameter(IntPtr pCurve, double t_in, ref double t_out, [MarshalAs(UnmanagedType.U1)]bool nurbToCurve);

  //ON_MassProperties* ON_Curve_AreaMassProperties(const ON_Curve* pCurve, double rel_tol, double abs_tol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Curve_AreaMassProperties(IntPtr pCurve, double rel_tol, double abs_tol);

  //ON_MassProperties* ON_Hatch_AreaMassProperties(const ON_Hatch* pConstHatch, double rel_tol, double abs_tol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Hatch_AreaMassProperties(IntPtr pConstHatch, double rel_tol, double abs_tol);

  //bool RHC_RhinoDivideCurve1(const ON_Curve* curvePtr, int segCount, bool include_ends, int tcount, /*ARRAY*/double* tvals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoDivideCurve1(IntPtr curvePtr, int segCount, [MarshalAs(UnmanagedType.U1)]bool include_ends, int tcount, [In,Out] double[] tvals);

  //bool RHC_RhinoDivideCurve2(const ON_Curve* curvePtr, 
  //                                         int segCount, 
  //                                         bool include_ends, 
  //                                         int tcount, 
  //                                         ON_3dPointArray* outPoints, 
  //                                         double* tvals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoDivideCurve2(IntPtr curvePtr, int segCount, [MarshalAs(UnmanagedType.U1)]bool include_ends, int tcount, IntPtr outPoints, ref double tvals);

  //bool RHC_RhinoDivideCurve3(const ON_Curve* curvePtr, 
  //                                         double segLength, 
  //                                         bool include_ends,
  //                                         ON_SimpleArray<double>* tvals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoDivideCurve3(IntPtr curvePtr, double segLength, [MarshalAs(UnmanagedType.U1)]bool include_ends, IntPtr tvals);

  //int RHC_RhinoDivideCurveEquidistant(const ON_Curve* pConstCurve, double distance, ON_3dPointArray* outPoints)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoDivideCurveEquidistant(IntPtr pConstCurve, double distance, IntPtr outPoints);

  //bool ON_Curve_IsClosable( const ON_Curve* curvePtr, double tolerance, double min_abs_size, double min_rel_size )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsClosable(IntPtr curvePtr, double tolerance, double min_abs_size, double min_rel_size);

  //int ON_Curve_ClosedCurveOrientation( const ON_Curve* curvePtr, ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_ClosedCurveOrientation(IntPtr curvePtr, ref Transform xform);

  //int ON_Curve_BooleanOperation( const ON_SimpleArray<const ON_Curve*>* inputCurves, ON_SimpleArray<ON_Curve*>* outputCurves, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Curve_BooleanOperation(IntPtr inputCurves, IntPtr outputCurves, int which);

  //ON_SimpleArray<ON_Curve*>* ON_CurveArray_New(int initial_capacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_CurveArray_New(int initial_capacity);

  //void ON_CurveArray_Append(ON_SimpleArray<ON_Curve*>* arrayPtr, ON_Curve* curvePtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_CurveArray_Append(IntPtr arrayPtr, IntPtr curvePtr);

  //int ON_CurveArray_Count(const ON_SimpleArray<ON_Curve*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_CurveArray_Count(IntPtr arrayPtr);

  //ON_Curve* ON_CurveArray_Get(ON_SimpleArray<ON_Curve*>* arrayPtr, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_CurveArray_Get(IntPtr arrayPtr, int index);

  //void ON_CurveArray_Delete(ON_SimpleArray<ON_Curve*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_CurveArray_Delete(IntPtr arrayPtr);

  //bool ON_Curve_GetNextDiscontinuity(const ON_Curve* curvePtr, int continuityType, double t0, double t1, double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_GetNextDiscontinuity(IntPtr curvePtr, int continuityType, double t0, double t1, ref double t);

  //bool ON_Curve_IsContinuous(const ON_Curve* curvePtr, int continuityType, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_IsContinuous(IntPtr curvePtr, int continuityType, double t);

  //bool RHC_RhinoConvertCurveToPolyline(
  //    const ON_Curve* pCurve, 
  //    int main_seg_count,
  //    int sub_seg_count,
  //    double max_ang_radians,
  //    double max_chr,
  //    double max_aspect,
  //    double tolerance,
  //    double min_edge_length,
  //    double max_edge_length,
  //    ON_PolylineCurve* polylineOut,
  //    bool bKeepStartPoint,
  //    ON_INTERVAL_STRUCT curve_domain,
  //    bool ignoreCurveDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoConvertCurveToPolyline(IntPtr pCurve, int main_seg_count, int sub_seg_count, double max_ang_radians, double max_chr, double max_aspect, double tolerance, double min_edge_length, double max_edge_length, IntPtr polylineOut, [MarshalAs(UnmanagedType.U1)]bool bKeepStartPoint, Interval curve_domain, [MarshalAs(UnmanagedType.U1)]bool ignoreCurveDomain);

  //bool ON_Curve_DoCurveDirectionsMatch(const ON_Curve* curve0, const ON_Curve* curve1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Curve_DoCurveDirectionsMatch(IntPtr curve0, IntPtr curve1);

  //ON_PolylineCurve* RHC_RhinoPullCurveToMesh(const ON_Curve* pCurve, const ON_Mesh* pMesh, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoPullCurveToMesh(IntPtr pCurve, IntPtr pMesh, double tolerance);

  //int RHC_RhinoDuplicateCurveSegments(const ON_Curve* pCurve, ON_SimpleArray<ON_Curve*>* outputSegments)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoDuplicateCurveSegments(IntPtr pCurve, IntPtr outputSegments);

  //ON_Curve* RHC_RhinoSimplifyCurve(const ON_Curve* pConstCurve, int flags, double dist_tol, double angle_tol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoSimplifyCurve(IntPtr pConstCurve, int flags, double dist_tol, double angle_tol);

  //ON_Curve* RHC_RhinoSimplifyCurveEnd(const ON_Curve* pConstCurve, int side, int flags, double dist_tol, double angle_tol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoSimplifyCurveEnd(IntPtr pConstCurve, int side, int flags, double dist_tol, double angle_tol);

  //ON_NurbsCurve* RHC_RhinoFitCurve(const ON_Curve* pCurve, int degree, double fitTol, double angleTol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoFitCurve(IntPtr pCurve, int degree, double fitTol, double angleTol);

  //ON_Curve* RHC_RhinoFairCurve(const ON_Curve* pCurve, double distanceTolerance,
  //      double angleTolerance, int clampStart, int clampEnd, int iterations)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoFairCurve(IntPtr pCurve, double distanceTolerance, double angleTolerance, int clampStart, int clampEnd, int iterations);

  //ON_NurbsCurve* RHC_RhinoRebuildCurve( const ON_Curve* pCurve, int pCount, int degree, bool keepTangents)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoRebuildCurve(IntPtr pCurve, int pCount, int degree, [MarshalAs(UnmanagedType.U1)]bool keepTangents);

  //bool RHC_RhinoMergeCurves(ON_SimpleArray<const ON_Curve*>* inputCurves,
  //                                        ON_SimpleArray<ON_Curve*>* outputCurves, 
  //                                        double joinTolerance, bool preserveDirection)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoMergeCurves(IntPtr inputCurves, IntPtr outputCurves, double joinTolerance, [MarshalAs(UnmanagedType.U1)]bool preserveDirection);

  //int RHC_RhinoOffsetCurveOnSrf( const ON_Curve* pConstCurve, const ON_Brep* pConstBrep, int faceId,
  //                                             double distance, double tol,
  //                                             ON_SimpleArray<ON_Curve*>* pCurves )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoOffsetCurveOnSrf(IntPtr pConstCurve, IntPtr pConstBrep, int faceId, double distance, double tol, IntPtr pCurves);

  //int RHC_RhinoOffsetCurveOnSrf2( const ON_Curve* pConstCurve, const ON_Brep* pConstBrep, int faceId,
  //                                             ON_2DPOINT_STRUCT through_pt, double tol,
  //                                             ON_SimpleArray<ON_Curve*>* pCurves )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoOffsetCurveOnSrf2(IntPtr pConstCurve, IntPtr pConstBrep, int faceId, Point2d through_pt, double tol, IntPtr pCurves);

  //int RHC_RhinoOffsetCurveOnSrf3( const ON_Curve* pConstCurve, const ON_Brep* pConstBrep, int faceId,
  //                                             int count, /*ARRAY*/const double* parameters, /*ARRAY*/const double* dists, double tol,
  //                                             ON_SimpleArray<ON_Curve*>* pCurves )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoOffsetCurveOnSrf3(IntPtr pConstCurve, IntPtr pConstBrep, int faceId, int count, double[] parameters, double[] dists, double tol, IntPtr pCurves);

  //int RHC_PointInClosedRegion( const ON_Curve* pConstCurve, ON_3DPOINT_STRUCT test_point, ON_PLANE_STRUCT plane, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_PointInClosedRegion(IntPtr pConstCurve, Point3d test_point, Plane plane, double tolerance);

  //int RHC_RhinoGet1RailFrames(const ON_Curve* pConstCurve, int count, /*ARRAY*/const double* parameters, /*ARRAY*/ON_PLANE_STRUCT* frames)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoGet1RailFrames(IntPtr pConstCurve, int count, double[] parameters, [In,Out] Plane[] frames);
  #endregion


  #region on_defines.cpp
  //double ONC_UnitScale(int from, int to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ONC_UnitScale(int from, int to);
  #endregion


  #region on_detail.cpp
  //bool ON_DetailView_GetBool(const ON_DetailView* pConstDetail, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_DetailView_GetBool(IntPtr pConstDetail, int which);

  //void ON_DetailView_SetBool(ON_DetailView* pDetail, int which, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DetailView_SetBool(IntPtr pDetail, int which, [MarshalAs(UnmanagedType.U1)]bool val);

  //double ON_DetailView_GetPageToModelRatio(const ON_DetailView* pConstDetail)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_DetailView_GetPageToModelRatio(IntPtr pConstDetail);

  //bool ON_DetailView_SetScale(ON_DetailView* pDetail, double model_length, int modelUnitSystem, double paper_length, int pageUnitSystem)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_DetailView_SetScale(IntPtr pDetail, double model_length, int modelUnitSystem, double paper_length, int pageUnitSystem);
  #endregion


  #region on_dimstyle.cpp
  //ON_DimStyle* ON_DimStyle_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_DimStyle_New();

  //int ON_DimStyle_GetIndex(const ON_DimStyle* pConstDimStyle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_DimStyle_GetIndex(IntPtr pConstDimStyle);

  //double ON_DimStyle_GetDouble(const ON_DimStyle* pConstDimStyle, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_DimStyle_GetDouble(IntPtr pConstDimStyle, int which);

  //void ON_DimStyle_SetDouble(ON_DimStyle* pDimStyle, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetDouble(IntPtr pDimStyle, int which, double val);

  //ON_UUID ON_DimStyle_ModelObjectId(const ON_DimStyle* pDimStyle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_DimStyle_ModelObjectId(IntPtr pDimStyle);

  //void ON_DimStyle_SetName(ON_DimStyle* pDimStyle, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetName(IntPtr pDimStyle, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //int ON_DimStyle_GetInt(const ON_DimStyle* pConstDimStyle, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_DimStyle_GetInt(IntPtr pConstDimStyle, int which);

  //void ON_DimStyle_SetInt(ON_DimStyle* pDimStyle, int which, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetInt(IntPtr pDimStyle, int which, int val);

  //void ON_DimStyle_GetString(const ON_DimStyle* pConstDimStyle, CRhCmnStringHolder* pString, bool prefix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_GetString(IntPtr pConstDimStyle, IntPtr pString, [MarshalAs(UnmanagedType.U1)]bool prefix);

  //void ON_DimStyle_SetString(ON_DimStyle* pDimStyle, const RHMONO_STRING* str, bool prefix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_DimStyle_SetString(IntPtr pDimStyle, [MarshalAs(UnmanagedType.LPWStr)]string str, [MarshalAs(UnmanagedType.U1)]bool prefix);
  #endregion


  #region on_geometry.cpp
  //void ON_Geometry_BoundingBox( const ON_Geometry* ptr, ON_BoundingBox* bbox )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Geometry_BoundingBox(IntPtr ptr, ref BoundingBox bbox);

  //bool ON_Geometry_Rotate( ON_Geometry* ptr, double angle, ON_3DVECTOR_STRUCT axis, ON_3DPOINT_STRUCT center)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Rotate(IntPtr ptr, double angle, Vector3d axis, Point3d center);

  //bool ON_Geometry_Translate( ON_Geometry* ptr, ON_3DVECTOR_STRUCT translation_vector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Translate(IntPtr ptr, Vector3d translation_vector);

  //bool ON_Geometry_Scale( ON_Geometry* ptr, double scale)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Scale(IntPtr ptr, double scale);

  //bool ON_Geometry_GetTightBoundingBox(const ON_Geometry* ptr, ON_BoundingBox* bbox, ON_Xform* xform, bool useXform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_GetTightBoundingBox(IntPtr ptr, ref BoundingBox bbox, ref Transform xform, [MarshalAs(UnmanagedType.U1)]bool useXform);

  //bool ON_Geometry_Transform( ON_Geometry* ptr, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_Transform(IntPtr ptr, ref Transform xf);

  //bool ON_Geometry_GetBool(ON_Geometry* pGeometry, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Geometry_GetBool(IntPtr pGeometry, int which);

  //void ON_Geometry_ComponentIndex( const ON_Geometry* ptr, ON_COMPONENT_INDEX* ci )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Geometry_ComponentIndex(IntPtr ptr, ref ComponentIndex ci);

  //int ON_Geometry_GetGeometryType( const ON_Object* pOnObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Geometry_GetGeometryType(IntPtr pOnObject);

  //int ON_Geometry_GetCurveType( const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Geometry_GetCurveType(IntPtr pCurve);

  //ON_Brep* ON_Geometry_BrepForm(const ON_Geometry* pGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Geometry_BrepForm(IntPtr pGeometry);

  //ON_SimpleArray<ON_Geometry*>* ON_GeometryArray_New(int initial_capacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_GeometryArray_New(int initial_capacity);

  //void ON_GeometryArray_Append(ON_SimpleArray<ON_Geometry*>* arrayPtr, ON_Geometry* geomPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_GeometryArray_Append(IntPtr arrayPtr, IntPtr geomPtr);

  //void ON_GeometryArray_Delete(ON_SimpleArray<ON_Geometry*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_GeometryArray_Delete(IntPtr arrayPtr);

  //int ON_GeometryArray_Count(ON_SimpleArray<ON_Geometry*>* arrayPtr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_GeometryArray_Count(IntPtr arrayPtr);

  //ON_Geometry* ON_GeometryArray_Get(ON_SimpleArray<ON_Geometry*>* arrayPtr, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_GeometryArray_Get(IntPtr arrayPtr, int index);
  #endregion


  #region on_hatch.cpp
  //ON_HatchPattern* ON_HatchPattern_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_HatchPattern_New();

  //void ON_HatchPattern_GetString(const ON_HatchPattern* pConstHatchPattern, CRhCmnStringHolder* pString, bool name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_HatchPattern_GetString(IntPtr pConstHatchPattern, IntPtr pString, [MarshalAs(UnmanagedType.U1)]bool name);

  //void ON_HatchPattern_SetString(ON_HatchPattern* pHatchPattern, const RHMONO_STRING* str, bool name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_HatchPattern_SetString(IntPtr pHatchPattern, [MarshalAs(UnmanagedType.LPWStr)]string str, [MarshalAs(UnmanagedType.U1)]bool name);

  //int ON_HatchPattern_GetFillType(const ON_HatchPattern* pConstHatchPattern)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_HatchPattern_GetFillType(IntPtr pConstHatchPattern);

  //void ON_HatchPattern_SetFillType(ON_HatchPattern* pHatchPattern, int filltype)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_HatchPattern_SetFillType(IntPtr pHatchPattern, int filltype);

  //void ON_Hatch_Explode(const ON_Hatch* pConstHatch,
  //                                    const CRhinoObject* pConstParentRhinoObject,
  //                                    ON_SimpleArray<ON_Geometry*>* pOutputGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_Explode(IntPtr pConstHatch, IntPtr pConstParentRhinoObject, IntPtr pOutputGeometry);

  //int ON_Hatch_PatternIndex(const ON_Hatch* pConstHatch)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Hatch_PatternIndex(IntPtr pConstHatch);

  //void ON_Hatch_SetPatternIndex(ON_Hatch* pHatch, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_SetPatternIndex(IntPtr pHatch, int val);

  //double ON_Hatch_GetRotation(const ON_Hatch* pConstHatch)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Hatch_GetRotation(IntPtr pConstHatch);

  //void ON_Hatch_SetRotation(ON_Hatch* pHatch, double rotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_SetRotation(IntPtr pHatch, double rotation);

  //double ON_Hatch_GetScale(const ON_Hatch* pConstHatch)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Hatch_GetScale(IntPtr pConstHatch);

  //void ON_Hatch_SetScale(ON_Hatch* pHatch, double rotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Hatch_SetScale(IntPtr pHatch, double rotation);
  #endregion


  #region on_instance.cpp
  //ON_InstanceDefinition* ON_InstanceDefinition_New(const ON_InstanceDefinition* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_InstanceDefinition_New(IntPtr pOther);

  //const RHMONO_STRING* ON_InstanceDefinition_GetString(const ON_InstanceDefinition* pConstInstanceDefinition, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_InstanceDefinition_GetString(IntPtr pConstInstanceDefinition, int which);

  //void ON_InstanceDefinition_SetString( ON_InstanceDefinition* pInstanceDefinition, int which, const RHMONO_STRING* _str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_InstanceDefinition_SetString(IntPtr pInstanceDefinition, int which, [MarshalAs(UnmanagedType.LPWStr)]string _str);
  #endregion


  #region on_intersect.cpp
  //bool ON_Intersect_LineLine(ON_Line* lineA, ON_Line* lineB, double* a, double* b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_LineLine(ref Line lineA, ref Line lineB, ref double a, ref double b);

  //bool ON_Intersect_LinePlane(ON_Line* line, const ON_PLANE_STRUCT* plane, double* parameterOnLine)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_LinePlane(ref Line line, ref Plane plane, ref double parameterOnLine);

  //bool ON_Intersect_PlanePlane(const ON_PLANE_STRUCT* planeA, const ON_PLANE_STRUCT* planeB, ON_Line* line)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_PlanePlane(ref Plane planeA, ref Plane planeB, ref Line line);

  //bool ON_Intersect_PlanePlanePlane(const ON_PLANE_STRUCT* planeA, const ON_PLANE_STRUCT* planeB, const ON_PLANE_STRUCT* planeC, ON_3dPoint* intersectionPoint)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_PlanePlanePlane(ref Plane planeA, ref Plane planeB, ref Plane planeC, ref Point3d intersectionPoint);

  //int ON_Intersect_PlaneSphere(const ON_PLANE_STRUCT* plane, ON_Sphere* sphere, ON_CIRCLE_STRUCT* intersectionCircle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_PlaneSphere(ref Plane plane, ref Sphere sphere, ref Circle intersectionCircle);

  //int ON_Intersect_LineSphere(ON_Line* line, ON_Sphere* sphere, ON_3dPoint* point1, ON_3dPoint* point2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_LineSphere(ref Line line, ref Sphere sphere, ref Point3d point1, ref Point3d point2);

  //int ON_Intersect_LineCircle(const ON_Line* pLine, const ON_CIRCLE_STRUCT* pCircle, double* t1, ON_3dPoint* point1, double* t2, ON_3dPoint* point2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_LineCircle(ref Line pLine, ref Circle pCircle, ref double t1, ref Point3d point1, ref double t2, ref Point3d point2);

  //int ON_Intersect_LineCylinder(ON_Line* line, ON_Cylinder* cylinder, ON_3dPoint* point1, ON_3dPoint* point2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_LineCylinder(ref Line line, ref Cylinder cylinder, ref Point3d point1, ref Point3d point2);

  //bool ON_Intersect_BoundingBoxLine(ON_BoundingBox* box, ON_Line* line, double tolerance, ON_Interval* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_BoundingBoxLine(ref BoundingBox box, ref Line line, double tolerance, ref Interval t);

  //int ON_Intersect_SphereSphere(ON_Sphere* sphereA, ON_Sphere* sphereB, ON_CIRCLE_STRUCT* pCircle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_SphereSphere(ref Sphere sphereA, ref Sphere sphereB, ref Circle pCircle);

  //bool ON_Intersect_CurveBrep(const ON_Curve* curvePtr, const ON_Brep* brepPtr,
  //                                          double tolerance, ON_SimpleArray<ON_Curve*>* outCurves,
  //                                          ON_3dPointArray* outPoints)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_CurveBrep(IntPtr curvePtr, IntPtr brepPtr, double tolerance, IntPtr outCurves, IntPtr outPoints);

  //bool ON_Intersect_BrepBrep(const ON_Brep* brepPtrA, const ON_Brep* brepPtrB,
  //                                         double tolerance, ON_SimpleArray<ON_Curve*>* outCurves,
  //                                         ON_3dPointArray* outPoints)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_BrepBrep(IntPtr brepPtrA, IntPtr brepPtrB, double tolerance, IntPtr outCurves, IntPtr outPoints);

  //ON_SimpleArray<ON_Polyline*>* ON_Intersect_MeshPlanes1(const ON_Mesh* meshPtr, int plane_count, /*ARRAY*/const ON_PLANE_STRUCT* planes, int* polyline_count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Intersect_MeshPlanes1(IntPtr meshPtr, int plane_count, Plane[] planes, ref int polyline_count);

  //int ON_Intersect_MeshPlanes2(ON_SimpleArray<ON_Polyline*>* pPolylines, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_MeshPlanes2(IntPtr pPolylines, int i);

  //void ON_Intersect_MeshPlanes3(ON_SimpleArray<ON_Polyline*>* pPolylines, int i, int point_count, /*ARRAY*/ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Intersect_MeshPlanes3(IntPtr pPolylines, int i, int point_count, [In,Out] Point3d[] points);

  //void ON_Intersect_MeshPlanes4(ON_SimpleArray<ON_Polyline*>* pPolylines)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Intersect_MeshPlanes4(IntPtr pPolylines);

  //double ON_Intersect_MeshRay1(const ON_Mesh* pMesh, ON_3dRay* ray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Intersect_MeshRay1(IntPtr pMesh, ref Ray3d ray);

  //ON_SimpleArray<ON_CMX_EVENT>* ON_Intersect_MeshPolyline1(const ON_Mesh* pMesh, const ON_PolylineCurve* pCurve, int* count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Intersect_MeshPolyline1(IntPtr pMesh, IntPtr pCurve, ref int count);

  //void ON_Intersect_MeshPolyline_Fill(ON_SimpleArray<ON_CMX_EVENT>* pCMX, int count, /*ARRAY*/ON_3dPoint* points, /*ARRAY*/int* faceIds)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Intersect_MeshPolyline_Fill(IntPtr pCMX, int count, [In,Out] Point3d[] points, [In,Out] int[] faceIds);

  //ON_SimpleArray<ON_X_EVENT>* ON_Intersect_CurveSelf(const ON_Curve* pCurve, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Intersect_CurveSelf(IntPtr pCurve, double tolerance);

  //ON_SimpleArray<ON_X_EVENT>* ON_Intersect_CurveCurve(const ON_Curve* pCurveA,
  //                                                                  const ON_Curve* pCurveB,
  //                                                                  double tolerance,
  //                                                                  double overlap_tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Intersect_CurveCurve(IntPtr pCurveA, IntPtr pCurveB, double tolerance, double overlap_tolerance);

  //ON_SimpleArray<ON_X_EVENT>* ON_Intersect_CurveSurface(const ON_Curve* pCurve,
  //                                                                    const ON_Surface* pSurface,
  //                                                                    double tolerance,
  //                                                                    double overlap_tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Intersect_CurveSurface(IntPtr pCurve, IntPtr pSurface, double tolerance, double overlap_tolerance);

  //ON_SimpleArray<ON_X_EVENT>* ON_Intersect_CurveSurface2(const ON_Curve* pCurve,
  //                                                                     const ON_Surface* pSurface,
  //                                                                     double domain0, 
  //                                                                     double domain1,
  //                                                                     double tolerance,
  //                                                                     double overlap_tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Intersect_CurveSurface2(IntPtr pCurve, IntPtr pSurface, double domain0, double domain1, double tolerance, double overlap_tolerance);

  //void ON_Intersect_IntersectArrayDelete(ON_SimpleArray<ON_X_EVENT>* pArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Intersect_IntersectArrayDelete(IntPtr pArray);

  //int ON_Intersect_IntersectArrayCount(const ON_SimpleArray<ON_X_EVENT>* pArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Intersect_IntersectArrayCount(IntPtr pArray);

  //bool ON_Intersect_CurveIntersectData(const ON_SimpleArray<ON_X_EVENT>* pArray,
  //                                                   int index, int* type,
  //                                                   ON_3dPoint* startA, ON_3dPoint* endA,
  //                                                   ON_3dPoint* startB, ON_3dPoint* endB,
  //                                                   double* ua0, double* ua1,
  //                                                   double* ub0, double* ub1,
  //                                                   double* vb0, double* vb1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Intersect_CurveIntersectData(IntPtr pArray, int index, ref int type, ref Point3d startA, ref Point3d endA, ref Point3d startB, ref Point3d endB, ref double ua0, ref double ua1, ref double ub0, ref double ub1, ref double vb0, ref double vb1);

  //int ON_RayShooter_OneSurface(ON_3DPOINT_STRUCT _point, ON_3DVECTOR_STRUCT _direction, const ON_Surface* pConstSurface, ON_SimpleArray<ON_3dPoint>* pPoints, int maxReflections)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_RayShooter_OneSurface(Point3d _point, Vector3d _direction, IntPtr pConstSurface, IntPtr pPoints, int maxReflections);

  //int ON_RayShooter_ShootRay(ON_3DPOINT_STRUCT _point, ON_3DVECTOR_STRUCT _direction,
  //                                           const ON_SimpleArray<const ON_Geometry*>* pConstGeometryArray,
  //                                           ON_SimpleArray<ON_3dPoint>* pPoints, int maxReflections)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_RayShooter_ShootRay(Point3d _point, Vector3d _direction, IntPtr pConstGeometryArray, IntPtr pPoints, int maxReflections);

  //ON_SimpleArray<ON_Polyline*>* ON_Intersect_MeshMesh1(const ON_Mesh* pConstMeshA, const ON_Mesh* pConstMeshB, int* polyline_count, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Intersect_MeshMesh1(IntPtr pConstMeshA, IntPtr pConstMeshB, ref int polyline_count, double tolerance);
  #endregion


  #region on_layer.cpp
  //ON_Layer* ON_Layer_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Layer_New();

  //void ON_Layer_Default(ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_Default(IntPtr pLayer);

  //void ON_Layer_GetLayerName(const ON_Layer* pLayer, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_GetLayerName(IntPtr pLayer, IntPtr pStringHolder);

  //void ON_Layer_SetLayerName(ON_Layer* pLayer, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetLayerName(IntPtr pLayer, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //int ON_Layer_GetColor(const ON_Layer* pLayer, bool regularColor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Layer_GetColor(IntPtr pLayer, [MarshalAs(UnmanagedType.U1)]bool regularColor);

  //void ON_Layer_SetColor(ON_Layer* pLayer, int argb, bool regularColor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetColor(IntPtr pLayer, int argb, [MarshalAs(UnmanagedType.U1)]bool regularColor);

  //int ON_Layer_GetInt(const ON_Layer* pLayer, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Layer_GetInt(IntPtr pLayer, int which);

  //void ON_Layer_SetInt(ON_Layer* pLayer, int which, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetInt(IntPtr pLayer, int which, int val);

  //bool ON_Layer_GetSetBool(ON_Layer* pLayer, int which, bool set, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Layer_GetSetBool(IntPtr pLayer, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool val);

  //double ON_Layer_GetPlotWeight(const ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Layer_GetPlotWeight(IntPtr pLayer);

  //void ON_Layer_SetPlotWeight(ON_Layer* pLayer, double value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetPlotWeight(IntPtr pLayer, double value);

  //ON_UUID ON_Layer_GetGuid(const ON_Layer* pLayer, bool layerId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Layer_GetGuid(IntPtr pLayer, [MarshalAs(UnmanagedType.U1)]bool layerId);

  //void ON_Layer_SetGuid(ON_Layer* pLayer, bool layerId, ON_UUID value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Layer_SetGuid(IntPtr pLayer, [MarshalAs(UnmanagedType.U1)]bool layerId, Guid value);
  #endregion


  #region on_light.cpp
  //ON_Light* ON_Light_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Light_New();

  //bool ON_Light_IsEnabled(const ON_Light* pConstLight)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Light_IsEnabled(IntPtr pConstLight);

  //void ON_Light_SetEnabled(ON_Light* pLight, bool enabled)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetEnabled(IntPtr pLight, [MarshalAs(UnmanagedType.U1)]bool enabled);

  //int ON_Light_GetInt(const ON_Light* pConstLight, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Light_GetInt(IntPtr pConstLight, int which);

  //void ON_Light_SetInt(ON_Light* pLight, int which, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetInt(IntPtr pLight, int which, int val);

  //void ON_Light_GetVector(const ON_Light* pConstLight, ON_3dVector* vec, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_GetVector(IntPtr pConstLight, ref Vector3d vec, int which);

  //void ON_Light_SetVector(ON_Light* pLight, ON_3DVECTOR_STRUCT v, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetVector(IntPtr pLight, Vector3d v, int which);

  //void ON_Light_GetLocation(const ON_Light* pConstLight, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_GetLocation(IntPtr pConstLight, ref Point3d pt);

  //void ON_Light_SetLocation(ON_Light* pLight, ON_3DPOINT_STRUCT loc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetLocation(IntPtr pLight, Point3d loc);

  //double ON_Light_GetDouble(const ON_Light* pConstLight, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Light_GetDouble(IntPtr pConstLight, int which);

  //void ON_Light_SetDouble(ON_Light* pLight, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetDouble(IntPtr pLight, int which, double val);

  //int ON_Light_GetColor(const ON_Light* pConstLight, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Light_GetColor(IntPtr pConstLight, int which);

  //void ON_Light_SetColor(ON_Light* pLight, int which, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetColor(IntPtr pLight, int which, int argb);

  //void ON_Light_SetAttenuation(ON_Light* pLight, double a0, double a1, double a2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetAttenuation(IntPtr pLight, double a0, double a1, double a2);

  //double ON_Light_GetAttenuation(const ON_Light* pConstLight, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Light_GetAttenuation(IntPtr pConstLight, double d);

  //bool ON_Light_GetSpotLightRadii(const ON_Light* pConstLight, double* inner, double* outer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Light_GetSpotLightRadii(IntPtr pConstLight, ref double inner, ref double outer);

  //void ON_Light_GetName(const ON_Light* pConstLight, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_GetName(IntPtr pConstLight, IntPtr pString);

  //void ON_Light_SetName(ON_Light* pLight, const RHMONO_STRING* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Light_SetName(IntPtr pLight, [MarshalAs(UnmanagedType.LPWStr)]string pString);
  #endregion


  #region on_line.cpp
  //double ON_Line_DistanceToPoint( const ON_Line* pLine, ON_3DPOINT_STRUCT point, bool minDist)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Line_DistanceToPoint(ref Line pLine, Point3d point, [MarshalAs(UnmanagedType.U1)]bool minDist);

  //double ON_Line_DistanceToLine( const ON_Line* pLine, const ON_Line* pOtherLine, bool minDist)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Line_DistanceToLine(ref Line pLine, ref Line pOtherLine, [MarshalAs(UnmanagedType.U1)]bool minDist);

  //bool ON_Line_Transform( ON_Line* pLine, const ON_Xform* xform )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Line_Transform(ref Line pLine, ref Transform xform);

  //bool ON_Line_InPlane( const ON_Line* pConstLine, ON_PLANE_STRUCT* plane )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Line_InPlane(ref Line pConstLine, ref Plane plane);
  #endregion


  #region on_linecurve.cpp
  //ON_LineCurve* ON_LineCurve_New( ON_LineCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New(IntPtr pOther);

  //ON_LineCurve* ON_LineCurve_New2(ON_2DPOINT_STRUCT from, ON_2DPOINT_STRUCT to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New2(Point2d from, Point2d to);

  //ON_LineCurve* ON_LineCurve_New3(ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New3(Point3d from, Point3d to);

  //ON_LineCurve* ON_LineCurve_New4(ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to, double t0, double t1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_LineCurve_New4(Point3d from, Point3d to, double t0, double t1);

  //void ON_LineCurve_GetSetLine(ON_LineCurve* pCurve, bool set, ON_Line* line)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LineCurve_GetSetLine(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool set, ref Line line);

  //void ON_LineCurve_Draw(const ON_LineCurve* pCrv, CRhinoDisplayPipeline* pDisplayPipeline, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_LineCurve_Draw(IntPtr pCrv, IntPtr pDisplayPipeline, int argb, int thickness);
  #endregion


  #region on_massprop.cpp
  //void ON_MassProperties_Delete( ON_MassProperties* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MassProperties_Delete(IntPtr ptr);

  //double ON_MassProperties_Area(ON_MassProperties* pMassProp)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_MassProperties_Area(IntPtr pMassProp);

  //void ON_MassProperties_Centroid( ON_MassProperties* pMassProp, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MassProperties_Centroid(IntPtr pMassProp, ref Point3d pt);

  //void ON_MassProperties_CentroidError( ON_MassProperties* pMassProp, ON_3dVector* v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MassProperties_CentroidError(IntPtr pMassProp, ref Vector3d v);

  //double ON_MassProperties_Mass(ON_MassProperties* pMassProp)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_MassProperties_Mass(IntPtr pMassProp);

  //double ON_MassProperties_MassError(ON_MassProperties* pMassProp)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_MassProperties_MassError(IntPtr pMassProp);

  //bool ON_MassProperties_Sum(ON_MassProperties* pMassProp, ON_MassProperties* pSummand)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MassProperties_Sum(IntPtr pMassProp, IntPtr pSummand);

  //bool ON_MassProperties_GetMoments(const ON_MassProperties* pConstMassProps, int which, ON_3dVector* moment, ON_3dVector* error )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MassProperties_GetMoments(IntPtr pConstMassProps, int which, ref Vector3d moment, ref Vector3d error);
  #endregion


  #region on_material.cpp
  //ON_Material* ON_Material_New(const ON_Material* pConstOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Material_New(IntPtr pConstOther);

  //void ON_Material_Default(ON_Material* pMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_Default(IntPtr pMaterial);

  //int ON_Material_FindBitmapTexture(const ON_Material* pConstMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_FindBitmapTexture(IntPtr pConstMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //void ON_Material_SetBitmapTexture(ON_Material* pMaterial, int index, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetBitmapTexture(IntPtr pMaterial, int index, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddBitmapTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddBitmapTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddBumpTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddBumpTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddEnvironmentTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddEnvironmentTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //int ON_Material_AddTransparencyTexture(ON_Material* pMaterial, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_AddTransparencyTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //bool ON_Material_ModifyTexture(ON_Material* pMaterial, ON_UUID texture_id, const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Material_ModifyTexture(IntPtr pMaterial, Guid texture_id, IntPtr pConstTexture);

  //double ON_Material_GetDouble(const ON_Material* pConstMaterial, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Material_GetDouble(IntPtr pConstMaterial, int which);

  //void ON_Material_SetDouble(ON_Material* pMaterial, int which, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetDouble(IntPtr pMaterial, int which, double val);

  //bool ON_Material_AddTexture(ON_Material* pMaterial, const RHMONO_STRING* filename, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Material_AddTexture(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string filename, int which);

  //bool ON_Material_SetTexture(ON_Material* pMaterial, const ON_Texture* pConstTexture, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Material_SetTexture(IntPtr pMaterial, IntPtr pConstTexture, int which);

  //int ON_Material_GetTexture(const ON_Material* pConstMaterial, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_GetTexture(IntPtr pConstMaterial, int which);

  //int ON_Material_GetColor( const ON_Material* pConstMaterial, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_GetColor(IntPtr pConstMaterial, int which);

  //void ON_Material_SetColor( ON_Material* pMaterial, int which, int argb )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetColor(IntPtr pMaterial, int which, int argb);

  //void ON_Material_GetName(const ON_Material* pConstMaterial, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_GetName(IntPtr pConstMaterial, IntPtr pString);

  //void ON_Material_SetName(ON_Material* pMaterial, const RHMONO_STRING* name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Material_SetName(IntPtr pMaterial, [MarshalAs(UnmanagedType.LPWStr)]string name);

  //ON_Texture* ON_Texture_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Texture_New();

  //const ON_Texture* ON_Material_GetTexturePointer(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Material_GetTexturePointer(IntPtr pConstMaterial, int index);

  //int ON_Material_NextBitmapTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextBitmapTexture(IntPtr pConstMaterial, int index);

  //int ON_Material_NextBumpTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextBumpTexture(IntPtr pConstMaterial, int index);

  //int ON_Material_NextEnvironmentTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextEnvironmentTexture(IntPtr pConstMaterial, int index);

  //int ON_Material_NextTransparencyTexture(const ON_Material* pConstMaterial, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Material_NextTransparencyTexture(IntPtr pConstMaterial, int index);

  //void ON_Texture_GetFileName(const ON_Texture* pConstTexture, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_GetFileName(IntPtr pConstTexture, IntPtr pString);

  //void ON_Texture_SetFileName(ON_Texture* pTexture, const RHMONO_STRING* filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Texture_SetFileName(IntPtr pTexture, [MarshalAs(UnmanagedType.LPWStr)]string filename);

  //ON_UUID ON_Texture_GetId(const ON_Texture* pConstTexture)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid ON_Texture_GetId(IntPtr pConstTexture);
  #endregion


  #region on_mesh.cpp
  //ON_Mesh* ON_Mesh_New(const ON_Mesh* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_New(IntPtr pOther);

  //ON_Mesh* ON_Mesh_FromPlanarCurve(const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_FromPlanarCurve(IntPtr pCurve);

  //bool ON_Mesh_SetVertex(ON_Mesh* pMesh, int vertexIndex, float x, float y, float z)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetVertex(IntPtr pMesh, int vertexIndex, float x, float y, float z);

  //bool ON_Mesh_SetFace(ON_Mesh* pMesh, int faceIndex, int vertex1, int vertex2, int vertex3, int vertex4)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetFace(IntPtr pMesh, int faceIndex, int vertex1, int vertex2, int vertex3, int vertex4);

  //bool ON_Mesh_SetTextureCoordinate(ON_Mesh* pMesh, int index, float s, float t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetTextureCoordinate(IntPtr pMesh, int index, float s, float t);

  //int ON_Mesh_AddFace(ON_Mesh* pMesh, int vertex1, int vertex2, int vertex3, int vertex4)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_AddFace(IntPtr pMesh, int vertex1, int vertex2, int vertex3, int vertex4);

  //bool ON_Mesh_SetNormal(ON_Mesh* pMesh, int index, ON_3FVECTOR_STRUCT vector, bool faceNormal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetNormal(IntPtr pMesh, int index, Vector3f vector, [MarshalAs(UnmanagedType.U1)]bool faceNormal);

  //bool ON_Mesh_SetColor(ON_Mesh* pMesh, int index, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetColor(IntPtr pMesh, int index, int argb);

  //bool ON_Mesh_SetNormals(ON_Mesh* ptr, int count, /*ARRAY*/const ON_3fVector* normals, bool append)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetNormals(IntPtr ptr, int count, Vector3f[] normals, [MarshalAs(UnmanagedType.U1)]bool append);

  //bool ON_Mesh_SetTextureCoordinates(ON_Mesh* ptr, int count, /*ARRAY*/const ON_2fPoint* tcs, bool append)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetTextureCoordinates(IntPtr ptr, int count, ref Point2f tcs, [MarshalAs(UnmanagedType.U1)]bool append);

  //bool ON_Mesh_SetVertexColors(ON_Mesh* pMesh, int count, /*ARRAY*/const int* argb, bool append)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_SetVertexColors(IntPtr pMesh, int count, int[] argb, [MarshalAs(UnmanagedType.U1)]bool append);

  //void ON_Mesh_SetInt( ON_Mesh* pMesh, int which, int value )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_SetInt(IntPtr pMesh, int which, int value);

  //int ON_Mesh_GetInt( const ON_Mesh* pConstMesh, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetInt(IntPtr pConstMesh, int which);

  //bool ON_Mesh_GetBool( const ON_Mesh* pMesh, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetBool(IntPtr pMesh, int which);

  //void ON_Mesh_Flip(ON_Mesh* ptr, bool vertNorm, bool faceNorm, bool faceOrientation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_Flip(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool vertNorm, [MarshalAs(UnmanagedType.U1)]bool faceNorm, [MarshalAs(UnmanagedType.U1)]bool faceOrientation);

  //bool ON_Mesh_NonConstBoolOp(ON_Mesh* ptr, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_NonConstBoolOp(IntPtr ptr, int which);

  //bool ON_Mesh_ConvertTrianglesToQuads(ON_Mesh* ptr, double angle_tol, double min_diag_ratio)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_ConvertTrianglesToQuads(IntPtr ptr, double angle_tol, double min_diag_ratio);

  //int ON_Mesh_CullOp(ON_Mesh* ptr, bool faces)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_CullOp(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool faces);

  //bool ON_Mesh_Reverse(ON_Mesh* ptr, bool texturecoords, int direction)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_Reverse(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool texturecoords, int direction);

  //bool ON_Mesh_CombineIdenticalVertices(ON_Mesh* ptr, bool ignore_normals, bool ignore_tcs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_CombineIdenticalVertices(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool ignore_normals, [MarshalAs(UnmanagedType.U1)]bool ignore_tcs);

  //void ON_Mesh_Append(ON_Mesh* ptr, const ON_Mesh* other)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_Append(IntPtr ptr, IntPtr other);

  //bool ON_Mesh_IsManifold(const ON_Mesh* ptr, bool topotest, bool* isOriented, bool* hasBoundary)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_IsManifold(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool topotest, [MarshalAs(UnmanagedType.U1)]ref bool isOriented, [MarshalAs(UnmanagedType.U1)]ref bool hasBoundary);

  //int ON_Mesh_GetClosestPoint(const ON_Mesh* ptr, ON_3DPOINT_STRUCT p, ON_3dPoint* q, double max_dist)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetClosestPoint(IntPtr ptr, Point3d p, ref Point3d q, double max_dist);

  //int ON_Mesh_GetClosestPoint2(const ON_Mesh* pMesh, ON_3DPOINT_STRUCT testPoint, ON_3dPoint* closestPt, ON_3dVector* closestNormal, double max_dist)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetClosestPoint2(IntPtr pMesh, Point3d testPoint, ref Point3d closestPt, ref Vector3d closestNormal, double max_dist);

  //int ON_Mesh_IntersectMesh(const ON_Mesh* ptr, const ON_Mesh* meshB, ON_SimpleArray<ON_Line>* lineArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_IntersectMesh(IntPtr ptr, IntPtr meshB, IntPtr lineArray);

  //ON_MassProperties* ON_Mesh_MassProperties(bool bArea, const ON_Mesh* pMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_MassProperties([MarshalAs(UnmanagedType.U1)]bool bArea, IntPtr pMesh);

  //int ON_Mesh_DeleteFace(ON_Mesh* pMesh, int count, /*ARRAY*/const int* indices)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_DeleteFace(IntPtr pMesh, int count, int[] indices);

  //bool ON_Mesh_Vertex(const ON_Mesh* ptr, int index, ON_3fPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_Vertex(IntPtr ptr, int index, ref Point3f pt);

  //bool ON_Mesh_GetNormal(const ON_Mesh* pConstMesh, int index, ON_3fVector* vector, bool faceNormal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetNormal(IntPtr pConstMesh, int index, ref Vector3f vector, [MarshalAs(UnmanagedType.U1)]bool faceNormal);

  //bool ON_Mesh_GetColor(const ON_Mesh* pConstMesh, int index, int* argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetColor(IntPtr pConstMesh, int index, ref int argb);

  //bool ON_Mesh_GetFace(const ON_Mesh* pConstMesh, int face_index, ON_MeshFace* face)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetFace(IntPtr pConstMesh, int face_index, ref MeshFace face);

  //bool ON_Mesh_GetFaceVertices(const ON_Mesh* pConstMesh,
  //                                           int face_index,
  //                                           ON_3fPoint* p0,
  //                                           ON_3fPoint* p1,
  //                                           ON_3fPoint* p2,
  //                                           ON_3fPoint* p3)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetFaceVertices(IntPtr pConstMesh, int face_index, ref Point3f p0, ref Point3f p1, ref Point3f p2, ref Point3f p3);

  //bool ON_Mesh_GetTextureCoordinate(const ON_Mesh* pConstMesh, int index, float* s, float* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetTextureCoordinate(IntPtr pConstMesh, int index, ref float s, ref float t);

  //ON_Mesh* ON_Mesh_CreateMeshPlane(const ON_PLANE_STRUCT* plane, ON_INTERVAL_STRUCT x_int, ON_INTERVAL_STRUCT y_int, int x_cnt, int y_cnt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_CreateMeshPlane(ref Plane plane, Interval x_int, Interval y_int, int x_cnt, int y_cnt);

  //ON_Mesh* ON_Mesh_CreateMeshSphere(const ON_PLANE_STRUCT* plane, double radius, int x_cnt, int y_cnt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_CreateMeshSphere(ref Plane plane, double radius, int x_cnt, int y_cnt);

  //bool ON_Mesh_NakedEdgePoints( const ON_Mesh* pMesh, /*ARRAY*/int* naked_status, int count )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_NakedEdgePoints(IntPtr pMesh, [In,Out] int[] naked_status, int count);

  //ON_Mesh* RHC_RhinoOffsetMesh(const ON_Mesh* pConstInputMesh, double distance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoOffsetMesh(IntPtr pConstInputMesh, double distance);

  //int RHC_RhinoSplitDisjointMesh(const ON_Mesh* pConstMesh, ON_SimpleArray<ON_Mesh*>* pMeshArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoSplitDisjointMesh(IntPtr pConstMesh, IntPtr pMeshArray);

  //int RHC_RhinoMeshBooleanSplit(const ON_Mesh* pConstMesh, ON_SimpleArray<ON_Mesh*>* pMeshArray, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoMeshBooleanSplit(IntPtr pConstMesh, IntPtr pMeshArray, ref Plane plane);

  //int RHC_RhinoExplodeMesh(const ON_Mesh* pConstMesh, ON_SimpleArray<ON_Mesh*>* pMeshArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoExplodeMesh(IntPtr pConstMesh, IntPtr pMeshArray);

  //void ON_Mesh_ClearList( ON_Mesh* pMesh, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_ClearList(IntPtr pMesh, int which);

  //bool ON_Mesh_GetHiddenValue(const ON_Mesh* pConstMesh, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetHiddenValue(IntPtr pConstMesh, int index);

  //void ON_Mesh_HiddenVertexOp( ON_Mesh* pMesh, int index, int op)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_HiddenVertexOp(IntPtr pMesh, int index, int op);

  //void ON_Mesh_RepairHiddenArray( ON_Mesh* pMesh )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_RepairHiddenArray(IntPtr pMesh);

  //int ON_Mesh_GetVertexFaces( const ON_Mesh* pMesh, ON_SimpleArray<int>* face_indices, int vertex_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetVertexFaces(IntPtr pMesh, IntPtr face_indices, int vertex_index);

  //int ON_Mesh_GetTopologicalVertices( const ON_Mesh* pMesh, ON_SimpleArray<int>* vertex_indices, int vertex_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetTopologicalVertices(IntPtr pMesh, IntPtr vertex_indices, int vertex_index);

  //int ON_Mesh_GetConnectedVertices( const ON_Mesh* pMesh, ON_SimpleArray<int>* vertex_indices, int vertex_index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Mesh_GetConnectedVertices(IntPtr pMesh, IntPtr vertex_indices, int vertex_index);

  //bool RHC_RhinoMeshBooleanUnion( const ON_SimpleArray<const ON_Mesh*>* pConstInputMeshes,
  //                                              double intersect_tol,
  //                                              double overlap_tol,
  //                                              ON_SimpleArray<ON_Mesh*>* output )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoMeshBooleanUnion(IntPtr pConstInputMeshes, double intersect_tol, double overlap_tol, IntPtr output);

  //bool RHC_RhinoMeshBooleanIntDiff( const ON_SimpleArray<const ON_Mesh*>* pConstInputSet1,
  //                                                const ON_SimpleArray<const ON_Mesh*>* pConstInputSet2,
  //                                                double intersect_tol,
  //                                                double overlap_tol,
  //                                                ON_SimpleArray<ON_Mesh*>* output,
  //                                                int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoMeshBooleanIntDiff(IntPtr pConstInputSet1, IntPtr pConstInputSet2, double intersect_tol, double overlap_tol, IntPtr output, int which);

  //ON_SimpleArray<ON_PolylineCurve*>* TL_GetMeshOutline(const ON_Mesh* pConstMesh, const ON_PLANE_STRUCT* plane, int* polylines_created)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr TL_GetMeshOutline(IntPtr pConstMesh, ref Plane plane, ref int polylines_created);

  //ON_SimpleArray<ON_PolylineCurve*>* TL_GetMeshOutline2(const ON_Mesh* pConstMesh, const CRhinoViewport* pConstRhinoViewport, int* polylines_created)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr TL_GetMeshOutline2(IntPtr pConstMesh, IntPtr pConstRhinoViewport, ref int polylines_created);

  //ON_SimpleArray<ON_PolylineCurve*>* ON_Mesh_GetNakedEdges(const ON_Mesh* pConstMesh, int* polylines_created)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Mesh_GetNakedEdges(IntPtr pConstMesh, ref int polylines_created);

  //int ON_SimpleArray_PolylineCurve_GetCount(ON_SimpleArray<ON_PolylineCurve*>* pPolylineCurves, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_SimpleArray_PolylineCurve_GetCount(IntPtr pPolylineCurves, int i);

  //void ON_SimpleArray_PolylineCurve_GetPoints(ON_SimpleArray<ON_PolylineCurve*>* pPolylineCurves, int i, int point_count, /*ARRAY*/ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_SimpleArray_PolylineCurve_GetPoints(IntPtr pPolylineCurves, int i, int point_count, [In,Out] Point3d[] points);

  //void ON_SimpleArray_PolylineCurve_Delete(ON_SimpleArray<ON_PolylineCurve*>* pPolylineCurves, bool delete_individual_curves)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_SimpleArray_PolylineCurve_Delete(IntPtr pPolylineCurves, [MarshalAs(UnmanagedType.U1)]bool delete_individual_curves);

  //void ON_MeshParameters_Delete(ON_MeshParameters* pMeshParameters)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_MeshParameters_Delete(IntPtr pMeshParameters);

  //bool ON_MeshParameters_Copy(const ON_MeshParameters* pConstMP, /*ARRAY*/bool* bvals, /*ARRAY*/int* ivals, /*ARRAY*/double* dvals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_MeshParameters_Copy(IntPtr pConstMP, [MarshalAs(UnmanagedType.U1), In, Out] bool[] bvals, [In,Out] int[] ivals, [In,Out] double[] dvals);

  //void ON_Mesh_TopologyVertex(const ON_Mesh* pConstMesh, int index, ON_3fPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_TopologyVertex(IntPtr pConstMesh, int index, ref Point3f point);

  //void ON_Mesh_SetTopologyVertex(ON_Mesh* pMesh, int index, ON_3FPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Mesh_SetTopologyVertex(IntPtr pMesh, int index, Point3f point);

  //bool ON_Mesh_GetFaceCenter(const ON_Mesh* pConstMesh, int faceIndex, ON_3dPoint* center)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Mesh_GetFaceCenter(IntPtr pConstMesh, int faceIndex, ref Point3d center);
  #endregion


  #region on_nurbscurve.cpp
  //ON_NurbsCurve* ON_NurbsCurve_New( ON_NurbsCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsCurve_New(IntPtr pOther);

  //bool ON_NurbsCurve_IsDuplicate(ON_NurbsCurve* crv1, ON_NurbsCurve* crv2, bool ignore, double tol )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_IsDuplicate(IntPtr crv1, IntPtr crv2, [MarshalAs(UnmanagedType.U1)]bool ignore, double tol);

  //bool ON_NurbsCurve_Create(ON_NurbsCurve* crv, int dim, bool rat, int order, int cv_count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_Create(IntPtr crv, int dim, [MarshalAs(UnmanagedType.U1)]bool rat, int order, int cv_count);

  //bool ON_NurbsCurve_CreateClampedUniformNurbs(ON_NurbsCurve* crv, int dim, int order, int count, /*ARRAY*/const ON_3dPoint* pts, double knot_delta)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_CreateClampedUniformNurbs(IntPtr crv, int dim, int order, int count, Point3d[] pts, double knot_delta);

  //bool ON_NurbsCurve_CreatePeriodicUniformNurbs(ON_NurbsCurve* crv, int dim, int order, int count, /*ARRAY*/const ON_3dPoint* pts, double knot_delta)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_CreatePeriodicUniformNurbs(IntPtr crv, int dim, int order, int count, Point3d[] pts, double knot_delta);

  //ON_NurbsCurve* ON_NurbsCurve_CreateControlPointCurve(int count, /*ARRAY*/const ON_3dPoint* points, int degree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsCurve_CreateControlPointCurve(int count, Point3d[] points, int degree);

  //bool ON_NurbsCurve_GetBool(ON_NurbsCurve* pCurve, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_GetBool(IntPtr pCurve, int which);

  //int ON_NurbsCurve_GetInt( const ON_NurbsCurve* pCurve, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsCurve_GetInt(IntPtr pCurve, int which);

  //bool ON_NurbsCurve_SetCV2(ON_NurbsCurve* pCurve, int cvIndex, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_SetCV2(IntPtr pCurve, int cvIndex, ref Point4d point);

  //bool ON_NurbsCurve_GetCV2(const ON_NurbsCurve* pCurve, int cvIndex, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_GetCV2(IntPtr pCurve, int cvIndex, ref Point4d point);

  //bool ON_NurbsCurve_SetKnot(ON_NurbsCurve* pCurve, int knotIndex, double knotValue)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_SetKnot(IntPtr pCurve, int knotIndex, double knotValue);

  //double ON_NurbsCurve_Knot(const ON_NurbsCurve* crv, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsCurve_Knot(IntPtr crv, int knotIndex);

  //int ON_NurbsCurve_KnotMultiplicity(const ON_NurbsCurve* crv, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsCurve_KnotMultiplicity(IntPtr crv, int knotIndex);

  //bool ON_NurbsCurve_MakeUniformKnotVector(ON_NurbsCurve* pCurve, double delta, bool clamped)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_MakeUniformKnotVector(IntPtr pCurve, double delta, [MarshalAs(UnmanagedType.U1)]bool clamped);

  //double ON_NurbsCurve_GrevilleAbcissa(const ON_NurbsCurve* pCurve, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsCurve_GrevilleAbcissa(IntPtr pCurve, int index);

  //bool ON_NurbsCurve_GetGrevilleAbcissae(const ON_NurbsCurve* pCurve, int count, /*ARRAY*/double* ga)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_GetGrevilleAbcissae(IntPtr pCurve, int count, [In,Out] double[] ga);

  //bool ON_NurbsCurve_InsertKnot(ON_NurbsCurve* pCurve, double knotValue, int knotMultiplicity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_InsertKnot(IntPtr pCurve, double knotValue, int knotMultiplicity);

  //bool ON_NurbsCurve_IncreaseDegree(ON_NurbsCurve* pCurve, int desiredDegree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_IncreaseDegree(IntPtr pCurve, int desiredDegree);

  //double ON_NurbsCurve_ControlPolygonLength(const ON_NurbsCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsCurve_ControlPolygonLength(IntPtr pCurve);

  //bool ON_NurbsCurve_MakePiecewiseBezier(ON_NurbsCurve* pCurve, bool setEndWeightsToOne)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_MakePiecewiseBezier(IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool setEndWeightsToOne);

  //bool ON_NurbsCurve_ChangeEndWeights(ON_NurbsCurve* pCurve, double w0, double w1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_ChangeEndWeights(IntPtr pCurve, double w0, double w1);

  //bool ON_NurbsCurve_Reparameterize(ON_NurbsCurve* pCurve, double c)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsCurve_Reparameterize(IntPtr pCurve, double c);

  //int ON_Ellipse_GetNurbForm(ON_Ellipse* ellipse, ON_NurbsCurve* pNurbsCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Ellipse_GetNurbForm(ref Ellipse ellipse, IntPtr pNurbsCurve);

  //int ON_Ellipse_GetNurbForm2( const ON_PLANE_STRUCT* plane, double r0, double r1, ON_NurbsCurve* pNurbsCurve )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Ellipse_GetNurbForm2(ref Plane plane, double r0, double r1, IntPtr pNurbsCurve);
  #endregion


  #region on_nurbssurface.cpp
  //ON_NurbsSurface* ON_NurbsSurface_New(int dimension, bool isRational, int order0, int order1, int cvCount0, int cvCount1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsSurface_New(int dimension, [MarshalAs(UnmanagedType.U1)]bool isRational, int order0, int order1, int cvCount0, int cvCount1);

  //bool ON_NurbsSurface_GetBool(ON_NurbsSurface* pSurface, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_GetBool(IntPtr pSurface, int which);

  //int ON_NurbsSurface_GetIntDir( const ON_NurbsSurface* pSurface, int which, int dir )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsSurface_GetIntDir(IntPtr pSurface, int which, int dir);

  //bool ON_NurbsSurface_GetGrevillePoint(const ON_NurbsSurface* pConstNurbsSurface, int u, int v, ON_2dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_GetGrevillePoint(IntPtr pConstNurbsSurface, int u, int v, ref Point2d point);

  //bool ON_NurbsSurface_GetCV(const ON_NurbsSurface* pConstNurbsSurface, int u, int v, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_GetCV(IntPtr pConstNurbsSurface, int u, int v, ref Point4d point);

  //bool ON_NurbsSurface_SetCV(ON_NurbsSurface* pNurbsSurface, int u, int v, ON_4dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_SetCV(IntPtr pNurbsSurface, int u, int v, ref Point4d point);

  //bool ON_NurbsSurface_SetKnot(ON_NurbsSurface* pSurface, int dir, int knotIndex, double knotValue)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_SetKnot(IntPtr pSurface, int dir, int knotIndex, double knotValue);

  //double ON_NurbsSurface_Knot(const ON_NurbsSurface* pSurface, int dir, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_NurbsSurface_Knot(IntPtr pSurface, int dir, int knotIndex);

  //int ON_NurbsSurface_KnotMultiplicity(const ON_NurbsSurface* pSurface, int dir, int knotIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_NurbsSurface_KnotMultiplicity(IntPtr pSurface, int dir, int knotIndex);

  //bool ON_NurbsSurface_MakeUniformKnotVector(ON_NurbsSurface* pSurface, int dir, double delta, bool clamped)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_MakeUniformKnotVector(IntPtr pSurface, int dir, double delta, [MarshalAs(UnmanagedType.U1)]bool clamped);

  //bool ON_NurbsSurface_InsertKnot(ON_NurbsSurface* pSurface, int dir, double knotValue, int knotMultiplicity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_NurbsSurface_InsertKnot(IntPtr pSurface, int dir, double knotValue, int knotMultiplicity);

  //ON_NurbsSurface* ON_NurbsSurface_CreateRuledSurface( const ON_Curve* pConstA, const ON_Curve* pConstB )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsSurface_CreateRuledSurface(IntPtr pConstA, IntPtr pConstB);

  //ON_NurbsSurface* ON_NurbsSurface_SurfaceFromPoints( /*ARRAY*/const ON_3dPoint* _array_pts, int uCount, int vCount, int uDegree, int vDegree)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsSurface_SurfaceFromPoints(Point3d[] _array_pts, int uCount, int vCount, int uDegree, int vDegree);

  //ON_NurbsSurface* ON_NurbsSurface_SurfaceThroughPoints( /*ARRAY*/const ON_3dPoint* _array_pts, int uCount, int vCount, int uDegree, int vDegree, bool uClosed, bool vClosed)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_NurbsSurface_SurfaceThroughPoints(Point3d[] _array_pts, int uCount, int vCount, int uDegree, int vDegree, [MarshalAs(UnmanagedType.U1)]bool uClosed, [MarshalAs(UnmanagedType.U1)]bool vClosed);

  //ON_NurbsSurface* RHC_RhinoRailRevolve( const ON_Curve* pConstProfileCurve, const ON_Curve* pConstRailCurve, const ON_Line* axis, bool scale)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoRailRevolve(IntPtr pConstProfileCurve, IntPtr pConstRailCurve, ref Line axis, [MarshalAs(UnmanagedType.U1)]bool scale);
  #endregion


  #region on_object.cpp
  //void RhCmn_SetInShutDown()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhCmn_SetInShutDown();

  //void ON_Object_Delete( ON_Object* pObject )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Object_Delete(IntPtr pObject);

  //ON_Object* ON_Object_Duplicate( ON_Object* pObject )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Object_Duplicate(IntPtr pObject);

  //unsigned int ON_Object_ObjectType( ON_Object* pObject )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint ON_Object_ObjectType(IntPtr pObject);

  //bool ON_Object_IsValid(const ON_Object* pObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Object_IsValid(IntPtr pObject);

  //unsigned int ON_Object_SizeOf(const ON_Object* pObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint ON_Object_SizeOf(IntPtr pObject);

  //bool ON_Object_SetUserString(const ON_Object* pObject, const RHMONO_STRING* _key, const RHMONO_STRING* _value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Object_SetUserString(IntPtr pObject, [MarshalAs(UnmanagedType.LPWStr)]string _key, [MarshalAs(UnmanagedType.LPWStr)]string _value);

  //const RHMONO_STRING* ON_Object_GetUserString(const ON_Object* pObject, const RHMONO_STRING* _key)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Object_GetUserString(IntPtr pObject, [MarshalAs(UnmanagedType.LPWStr)]string _key);

  //int ON_Object_UserStringCount(const ON_Object* pObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Object_UserStringCount(IntPtr pObject);

  //ON_ClassArray<ON_UserString>* ON_Object_GetUserStrings(const ON_Object* pObject, int* count)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Object_GetUserStrings(IntPtr pObject, ref int count);

  //const RHMONO_STRING* ON_UserStringList_KeyValue(const ON_ClassArray<ON_UserString>* pList, int i, bool key)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_UserStringList_KeyValue(IntPtr pList, int i, [MarshalAs(UnmanagedType.U1)]bool key);

  //void ON_UserStringList_Delete(ON_ClassArray<ON_UserString>* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_UserStringList_Delete(IntPtr pList);
  #endregion


  #region on_plane.cpp
  //bool ON_Plane_CreateFromNormal(ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT origin, ON_3DVECTOR_STRUCT normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromNormal(ref Plane p, Point3d origin, Vector3d normal);

  //bool ON_Plane_CreateFromFrame(ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT origin, ON_3DVECTOR_STRUCT x, ON_3DVECTOR_STRUCT y)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromFrame(ref Plane p, Point3d origin, Vector3d x, Vector3d y);

  //bool ON_Plane_CreateFromPoints(ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT origin, ON_3DPOINT_STRUCT x, ON_3DPOINT_STRUCT y)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromPoints(ref Plane p, Point3d origin, Point3d x, Point3d y);

  //bool ON_Plane_CreateFromEquation(ON_PLANE_STRUCT* p, double a, double b, double c, double d)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_CreateFromEquation(ref Plane p, double a, double b, double c, double d);

  //bool ON_Plane_IsValid(const ON_PLANE_STRUCT* p)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_IsValid(ref Plane p);

  //bool ON_Plane_Transform( ON_PLANE_STRUCT* p, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Plane_Transform(ref Plane p, ref Transform xf);

  //double ON_Plane_DistanceTo( ON_PLANE_STRUCT* p, ON_3DPOINT_STRUCT pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Plane_DistanceTo(ref Plane p, Point3d pt);

  //void ON_Plane_GetEquation( ON_PLANE_STRUCT* plane, /*ARRAY*/double* eq )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Plane_GetEquation(ref Plane plane, [In,Out] double[] eq);
  #endregion


  #region on_planesurface.cpp
  //ON_PlaneSurface* ON_PlaneSurface_New(const ON_PLANE_STRUCT* plane, ON_INTERVAL_STRUCT xExtents, ON_INTERVAL_STRUCT yExtents)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PlaneSurface_New(ref Plane plane, Interval xExtents, Interval yExtents);
  #endregion


  #region on_point.cpp
  //void ON_Interval_Intersection( ON_Interval* ptr, ON_INTERVAL_STRUCT a, ON_INTERVAL_STRUCT b )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Interval_Intersection(ref Interval ptr, Interval a, Interval b);

  //void ON_Interval_Union( ON_Interval* ptr, ON_INTERVAL_STRUCT a, ON_INTERVAL_STRUCT b )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Interval_Union(ref Interval ptr, Interval a, Interval b);

  //double ON_2dVector_Length(ON_2DVECTOR_STRUCT v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_2dVector_Length(Vector2d v);

  //bool ON_3dVector_Unitize( ON_3dVector* v )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dVector_Unitize(ref Vector3d v);

  //int ON_3dVector_IsParallelTo( ON_3DVECTOR_STRUCT v0, ON_3DVECTOR_STRUCT v1, double angleTol)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_3dVector_IsParallelTo(Vector3d v0, Vector3d v1, double angleTol);

  //bool ON_3dVector_IsTiny( ON_3DVECTOR_STRUCT v, double tinyTolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dVector_IsTiny(Vector3d v, double tinyTolerance);

  //void ON_3dVector_Rotate( ON_3dVector* v, double angle, ON_3DVECTOR_STRUCT axis )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_3dVector_Rotate(ref Vector3d v, double angle, Vector3d axis);

  //bool ON_3dVector_PerpendicularTo( ON_3dVector* v, ON_3DVECTOR_STRUCT other )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_3dVector_PerpendicularTo(ref Vector3d v, Vector3d other);

  //int ONC_ComparePoint(int dim, bool is_rat, ON_3DPOINT_STRUCT a, ON_3DPOINT_STRUCT b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ONC_ComparePoint(int dim, [MarshalAs(UnmanagedType.U1)]bool is_rat, Point3d a, Point3d b);

  //bool ON_Line_ClosestPointTo( ON_3DPOINT_STRUCT testPoint, ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to, double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Line_ClosestPointTo(Point3d testPoint, Point3d from, Point3d to, ref double t);

  //bool ON_4dPoint_Equality( ON_4DPOINT_STRUCT a, ON_4DPOINT_STRUCT b )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_4dPoint_Equality(Point4d a, Point4d b);

  //bool ON_4dPoint_Normalize( ON_4dPoint* a )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_4dPoint_Normalize(ref Point4d a);

  //bool TLC_SortPointList( /*ARRAY*/ON_3dPoint* points, int* count, double mindist )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool TLC_SortPointList([In,Out] Point3d[] points, ref int count, double mindist);
  #endregion


  #region on_pointcloud.cpp
  //ON_PointCloud* ON_PointCloud_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PointCloud_New();

  //ON_PointCloud* ON_PointCloud_New1(int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PointCloud_New1(int count, Point3d[] points);

  //void ON_PointCloud_FixPointCloud( ON_PointCloud* pPointCloud, bool ensureNormals, bool ensureColors, bool ensureHidden )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_FixPointCloud(IntPtr pPointCloud, [MarshalAs(UnmanagedType.U1)]bool ensureNormals, [MarshalAs(UnmanagedType.U1)]bool ensureColors, [MarshalAs(UnmanagedType.U1)]bool ensureHidden);

  //void ON_PointCloud_MergeCloud( ON_PointCloud* pPointCloud, const ON_PointCloud* pConstOtherPointCloud )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_MergeCloud(IntPtr pPointCloud, IntPtr pConstOtherPointCloud);

  //int ON_PointCloud_GetInt(const ON_PointCloud* pConstPointCloud, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PointCloud_GetInt(IntPtr pConstPointCloud, int which);

  //bool ON_PointCloud_GetBool(const ON_PointCloud* pConstPointCloud, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetBool(IntPtr pConstPointCloud, int which);

  //void ON_PointCloud_DestroyArray( ON_PointCloud* pPointCloud, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_DestroyArray(IntPtr pPointCloud, int which);

  //bool ON_PointCloud_GetPoint(const ON_PointCloud* pConstPointCloud, int index, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetPoint(IntPtr pConstPointCloud, int index, ref Point3d pt);

  //bool ON_PointCloud_SetPoint( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetPoint(IntPtr pPointCloud, int index, Point3d point);

  //bool ON_PointCloud_GetNormal(const ON_PointCloud* pConstPointCloud, int index, ON_3dVector* nr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetNormal(IntPtr pConstPointCloud, int index, ref Vector3d nr);

  //bool ON_PointCloud_SetNormal( ON_PointCloud* pPointCloud, int index, ON_3DVECTOR_STRUCT normal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetNormal(IntPtr pPointCloud, int index, Vector3d normal);

  //bool ON_PointCloud_GetColor(const ON_PointCloud* pConstPointCloud, int index, int* argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetColor(IntPtr pConstPointCloud, int index, ref int argb);

  //bool ON_PointCloud_SetColor( ON_PointCloud* pPointCloud, int index, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetColor(IntPtr pPointCloud, int index, int argb);

  //bool ON_PointCloud_GetHiddenFlag(const ON_PointCloud* pConstPointCloud, int index, bool* hidden)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_GetHiddenFlag(IntPtr pConstPointCloud, int index, [MarshalAs(UnmanagedType.U1)]ref bool hidden);

  //bool ON_PointCloud_SetHiddenFlag( ON_PointCloud* pPointCloud, int index, bool hidden)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_SetHiddenFlag(IntPtr pPointCloud, int index, [MarshalAs(UnmanagedType.U1)]bool hidden);

  //bool ON_PointCloud_RemovePoint( ON_PointCloud* pPointCloud, int index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_RemovePoint(IntPtr pPointCloud, int index);

  //bool ON_PointCloud_AppendPoint1( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint1(IntPtr pPointCloud, Point3d point);

  //bool ON_PointCloud_AppendPoint2( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point, int argb )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint2(IntPtr pPointCloud, Point3d point, int argb);

  //bool ON_PointCloud_AppendPoint3( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint3(IntPtr pPointCloud, Point3d point, Vector3d normal);

  //bool ON_PointCloud_AppendPoint4( ON_PointCloud* pPointCloud, ON_3DPOINT_STRUCT point, int argb, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_AppendPoint4(IntPtr pPointCloud, Point3d point, int argb, Vector3d normal);

  //bool ON_PointCloud_InsertPoint1( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint1(IntPtr pPointCloud, int index, Point3d point);

  //bool ON_PointCloud_InsertPoint2( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point, int argb )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint2(IntPtr pPointCloud, int index, Point3d point, int argb);

  //bool ON_PointCloud_InsertPoint3( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint3(IntPtr pPointCloud, int index, Point3d point, Vector3d normal);

  //bool ON_PointCloud_InsertPoint4( ON_PointCloud* pPointCloud, int index, ON_3DPOINT_STRUCT point, int argb, ON_3DVECTOR_STRUCT normal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PointCloud_InsertPoint4(IntPtr pPointCloud, int index, Point3d point, int argb, Vector3d normal);

  //void ON_PointCloud_AppendPoints( ON_PointCloud* pPointCloud, int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_AppendPoints(IntPtr pPointCloud, int count, Point3d[] points);

  //void ON_PointCloud_InsertPoints( ON_PointCloud* pPointCloud, int index, int count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_InsertPoints(IntPtr pPointCloud, int index, int count, Point3d[] points);

  //void ON_PointCloud_GetPoints(const ON_PointCloud* pConstPointCloud, int count, /*ARRAY*/ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_GetPoints(IntPtr pConstPointCloud, int count, [In,Out] Point3d[] points);

  //void ON_PointCloud_GetNormals(const ON_PointCloud* pConstPointCloud, int count, /*ARRAY*/ON_3dVector* normals)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_GetNormals(IntPtr pConstPointCloud, int count, [In,Out] Vector3d[] normals);

  //void ON_PointCloud_GetColors(const ON_PointCloud* pConstPointCloud, int count, /*ARRAY*/int* colors)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PointCloud_GetColors(IntPtr pConstPointCloud, int count, [In,Out] int[] colors);
  #endregion


  #region on_pointgeometry.cpp
  //ON_Point* ON_Point_New(ON_3DPOINT_STRUCT loc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Point_New(Point3d loc);

  //void ON_Point_GetSetPoint(ON_Point* ptr, bool set, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Point_GetSetPoint(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, ref Point3d pt);
  #endregion


  #region on_pointgrid.cpp
  //ON_PointGrid* ON_PointGrid_New(int rows, int columns)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PointGrid_New(int rows, int columns);
  #endregion


  #region on_polycurve.cpp
  //ON_PolyCurve* ON_PolyCurve_New( ON_PolyCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolyCurve_New(IntPtr pOther);

  //int ON_PolyCurve_Count( const ON_PolyCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_Count(IntPtr pCurve);

  //ON_Curve* ON_PolyCurve_SegmentCurve( const ON_PolyCurve* pCurve, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolyCurve_SegmentCurve(IntPtr pCurve, int index);

  //double ON_PolyCurve_SegmentCurveParameter( const ON_PolyCurve* pCurve, double polycurveParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_PolyCurve_SegmentCurveParameter(IntPtr pCurve, double polycurveParameter);

  //double ON_PolyCurve_PolyCurveParameter( const ON_PolyCurve* pCurve, int segmentIndex, double segmentCurveParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_PolyCurve_PolyCurveParameter(IntPtr pCurve, int segmentIndex, double segmentCurveParameter);

  //void ON_PolyCurve_SegmentDomain( const ON_PolyCurve* pCurve, int segmentIndex, ON_Interval* domain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PolyCurve_SegmentDomain(IntPtr pCurve, int segmentIndex, ref Interval domain);

  //int ON_PolyCurve_SegmentIndex( const ON_PolyCurve* pCurve, double polycurveParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_SegmentIndex(IntPtr pCurve, double polycurveParameter);

  //int ON_PolyCurve_SegmentIndexes( const ON_PolyCurve* pCurve, ON_INTERVAL_STRUCT subDomain, int* index0, int* index1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_SegmentIndexes(IntPtr pCurve, Interval subDomain, ref int index0, ref int index1);

  //int ON_PolyCurve_HasGap( const ON_PolyCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolyCurve_HasGap(IntPtr pCurve);

  //bool ON_PolyCurve_GetBool( ON_PolyCurve* pCurve, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PolyCurve_GetBool(IntPtr pCurve, int which);

  //void ON_PolyCurve_SegmentCurves( const ON_PolyCurve* pCurve, ON_SimpleArray<ON_Curve*>* pCurveArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PolyCurve_SegmentCurves(IntPtr pCurve, IntPtr pCurveArray);

  //bool ON_PolyCurve_AppendAndMatch( ON_PolyCurve* pCurve, ON_Arc* arc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PolyCurve_AppendAndMatch(IntPtr pCurve, ref Arc arc);

  //bool ON_PolyCurve_AppendAndMatch2( ON_PolyCurve* pPolyCurve, const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_PolyCurve_AppendAndMatch2(IntPtr pPolyCurve, IntPtr pCurve);
  #endregion


  #region on_polylinecurve.cpp
  //ON_PolylineCurve* ON_PolylineCurve_New( ON_PolylineCurve* pOther )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolylineCurve_New(IntPtr pOther);

  //ON_PolylineCurve* ON_PolylineCurve_New2(int point_count, /*ARRAY*/const ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_PolylineCurve_New2(int point_count, Point3d[] points);

  //int ON_PolylineCurve_PointCount(const ON_PolylineCurve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_PolylineCurve_PointCount(IntPtr pCurve);

  //void ON_PolylineCurve_GetSetPoint(ON_PolylineCurve* pCurve, int index, ON_3dPoint* point, bool set)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PolylineCurve_GetSetPoint(IntPtr pCurve, int index, ref Point3d point, [MarshalAs(UnmanagedType.U1)]bool set);

  //void ON_PolylineCurve_Draw(const ON_PolylineCurve* pCrv, CRhinoDisplayPipeline* pDisplayPipeline, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_PolylineCurve_Draw(IntPtr pCrv, IntPtr pDisplayPipeline, int argb, int thickness);
  #endregion


  #region on_quaternion.cpp
  //double ON_Quaternion_Length( const ON_Quaternion* q)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Quaternion_Length(ref Quaternion q);

  //bool ON_Quaternion_Unitize( ON_Quaternion* q)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Quaternion_Unitize(ref Quaternion q);

  //void ON_Quaternion_SetRotation( ON_Quaternion* q, const ON_PLANE_STRUCT* plane0, const ON_PLANE_STRUCT* plane1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Quaternion_SetRotation(ref Quaternion q, ref Plane plane0, ref Plane plane1);

  //bool ON_Quaternion_GetRotation( const ON_Quaternion* q, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Quaternion_GetRotation(ref Quaternion q, ref Plane plane);

  //void ON_Quaternion_Rotate( const ON_Quaternion* q, ON_3DVECTOR_STRUCT vin, ON_3dVector* vout)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Quaternion_Rotate(ref Quaternion q, Vector3d vin, ref Vector3d vout);
  #endregion


  #region on_sphere.cpp
  //ON_NurbsSurface* ON_Sphere_GetNurbsForm(ON_Sphere* sphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Sphere_GetNurbsForm(ref Sphere sphere);

  //ON_RevSurface* ON_Sphere_RevSurfaceForm(ON_Sphere* sphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Sphere_RevSurfaceForm(ref Sphere sphere);

  //ON_NurbsSurface* ON_Cone_GetNurbForm(ON_Cone* cone)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cone_GetNurbForm(ref Cone cone);

  //ON_RevSurface* ON_Cone_RevSurfaceForm(ON_Cone* cone)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cone_RevSurfaceForm(ref Cone cone);

  //ON_NurbsSurface* ON_Cylinder_GetNurbForm(ON_Cylinder* cylinder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cylinder_GetNurbForm(ref Cylinder cylinder);

  //ON_RevSurface* ON_Cylinder_RevSurfaceForm(ON_Cylinder* cylinder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Cylinder_RevSurfaceForm(ref Cylinder cylinder);

  //ON_NurbsSurface* ON_Torus_GetNurbForm(ON_Torus* torus)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Torus_GetNurbForm(ref Torus torus);

  //ON_RevSurface* ON_Torus_RevSurfaceForm(ON_Torus* torus)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Torus_RevSurfaceForm(ref Torus torus);
  #endregion


  #region on_surface.cpp
  //ON_Surface* ON_Surface_DuplicateSurface(ON_Surface* pSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_DuplicateSurface(IntPtr pSurface);

  //ON_Brep* ON_Surface_BrepForm(const ON_Surface* pConstSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_BrepForm(IntPtr pConstSurface);

  //void ON_Surface_Domain( const ON_Surface* pConstSurface, int dir, ON_Interval* pDomain )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Surface_Domain(IntPtr pConstSurface, int dir, ref Interval pDomain);

  //bool ON_Surface_SetDomain(ON_Surface* pSurface, int direction, ON_INTERVAL_STRUCT domain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_SetDomain(IntPtr pSurface, int direction, Interval domain);

  //bool ON_Surface_GetSurfaceSize( const ON_Surface* pConstSurface, double* width, double* height)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetSurfaceSize(IntPtr pConstSurface, ref double width, ref double height);

  //int ON_Surface_SpanCount(const ON_Surface* pConstSurface, int direction)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_SpanCount(IntPtr pConstSurface, int direction);

  //bool ON_Surface_GetSpanVector(const ON_Surface* pConstSurface, int direction, int count, /*ARRAY*/double* span_vector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetSpanVector(IntPtr pConstSurface, int direction, int count, [In,Out] double[] span_vector);

  //int ON_Surface_Degree(const ON_Surface* pConstSurface, int direction)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_Degree(IntPtr pConstSurface, int direction);

  //int ON_Surface_IsIsoparametric(const ON_Surface* pConstSurface, const ON_Curve* pCurve, ON_INTERVAL_STRUCT curveDomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_IsIsoparametric(IntPtr pConstSurface, IntPtr pCurve, Interval curveDomain);

  //int ON_Surface_IsIsoparametric2(const ON_Surface* pConstSurface, ON_3DPOINT_STRUCT bbox_min, ON_3DPOINT_STRUCT bbox_max)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_IsIsoparametric2(IntPtr pConstSurface, Point3d bbox_min, Point3d bbox_max);

  //bool ON_Surface_IsPlanar( const ON_Surface* pConstSurface, ON_PLANE_STRUCT* plane, double tolerance, bool computePlane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsPlanar(IntPtr pConstSurface, ref Plane plane, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computePlane);

  //bool ON_Surface_IsSphere( const ON_Surface* pConstSurface, ON_Sphere* sphere, double tolerance, bool computeSphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsSphere(IntPtr pConstSurface, ref Sphere sphere, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeSphere);

  //bool ON_Surface_IsCylinder( const ON_Surface* pConstSurface, ON_Cylinder* cylinder, double tolerance, bool computeCylinder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsCylinder(IntPtr pConstSurface, ref Cylinder cylinder, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeCylinder);

  //bool ON_Surface_IsCone( const ON_Surface* pConstSurface, ON_Cone* cone, double tolerance, bool computeCone)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsCone(IntPtr pConstSurface, ref Cone cone, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeCone);

  //bool ON_Surface_IsTorus( const ON_Surface* pConstSurface, ON_Torus* torus, double tolerance, bool computeTorus)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsTorus(IntPtr pConstSurface, ref Torus torus, double tolerance, [MarshalAs(UnmanagedType.U1)]bool computeTorus);

  //bool ON_Surface_GetBool(const ON_Surface* pConstSurface, int direction, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetBool(IntPtr pConstSurface, int direction, int which);

  //bool ON_Surface_IsAtSingularity(const ON_Surface* pConstSurface, double s, double t, bool exact)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsAtSingularity(IntPtr pConstSurface, double s, double t, [MarshalAs(UnmanagedType.U1)]bool exact);

  //int ON_Surface_IsAtSeam(const ON_Surface* pConstSurface, double s, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_IsAtSeam(IntPtr pConstSurface, double s, double t);

  //bool ON_Surface_GetNextDiscontinuity(const ON_Surface* pConstSurface, int direction, int continuityType, double t0, double t1, double* t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetNextDiscontinuity(IntPtr pConstSurface, int direction, int continuityType, double t0, double t1, ref double t);

  //bool ON_Surface_IsContinuous(const ON_Surface* pConstSurface, int continuityType, double s, double t)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_IsContinuous(IntPtr pConstSurface, int continuityType, double s, double t);

  //void ON_Surface_NormalAt(const ON_Surface* pConstSurface, double u, double v, ON_3dVector* vector)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Surface_NormalAt(IntPtr pConstSurface, double u, double v, ref Vector3d vector);

  //bool ON_Surface_FrameAt(const ON_Surface* pConstSurface, double u, double v, ON_PLANE_STRUCT* frame)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_FrameAt(IntPtr pConstSurface, double u, double v, ref Plane frame);

  //ON_Surface* ON_Surface_Trim(const ON_Surface* pConstSurface, ON_INTERVAL_STRUCT u_domain, ON_INTERVAL_STRUCT v_domain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Trim(IntPtr pConstSurface, Interval u_domain, Interval v_domain);

  //ON_Curve* ON_Surface_IsoCurve(const ON_Surface* pConstSurface, int direction, double constantParameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_IsoCurve(IntPtr pConstSurface, int direction, double constantParameter);

  //ON_Curve* ON_Surface_Pushup(const ON_Surface* pConstSurface, const ON_Curve* pCurve2d, double tolerance, ON_INTERVAL_STRUCT curve2dSubdomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Pushup(IntPtr pConstSurface, IntPtr pCurve2d, double tolerance, Interval curve2dSubdomain);

  //ON_Curve* ON_Surface_Pullback(const ON_Surface* pConstSurface, const ON_Curve* pCurve3d, double tolerance, ON_INTERVAL_STRUCT curve3dSubdomain)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Pullback(IntPtr pConstSurface, IntPtr pCurve3d, double tolerance, Interval curve3dSubdomain);

  //int ON_Surface_HasNurbsForm(const ON_Surface* pConstSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Surface_HasNurbsForm(IntPtr pConstSurface);

  //ON_MassProperties* ON_Surface_MassProperties(bool bArea, const ON_Surface* pConstSurface, double relativeTolerance, double absoluteTolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_MassProperties([MarshalAs(UnmanagedType.U1)]bool bArea, IntPtr pConstSurface, double relativeTolerance, double absoluteTolerance);

  //bool ON_Surface_EvPoint( const ON_Surface* pConstSurface, double s, double t, ON_3dPoint* point )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_EvPoint(IntPtr pConstSurface, double s, double t, ref Point3d point);

  //bool ON_Surface_EvCurvature( const ON_Surface* pConstSurface, 
  //                                           double s, double t, 
  //                                           ON_3dPoint* point, 
  //                                           ON_3dVector* normal, 
  //                                           ON_3dVector* kappa1, 
  //                                           ON_3dVector* kappa2, 
  //                                           double* gauss, 
  //                                           double* mean, 
  //                                           double* k1,
  //                                           double* k2)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_EvCurvature(IntPtr pConstSurface, double s, double t, ref Point3d point, ref Vector3d normal, ref Vector3d kappa1, ref Vector3d kappa2, ref double gauss, ref double mean, ref double k1, ref double k2);

  //bool ON_Surface_GetClosestPoint( const ON_Surface* pConstSurface, ON_3DPOINT_STRUCT test_point, double* s, double* t )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_GetClosestPoint(IntPtr pConstSurface, Point3d test_point, ref double s, ref double t);

  //ON_NurbsCurve* ON_Surface_InterpCrvOnSrf(const ON_Surface* pConstSurface, int count, /*ARRAY*/const ON_2dPoint* pts, int isClosed, double tol, int closedSrfHandling)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_InterpCrvOnSrf(IntPtr pConstSurface, int count, Point2d[] pts, int isClosed, double tol, int closedSrfHandling);

  //ON_NurbsSurface* ON_Surface_GetNurbForm(ON_Surface* pSurface, double tolerance, int* accuracy)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_GetNurbForm(IntPtr pSurface, double tolerance, ref int accuracy);

  //ON_Surface* ON_Surface_Offset( const ON_Surface* pConstSurface, double offset, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Offset(IntPtr pConstSurface, double offset, double tolerance);

  //ON_Surface* ON_Surface_Reverse( const ON_Surface* pConstSurface, int direction )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Reverse(IntPtr pConstSurface, int direction);

  //ON_Surface* ON_Surface_Transpose( const ON_Surface* pConstSurface )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_Transpose(IntPtr pConstSurface);

  //bool ON_Surface_Evaluate(const ON_Surface* pConstSurface, double u, double v, int numDer, int stride, /*ARRAY*/double* der_array)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Surface_Evaluate(IntPtr pConstSurface, double u, double v, int numDer, int stride, [In,Out] double[] der_array);

  //ON_Surface* RHC_RhinoExtrudeCurveStraight( const ON_Curve* pConstCurve, ON_3DVECTOR_STRUCT direction )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoExtrudeCurveStraight(IntPtr pConstCurve, Vector3d direction);

  //ON_Surface* RHC_RhinoExtrudeCurveToPoint( const ON_Curve* pConstCurve, ON_3DPOINT_STRUCT tip )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoExtrudeCurveToPoint(IntPtr pConstCurve, Point3d tip);

  //ON_RevSurface* ON_RevSurface_Create(const ON_Curve* pConstProfile, const ON_Line* axis, double startAngle, double endAngle )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_RevSurface_Create(IntPtr pConstProfile, ref Line axis, double startAngle, double endAngle);

  //ON_SumSurface* ON_SumSurface_Create(const ON_Curve* pConstCurveA, const ON_Curve* pConstCurveB)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_SumSurface_Create(IntPtr pConstCurveA, IntPtr pConstCurveB);

  //ON_Surface* ON_Surface_MakePeriodic( const ON_Surface* pConstSurface, int direction )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_Surface_MakePeriodic(IntPtr pConstSurface, int direction);
  #endregion


  #region on_xform.cpp
  //void ON_Xform_Scale( ON_Xform* xf, const ON_PLANE_STRUCT* plane, double xFactor, double yFactor, double zFactor )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Scale(ref Transform xf, ref Plane plane, double xFactor, double yFactor, double zFactor);

  //void ON_Xform_Rotation( ON_Xform* xf, double sinAngle, double cosAngle, ON_3DVECTOR_STRUCT rotationAxis, ON_3DPOINT_STRUCT rotationCenter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Rotation(ref Transform xf, double sinAngle, double cosAngle, Vector3d rotationAxis, Point3d rotationCenter);

  //bool ON_Xform_PlaneToPlane( ON_Xform* xf, const ON_PLANE_STRUCT* plane0, const ON_PLANE_STRUCT* plane1, bool rotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Xform_PlaneToPlane(ref Transform xf, ref Plane plane0, ref Plane plane1, [MarshalAs(UnmanagedType.U1)]bool rotation);

  //void ON_Xform_Mirror( ON_Xform* xf, ON_3DPOINT_STRUCT pointOnMirrorPlane, ON_3DVECTOR_STRUCT normalToMirrorPlane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Mirror(ref Transform xf, Point3d pointOnMirrorPlane, Vector3d normalToMirrorPlane);

  //bool ON_Xform_ChangeBasis2( ON_Xform* xf,
  //                                          ON_3DVECTOR_STRUCT x0, ON_3DVECTOR_STRUCT y0, ON_3DVECTOR_STRUCT z0,
  //                                          ON_3DVECTOR_STRUCT x1, ON_3DVECTOR_STRUCT y1, ON_3DVECTOR_STRUCT z1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Xform_ChangeBasis2(ref Transform xf, Vector3d x0, Vector3d y0, Vector3d z0, Vector3d x1, Vector3d y1, Vector3d z1);

  //void ON_Xform_PlanarProjection(ON_Xform* xf, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_PlanarProjection(ref Transform xf, ref Plane plane);

  //void ON_Xform_Shear(ON_Xform* xf, 
  //                                  const ON_PLANE_STRUCT* plane, 
  //                                  ON_3DVECTOR_STRUCT x, 
  //                                  ON_3DVECTOR_STRUCT y, 
  //                                  ON_3DVECTOR_STRUCT z)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_Xform_Shear(ref Transform xf, ref Plane plane, Vector3d x, Vector3d y, Vector3d z);

  //int ON_Xform_IsSimilarity(const ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int ON_Xform_IsSimilarity(ref Transform xf);

  //double ON_Xform_Determinant(const ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double ON_Xform_Determinant(ref Transform xf);

  //bool ON_Xform_Invert( ON_Xform* xf )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool ON_Xform_Invert(ref Transform xf);

  //bool ON_SpaceMorph_MorphGeometry(ON_Geometry* pGeometry, double tolerance, bool quickpreview, bool preserveStructure, MORPHPOINTPROC callback)
  // SKIPPING - Contains a function pointer which needs to be written by hand
  #endregion


  #region rh_annotationobject.cpp
  //CRhinoAnnotationText* CRhinoAnnotationText_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoAnnotationText_New();

  //bool CRhinoAnnotationText_BoundingBox(const CRhinoAnnotationText* pAnnotationText, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoAnnotationText_BoundingBox(IntPtr pAnnotationText, ref BoundingBox bbox);

  //void CRhinoAnnotationText_Set(CRhinoAnnotationText* pAnnotationText,
  //                                            const RHMONO_STRING* _text,
  //                                            const ON_PLANE_STRUCT* _plane,
  //                                            double height )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoAnnotationText_Set(IntPtr pAnnotationText, [MarshalAs(UnmanagedType.LPWStr)]string _text, ref Plane _plane, double height);

  //const wchar_t* CRhinoAnnotationObject_DisplayText(const CRhinoAnnotationObject* pConstAnnotationObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoAnnotationObject_DisplayText(IntPtr pConstAnnotationObject);
  #endregion


  #region rh_app.cpp
  //int CRhinoApp_GetInt(int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoApp_GetInt(int which);

  //void CRhinoApp_GetBuildDate(int* year, int* month, int* day)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_GetBuildDate(ref int year, ref int month, ref int day);

  //ON_UUID CRhinoApp_GetGUID(int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoApp_GetGUID(int which);

  //void CRhinoApp_Print( const RHMONO_STRING* _s )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_Print([MarshalAs(UnmanagedType.LPWStr)]string _s);

  //void RHC_DebugPrint( const RHMONO_STRING* _s )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RHC_DebugPrint([MarshalAs(UnmanagedType.LPWStr)]string _s);

  //void CRhinoApp_SetCommandPrompt( const RHMONO_STRING* _prompt, const RHMONO_STRING* _prompt_default )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_SetCommandPrompt([MarshalAs(UnmanagedType.LPWStr)]string _prompt, [MarshalAs(UnmanagedType.LPWStr)]string _prompt_default);

  //void CRhinoApp_GetCommandHistoryWindowText( CRhCmnStringHolder* pStringHolder )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_GetCommandHistoryWindowText(IntPtr pStringHolder);

  //void CRhinoApp_ClearCommandHistoryWindowText()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_ClearCommandHistoryWindowText();

  //void CRhinoApp_SendKeystrokes( const RHMONO_STRING* _string, bool appendReturn )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_SendKeystrokes([MarshalAs(UnmanagedType.LPWStr)]string _string, [MarshalAs(UnmanagedType.U1)]bool appendReturn);

  //void CRhinoApp_Exit()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_Exit();

  //bool CRhinoApp_RunScript(const RHMONO_STRING* _script, int echo_mode)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoApp_RunScript([MarshalAs(UnmanagedType.LPWStr)]string _script, int echo_mode);

  //const RHMONO_STRING* CRhinoApp_GetString(int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoApp_GetString(int which);

  //void CRhinoApp_Wait(int ms)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_Wait(int ms);

  //LPUNKNOWN CRhinoApp_GetPlugInObject(ON_UUID plugin_uuid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoApp_GetPlugInObject(Guid plugin_uuid);

  //void CRhinoApp_SetFocusToMainWindow()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_SetFocusToMainWindow();

  //bool CRhinoApp_ReleaseCapture()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoApp_ReleaseCapture();

  //void RHC_SetEscapeKeyCallback(ESCAPEKEYPROC esc_proc)
  // SKIPPING - Contains a function pointer which needs to be written by hand
  #endregion


  #region rh_appsettings.cpp
  //const RHMONO_STRING* CRhinoAppSettings_DefaultFontFaceName()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoAppSettings_DefaultFontFaceName();

  //int RhCommandAliasList_Count()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhCommandAliasList_Count();

  //const RHMONO_STRING* RhCommandAliasList_Item(int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhCommandAliasList_Item(int i);

  //void RhCommandAliasList_DestroyList()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhCommandAliasList_DestroyList();

  //const RHMONO_STRING* RhCommandAliasList_GetMacro(const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhCommandAliasList_GetMacro([MarshalAs(UnmanagedType.LPWStr)]string _name);

  //bool RhCommandAliasList_SetMacro(const RHMONO_STRING* _name, const RHMONO_STRING* _macro)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhCommandAliasList_SetMacro([MarshalAs(UnmanagedType.LPWStr)]string _name, [MarshalAs(UnmanagedType.LPWStr)]string _macro);

  //bool RhCommandAliasList_Add(const RHMONO_STRING* _name, const RHMONO_STRING* _macro)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhCommandAliasList_Add([MarshalAs(UnmanagedType.LPWStr)]string _name, [MarshalAs(UnmanagedType.LPWStr)]string _macro);

  //bool RhCommandAliasList_Delete(const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhCommandAliasList_Delete([MarshalAs(UnmanagedType.LPWStr)]string _name);

  //bool RhCommandAliasList_IsAlias(const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhCommandAliasList_IsAlias([MarshalAs(UnmanagedType.LPWStr)]string _name);

  //bool RhDontRepeatList_UseList()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhDontRepeatList_UseList();

  //int RhDontRepeatList_SetList( const RHMONO_STRING* _list )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhDontRepeatList_SetList([MarshalAs(UnmanagedType.LPWStr)]string _list);

  //const RHMONO_STRING* RhDontRepeatList_GetList()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhDontRepeatList_GetList();

  //int RhDirectoryManager_AddSearchPath(const RHMONO_STRING* _folder, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhDirectoryManager_AddSearchPath([MarshalAs(UnmanagedType.LPWStr)]string _folder, int index);

  //bool RhDirectoryManager_DeleteSearchPath(const RHMONO_STRING* _folder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhDirectoryManager_DeleteSearchPath([MarshalAs(UnmanagedType.LPWStr)]string _folder);

  //const RHMONO_STRING* RhDirectoryManager_FindFile(const RHMONO_STRING* _filename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhDirectoryManager_FindFile([MarshalAs(UnmanagedType.LPWStr)]string _filename);

  //int RhDirectoryManager_SearchPathCount()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhDirectoryManager_SearchPathCount();

  //const RHMONO_STRING* RhDirectoryManager_SearchPath(int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhDirectoryManager_SearchPath(int i);

  //const RHMONO_STRING* RhDirectoryManager_WorkingFolder(const RHMONO_STRING* _folder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhDirectoryManager_WorkingFolder([MarshalAs(UnmanagedType.LPWStr)]string _folder);

  //const RHMONO_STRING* RhFileSettings_FileGetSet(const RHMONO_STRING* _str, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhFileSettings_FileGetSet([MarshalAs(UnmanagedType.LPWStr)]string _str, int i);

  //int RhFileSettings_AutosaveInterval(int minutes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhFileSettings_AutosaveInterval(int minutes);

  //bool RhFileSettings_BoolProperty( int which, bool set, bool enable)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhFileSettings_BoolProperty(int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool enable);

  //const RHMONO_STRING* RhFileSettings_AutosaveBeforeCommands()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhFileSettings_AutosaveBeforeCommands();

  //void RhFileSettings_SetAutosaveBeforeCommands(const RHMONO_STRING* _cmds)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhFileSettings_SetAutosaveBeforeCommands([MarshalAs(UnmanagedType.LPWStr)]string _cmds);

  //int RhFileSettings_ClipboardOnExit(bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhFileSettings_ClipboardOnExit([MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //int RhAppearanceSettings_GetSetColor(int which, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhAppearanceSettings_GetSetColor(int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //unsigned int RhAppearanceSettings_GetSetUINT(int which, bool set, unsigned int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RhAppearanceSettings_GetSetUINT(int which, [MarshalAs(UnmanagedType.U1)]bool set, uint set_value);

  //bool CRhinoAppAppearanceSettings_GetBool(int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoAppAppearanceSettings_GetBool(int which);

  //void CRhinoAppAppearanceSettings_SetBool(int which, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoAppAppearanceSettings_SetBool(int which, [MarshalAs(UnmanagedType.U1)]bool val);

  //int RhGridSettings_GetSetColor(int which, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhGridSettings_GetSetColor(int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //int RhEdgeAnalysisSettings_ShowEdgeColor(bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhEdgeAnalysisSettings_ShowEdgeColor([MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //int RhEdgeAnalysisSettings_ShowEdges(bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhEdgeAnalysisSettings_ShowEdges([MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //bool RhModelAidSettings_GetSetBool(int which, bool set, bool set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhModelAidSettings_GetSetBool(int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_value);

  //double RhModelAidSettings_GetSetDouble(int which, bool set, double set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double RhModelAidSettings_GetSetDouble(int which, [MarshalAs(UnmanagedType.U1)]bool set, double set_value);

  //int RhModelAidSettings_GetSetInt(int which, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhModelAidSettings_GetSetInt(int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //bool RhViewSettings_GetSetBool(int which, bool set, bool set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhViewSettings_GetSetBool(int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_value);

  //double RhViewSettings_GetSetDouble(int which, bool set, double set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double RhViewSettings_GetSetDouble(int which, [MarshalAs(UnmanagedType.U1)]bool set, double set_value);

  //int RhViewSettings_GetSetInt(int which, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhViewSettings_GetSetInt(int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //bool RhColors_UsingNewSchool()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhColors_UsingNewSchool();

  //void RhColors_SetUsingNewSchool(bool on)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhColors_SetUsingNewSchool([MarshalAs(UnmanagedType.U1)]bool on);

  //int RhColors_GetColor(int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhColors_GetColor(int which);

  //void RhColors_SetColor(int which, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhColors_SetColor(int which, int argb);

  //int RhSmartTrackSettings_GetSetColor(int which, bool set, int set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhSmartTrackSettings_GetSetColor(int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_value);

  //bool RhSmartTrackSettings_GetSetBool(int which, bool set, bool set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhSmartTrackSettings_GetSetBool(int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_value);
  #endregion


  #region rh_bitmap.cpp
  //int CRhinoBitmapTable_BitmapCount(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoBitmapTable_BitmapCount(int docId);

  //int CRhinoBitmapTable_AddBitmap( int docId, const RHMONO_STRING* _bitmapFilename, bool replaceExisting)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoBitmapTable_AddBitmap(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _bitmapFilename, [MarshalAs(UnmanagedType.U1)]bool replaceExisting);

  //bool CRhinoBitmapTable_DeleteBitmap( int docId, const RHMONO_STRING* _bitmapFilename)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoBitmapTable_DeleteBitmap(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _bitmapFilename);

  //int CRhinoBitmapTable_ExportToFiles( int docId, const RHMONO_STRING* _dir, int overwrite)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoBitmapTable_ExportToFiles(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _dir, int overwrite);

  //bool CRhinoBitmapTable_ExportToFile( int docId, int index, const RHMONO_STRING* _path)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoBitmapTable_ExportToFile(int docId, int index, [MarshalAs(UnmanagedType.LPWStr)]string _path);
  #endregion


  #region rh_command.cpp
  //void CRhinoCommand_SetRunCommandCallback(RUNCOMMANDPROC run_func)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //bool CRhinoCommand_IsValidCommandName( const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoCommand_IsValidCommandName([MarshalAs(UnmanagedType.LPWStr)]string _name);

  //ON_UUID CRhinoApp_GetRunningCommandId( int i )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoApp_GetRunningCommandId(int i);

  //bool RhCommand_IsCommand(const RHMONO_STRING* _command_name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RhCommand_IsCommand([MarshalAs(UnmanagedType.LPWStr)]string _command_name);

  //bool CRhinoCommand_Create(CRhinoPlugIn* pPlugIn, ON_UUID cmdId, const RHMONO_STRING* _englishName, int serial_number, int commandStyle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoCommand_Create(IntPtr pPlugIn, Guid cmdId, [MarshalAs(UnmanagedType.LPWStr)]string _englishName, int serial_number, int commandStyle);

  //ON_UUID CRhinoApp_LookupCommandByName( const RHMONO_STRING* _name )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoApp_LookupCommandByName([MarshalAs(UnmanagedType.LPWStr)]string _name);

  //const RHMONO_STRING* CRhinoApp_LookupCommandById( ON_UUID command_id, bool english_name )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoApp_LookupCommandById(Guid command_id, [MarshalAs(UnmanagedType.U1)]bool english_name);

  //void CRhinoApp_DisplayCommandHelp( ON_UUID command_id )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoApp_DisplayCommandHelp(Guid command_id);
  #endregion


  #region rh_dimstyle.cpp
  //bool CRhinoDimStyle_Name(const ON_DimStyle* pConstDimStyle, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDimStyle_Name(IntPtr pConstDimStyle, IntPtr pStringHolder);

  //int CRhinoDimStyleTable_DimStyleCount(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDimStyleTable_DimStyleCount(int docId);

  //int CRhinoDimStyleTable_Add( int docId, const RHMONO_STRING* _name, bool reference)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDimStyleTable_Add(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _name, [MarshalAs(UnmanagedType.U1)]bool reference);

  //int CRhinoDimStyleTable_CurrentDimStyleIndex(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDimStyleTable_CurrentDimStyleIndex(int docId);

  //bool CRhinoDimStyleTable_SetCurrentDimStyleIndex(int docId, int index, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDimStyleTable_SetCurrentDimStyleIndex(int docId, int index, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //int CRhinoDimStyleTable_FindDimStyle(int docId, const RHMONO_STRING* _name, bool ignore_deleted)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDimStyleTable_FindDimStyle(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _name, [MarshalAs(UnmanagedType.U1)]bool ignore_deleted);

  //void CRhinoDimStyleTable_GetUnusedDimensionStyleName(int docId, CRhCmnStringHolder* pStringHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDimStyleTable_GetUnusedDimensionStyleName(int docId, IntPtr pStringHolder);

  //bool CRhinoDimStyleTable_DeleteDimStyle(int docId, int index, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDimStyleTable_DeleteDimStyle(int docId, int index, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //ON_UUID CRhinoDimStyleTable_GetGuid(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDimStyleTable_GetGuid(int docId, int index);

  //const ON_DimStyle* CRhinoDimStyleTable_GetDimStylePointer(int docId, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDimStyleTable_GetDimStylePointer(int docId, Guid id);

  //bool CRhinoDimStyleTable_CommitChanges(int docId, ON_DimStyle* pDimStyle, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDimStyleTable_CommitChanges(int docId, IntPtr pDimStyle, Guid id);

  //bool CRhinoDimStyle_IsReference(int docId, int dimstyleindex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDimStyle_IsReference(int docId, int dimstyleindex);
  #endregion


  #region rh_displayattrsmgr.cpp
  //DisplayAttrsMgrList* DisplayAttrsMgrList_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr DisplayAttrsMgrList_New();

  //void DisplayAttrsMgrList_Delete(DisplayAttrsMgrList* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void DisplayAttrsMgrList_Delete(IntPtr pList);

  //int CRhinoDisplayAttrsMgr_GetDisplayAttrsList(DisplayAttrsMgrList* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDisplayAttrsMgr_GetDisplayAttrsList(IntPtr pList);

  //DisplayAttrsMgrListDesc* DisplayAttrsMgrListDesc_NewFromList(DisplayAttrsMgrList* pDisplayAttrsMgrList, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr DisplayAttrsMgrListDesc_NewFromList(IntPtr pDisplayAttrsMgrList, int index);

  //void DisplayAttrsMgrListDesc_Delete(DisplayAttrsMgrListDesc* pDescription)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void DisplayAttrsMgrListDesc_Delete(IntPtr pDescription);

  //bool DisplayAttrsMgrListDesc_InMenu(const DisplayAttrsMgrListDesc* pConstDescription)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool DisplayAttrsMgrListDesc_InMenu(IntPtr pConstDescription);

  //void DisplayAttrsMgrListDesc_SetInMenu(DisplayAttrsMgrListDesc* pDescription, bool value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void DisplayAttrsMgrListDesc_SetInMenu(IntPtr pDescription, [MarshalAs(UnmanagedType.U1)]bool value);

  //CDisplayPipelineAttributes* DisplayAttrsMgrListDesc_DisplayAttributes(DisplayAttrsMgrListDesc* pDescription)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr DisplayAttrsMgrListDesc_DisplayAttributes(IntPtr pDescription);
  #endregion


  #region rh_displayconduit.cpp
  //void CRhinoDisplayConduit_LogState( const RHMONO_STRING* _str )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayConduit_LogState([MarshalAs(UnmanagedType.LPWStr)]string _str);

  //void CRhinoDisplayConduit_SetCallback(int which, CONDUITPROC proc, CONDUITREPORTPROC reportproc)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CChannelAttr_GetSetBBox(CRhinoDisplayConduit* pConduit, bool set, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CChannelAttr_GetSetBBox(IntPtr pConduit, [MarshalAs(UnmanagedType.U1)]bool set, ref BoundingBox bbox);
  #endregion


  #region rh_displaypipeline.cpp
  //CRhinoViewport* CRhinoDisplayPipeline_RhinoViewport(const CRhinoDisplayPipeline* pipeline)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDisplayPipeline_RhinoViewport(IntPtr pipeline);

  //void CRhinoDisplayPipeline_FrameSize(const CRhinoDisplayPipeline* pDP, int* width, int* height)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_FrameSize(IntPtr pDP, ref int width, ref int height);

  //bool CRhinoDisplayPipeline_GetBool(CRhinoDisplayPipeline* pPipeline, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDisplayPipeline_GetBool(IntPtr pPipeline, int which);

  //int CRhinoDisplayPipeline_GetInt(CRhinoDisplayPipeline* pPipeline, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDisplayPipeline_GetInt(IntPtr pPipeline, int which);

  //void CRhinoDisplayPipeline_GetSetModelTransform(CRhinoDisplayPipeline* pPipeline, bool set, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_GetSetModelTransform(IntPtr pPipeline, [MarshalAs(UnmanagedType.U1)]bool set, ref Transform xf);

  //bool CRhinoDisplayPipeline_IsVisible1(const CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT worldCoordinate)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDisplayPipeline_IsVisible1(IntPtr pPipeline, Point3d worldCoordinate);

  //bool CRhinoDisplayPipeline_IsVisibleOrActive(const CRhinoDisplayPipeline* pPipeline, const CRhinoObject* pRhinoObject, bool visibleTest)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDisplayPipeline_IsVisibleOrActive(IntPtr pPipeline, IntPtr pRhinoObject, [MarshalAs(UnmanagedType.U1)]bool visibleTest);

  //bool CRhinoDisplayPipeline_IsVisible2(const CRhinoDisplayPipeline* pPipeline, ON_BoundingBox* bbox)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDisplayPipeline_IsVisible2(IntPtr pPipeline, ref BoundingBox bbox);

  //void CRhinoDisplayPipeline_DrawMarker(CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT point, ON_3DVECTOR_STRUCT direction, int argb, int thickness, double size, double rotation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawMarker(IntPtr pPipeline, Point3d point, Vector3d direction, int argb, int thickness, double size, double rotation);

  //void CRhinoDisplayPipeline_Draw2dText( CRhinoDisplayPipeline* pPipeline,
  //                                                     int text_length,
  //                                                     const RHMONO_STRING* _text,
  //                                                     int textARGB,
  //                                                     ON_2DPOINT_STRUCT screenpoint,
  //                                                     bool middleJustified,
  //                                                     int height,
  //                                                     const RHMONO_STRING* _fontface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Draw2dText(IntPtr pPipeline, int text_length, [MarshalAs(UnmanagedType.LPWStr)]string _text, int textARGB, Point2d screenpoint, [MarshalAs(UnmanagedType.U1)]bool middleJustified, int height, [MarshalAs(UnmanagedType.LPWStr)]string _fontface);

  //void CRhinoDisplayPipeline_Draw2dText2( CRhinoDisplayPipeline* pPipeline,
  //                                                      int text_length,
  //                                                      const RHMONO_STRING* _text,
  //                                                      int textARGB,
  //                                                      ON_3DPOINT_STRUCT worldpoint,
  //                                                      bool middleJustified,
  //                                                      int height,
  //                                                      const RHMONO_STRING* _fontface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Draw2dText2(IntPtr pPipeline, int text_length, [MarshalAs(UnmanagedType.LPWStr)]string _text, int textARGB, Point3d worldpoint, [MarshalAs(UnmanagedType.U1)]bool middleJustified, int height, [MarshalAs(UnmanagedType.LPWStr)]string _fontface);

  //void CRhinoDisplayPipeline_Draw3dText( CRhinoDisplayPipeline* pPipeline,
  //                                                     const RHMONO_STRING* _text,
  //                                                     int textARGB,
  //                                                     const ON_PLANE_STRUCT* _plane,
  //                                                     double height,
  //                                                     const RHMONO_STRING* _fontface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Draw3dText(IntPtr pPipeline, [MarshalAs(UnmanagedType.LPWStr)]string _text, int textARGB, ref Plane _plane, double height, [MarshalAs(UnmanagedType.LPWStr)]string _fontface);

  //void CRhinoDisplayPipeline_Draw3dText3( CRhinoDisplayPipeline* pPipeline,
  //                                                      CRhinoAnnotationText* pAnnotationText,
  //                                                      const RHMONO_STRING* _fontface,
  //                                                      int textARGB,
  //                                                      bool bold,
  //                                                      bool italic,
  //                                                      const ON_PLANE_STRUCT* _plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Draw3dText3(IntPtr pPipeline, IntPtr pAnnotationText, [MarshalAs(UnmanagedType.LPWStr)]string _fontface, int textARGB, [MarshalAs(UnmanagedType.U1)]bool bold, [MarshalAs(UnmanagedType.U1)]bool italic, ref Plane _plane);

  //void CRhinoDisplayPipeline_Draw3dText2( CRhinoDisplayPipeline* pPipeline,
  //                                                      CRhinoAnnotationText* pAnnotationText,
  //                                                      const RHMONO_STRING* _fontface,
  //                                                      int textARGB,
  //                                                      bool bold,
  //                                                      bool italic)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Draw3dText2(IntPtr pPipeline, IntPtr pAnnotationText, [MarshalAs(UnmanagedType.LPWStr)]string _fontface, int textARGB, [MarshalAs(UnmanagedType.U1)]bool bold, [MarshalAs(UnmanagedType.U1)]bool italic);

  //void CRhinoDisplayPipeline_Draw3dText4( CRhinoDisplayPipeline* pPipeline,
  //                                                      CRhinoAnnotationText* pAnnotationText,
  //                                                      const RHMONO_STRING* _fontface,
  //                                                      int textARGB,
  //                                                      bool bold,
  //                                                      bool italic,
  //                                                      ON_3DPOINT_STRUCT origin)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Draw3dText4(IntPtr pPipeline, IntPtr pAnnotationText, [MarshalAs(UnmanagedType.LPWStr)]string _fontface, int textARGB, [MarshalAs(UnmanagedType.U1)]bool bold, [MarshalAs(UnmanagedType.U1)]bool italic, Point3d origin);

  //void CRhinoDisplayPipeline_SetShadingRequired(CRhinoDisplayPipeline* pPipeline, bool enable)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_SetShadingRequired(IntPtr pPipeline, [MarshalAs(UnmanagedType.U1)]bool enable);

  //void CRhinoDisplayPipeline_PushModelTransform(CRhinoDisplayPipeline* pPipeline, ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_PushModelTransform(IntPtr pPipeline, ref Transform xform);

  //void CRhinoDisplayPipeline_Pop(CRhinoDisplayPipeline* pPipeline, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Pop(IntPtr pPipeline, int which);

  //void CRhinoDisplayPipeline_Enable(CRhinoDisplayPipeline* pPipeline, bool enable, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Enable(IntPtr pPipeline, [MarshalAs(UnmanagedType.U1)]bool enable, int which);

  //void CRhinoDisplayPipeline_Push(CRhinoDisplayPipeline* pPipeline, bool enable, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_Push(IntPtr pPipeline, [MarshalAs(UnmanagedType.U1)]bool enable, int which);

  //void CRhinoDisplayPipeline_PushCullFaceMode(CRhinoDisplayPipeline* pPipeline, int mode)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_PushCullFaceMode(IntPtr pPipeline, int mode);

  //void CRhinoDisplayPipeline_DrawLine(CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawLine(IntPtr pPipeline, Point3d from, Point3d to, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawDottedLine(CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawDottedLine(IntPtr pPipeline, Point3d from, Point3d to, int argb);

  //void CRhinoDisplayPipeline_DrawLines(CRhinoDisplayPipeline* pPipeline, int count, /*ARRAY*/const ON_Line* lines, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawLines(IntPtr pPipeline, int count, Line[] lines, int argb, int thickness);

  //void CRhinoDisplayPipeline_SetMultiLineAttributes(int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_SetMultiLineAttributes(int argb, int thickness);

  //void CRhinoDisplayPipeline_MultiLineDraw(CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_MultiLineDraw(IntPtr pPipeline, Point3d from, Point3d to);

  //void CRhinoDisplayPipeline_DrawPolyline(CRhinoDisplayPipeline* pPipeline, int count, /*ARRAY*/const ON_3dPoint* points, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawPolyline(IntPtr pPipeline, int count, Point3d[] points, int argb, int thickness);

  //int CRhinoDisplayPipeline_DefaultCurveThickness(const CRhinoDisplayPipeline* pConstPipeline)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDisplayPipeline_DefaultCurveThickness(IntPtr pConstPipeline);

  //bool CRhinoDisplayPipeline_UsesOpenGL(const CRhinoDisplayPipeline* pConstPipeline)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDisplayPipeline_UsesOpenGL(IntPtr pConstPipeline);

  //void CRhinoDisplayPipeLine_DrawPolygon(CRhinoDisplayPipeline* pPipeline, int count, /*ARRAY*/const ON_3dPoint* points, int argb, bool filled)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeLine_DrawPolygon(IntPtr pPipeline, int count, Point3d[] points, int argb, [MarshalAs(UnmanagedType.U1)]bool filled);

  //void CRhinoDisplayPipeline_DrawDot(CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT worldPoint, const RHMONO_STRING* _text, int dotColorARGB, int textColorARGB)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawDot(IntPtr pPipeline, Point3d worldPoint, [MarshalAs(UnmanagedType.LPWStr)]string _text, int dotColorARGB, int textColorARGB);

  //void CRhinoDisplayPipeline_DrawDot2(CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT worldPoint, const RHMONO_STRING* _text)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawDot2(IntPtr pPipeline, Point3d worldPoint, [MarshalAs(UnmanagedType.LPWStr)]string _text);

  //void CRhinoDisplayPipeline_DrawDot3(CRhinoDisplayPipeline* pPipeline, int screenX, int screenY, const RHMONO_STRING* _text, int dotColorARGB, int textColorARGB)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawDot3(IntPtr pPipeline, int screenX, int screenY, [MarshalAs(UnmanagedType.LPWStr)]string _text, int dotColorARGB, int textColorARGB);

  //void CRhinoDisplayPipeline_DrawDot4(CRhinoDisplayPipeline* pPipeline, int screenX, int screenY, const RHMONO_STRING* _text)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawDot4(IntPtr pPipeline, int screenX, int screenY, [MarshalAs(UnmanagedType.LPWStr)]string _text);

  //void CRhinoDisplayPipeline_DrawConstructionPlane(CRhinoDisplayPipeline* pPipeline, ON_PLANE_STRUCT* plane, double grid_spacing,
  //    int grid_line_count, int grid_thick_frequency, int boolFlags, int* argb_colors)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawConstructionPlane(IntPtr pPipeline, ref Plane plane, double grid_spacing, int grid_line_count, int grid_thick_frequency, int boolFlags, ref int argb_colors);

  //void CRhinoDisplayPipeline_DrawBox(CRhinoDisplayPipeline* pPipeline, ON_3DPOINT_STRUCT boxMin, ON_3DPOINT_STRUCT boxMax, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawBox(IntPtr pPipeline, Point3d boxMin, Point3d boxMax, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawArc(CRhinoDisplayPipeline* pPipeline, const ON_Arc* arc, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawArc(IntPtr pPipeline, ref Arc arc, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawCircle(CRhinoDisplayPipeline* pPipeline, const ON_CIRCLE_STRUCT* pCircle, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawCircle(IntPtr pPipeline, ref Circle pCircle, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawSphere(CRhinoDisplayPipeline* pPipeline, ON_Sphere* sphere, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawSphere(IntPtr pPipeline, ref Sphere sphere, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawTorus(CRhinoDisplayPipeline* pPipeline, ON_Torus* torus, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawTorus(IntPtr pPipeline, ref Torus torus, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawCylinder(CRhinoDisplayPipeline* pPipeline, ON_Cylinder* cylinder, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawCylinder(IntPtr pPipeline, ref Cylinder cylinder, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawCone(CRhinoDisplayPipeline* pPipeline, ON_Cone* cone, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawCone(IntPtr pPipeline, ref Cone cone, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawCurve(CRhinoDisplayPipeline* pPipeline, const ON_Curve* pConstCurve, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawCurve(IntPtr pPipeline, IntPtr pConstCurve, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawCurvatureGraph(CRhinoDisplayPipeline* pPipeline, const ON_Curve* pConstCurve, int argb, int hairScale, int hairDensity, int sampleDensity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawCurvatureGraph(IntPtr pPipeline, IntPtr pConstCurve, int argb, int hairScale, int hairDensity, int sampleDensity);

  //void CRhinoDisplayPipeline_DrawMeshWires(CRhinoDisplayPipeline* pPipeline, const ON_Mesh* pMesh, int argb, int thickness)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawMeshWires(IntPtr pPipeline, IntPtr pMesh, int argb, int thickness);

  //void CRhinoDisplayPipeline_DrawMeshVertices(CRhinoDisplayPipeline* pPipeline, const ON_Mesh* pMesh, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawMeshVertices(IntPtr pPipeline, IntPtr pMesh, int argb);

  //void CRhinoDisplayPipeline_DrawBrep(CRhinoDisplayPipeline* pPipeline, const ON_Brep* pBrep, int argb, int wireDensity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawBrep(IntPtr pPipeline, IntPtr pBrep, int argb, int wireDensity);

  //void CRhinoDisplayPipeline_DrawShadedMesh(CRhinoDisplayPipeline* pPipeline, const ON_Mesh* pMesh, const CDisplayPipelineMaterial* pMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawShadedMesh(IntPtr pPipeline, IntPtr pMesh, IntPtr pMaterial);

  //void CRhinoDisplayPipeline_DrawMeshFalseColors(CRhinoDisplayPipeline* pPipeline, const ON_Mesh* pMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawMeshFalseColors(IntPtr pPipeline, IntPtr pMesh);

  //void CRhinoDisplayPipeline_DrawPoints(CRhinoDisplayPipeline* pPipeline, int count, /*ARRAY*/const ON_3dPoint* points, int style, int radius, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawPoints(IntPtr pPipeline, int count, Point3d[] points, int style, int radius, int argb);

  //HBITMAP CRhinoDisplayPipeline_DrawToBitmap(CRhinoViewport* pViewport, int width, int height)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDisplayPipeline_DrawToBitmap(IntPtr pViewport, int width, int height);

  //void CRhinoDisplayPipeline_DrawArrows(CRhinoDisplayPipeline* pPipeline, int line_count, /*ARRAY*/const ON_Line* lines, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDisplayPipeline_DrawArrows(IntPtr pPipeline, int line_count, Line[] lines, int argb);
  #endregion


  #region rh_displaypipelineattributes.cpp
  //const RHMONO_STRING* CDisplayPipelineAttributes_GetName(const CDisplayPipelineAttributes* pConstAttrib, bool english)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CDisplayPipelineAttributes_GetName(IntPtr pConstAttrib, [MarshalAs(UnmanagedType.U1)]bool english);

  //void CDisplayPipelineAttributes_SetEnglishName(CDisplayPipelineAttributes* pAttrib, const RHMONO_STRING* name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CDisplayPipelineAttributes_SetEnglishName(IntPtr pAttrib, [MarshalAs(UnmanagedType.LPWStr)]string name);

  //bool CDisplayPipelineAttributes_GetSetBool(CDisplayPipelineAttributes* pAttrib, int which, bool set, bool set_val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CDisplayPipelineAttributes_GetSetBool(IntPtr pAttrib, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_val);

  //int CDisplayPipelineAttributes_GetSetColor( CDisplayPipelineAttributes* pAttrib, int which, bool set, int set_argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CDisplayPipelineAttributes_GetSetColor(IntPtr pAttrib, int which, [MarshalAs(UnmanagedType.U1)]bool set, int set_argb);
  #endregion


  #region rh_displaypipelinematerial.cpp
  //CDisplayPipelineMaterial* CDisplayPipelineMaterial_New(const CDisplayPipelineMaterial* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CDisplayPipelineMaterial_New(IntPtr pOther);

  //CDisplayPipelineMaterial* CDisplayPipelineMaterial_New1(int diffuseRgb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CDisplayPipelineMaterial_New1(int diffuseRgb);

  //CDisplayPipelineMaterial* CDisplayPipelineMaterial_New2(int diffuseRgb, double transparency)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CDisplayPipelineMaterial_New2(int diffuseRgb, double transparency);

  //CDisplayPipelineMaterial* CDisplayPipelineMaterial_New3(int argbDiffuse, int argbSpec, int argbAmbient, int argbEmission, double shine, double transparency)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CDisplayPipelineMaterial_New3(int argbDiffuse, int argbSpec, int argbAmbient, int argbEmission, double shine, double transparency);

  //void CDisplayPipelineMaterial_Delete(CDisplayPipelineMaterial* pDisplayPipelineMaterial)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CDisplayPipelineMaterial_Delete(IntPtr pDisplayPipelineMaterial);

  //int CDisplayPipelineMaterial_GetColor(const CDisplayPipelineMaterial* pMaterial, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CDisplayPipelineMaterial_GetColor(IntPtr pMaterial, int which);

  //void CDisplayPipelineMaterial_SetColor(CDisplayPipelineMaterial* pMaterial, int which, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CDisplayPipelineMaterial_SetColor(IntPtr pMaterial, int which, int argb);

  //double CDisplayPipelineMaterial_GetSetDouble(CDisplayPipelineMaterial* pMaterial, int which, bool set, double set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double CDisplayPipelineMaterial_GetSetDouble(IntPtr pMaterial, int which, [MarshalAs(UnmanagedType.U1)]bool set, double set_value);
  #endregion


  #region rh_doc.cpp
  //int CRhinoDoc_GetId(CRhinoDoc* pDoc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDoc_GetId(IntPtr pDoc);

  //int CRhinoDoc_ActiveDocId()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDoc_ActiveDocId();

  //void CRhinoDoc_Redraw(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_Redraw(int docId);

  //int CRhinoDoc_ViewListBuild(int docId, bool includeStandardViews, bool includePageViews)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDoc_ViewListBuild(int docId, [MarshalAs(UnmanagedType.U1)]bool includeStandardViews, [MarshalAs(UnmanagedType.U1)]bool includePageViews);

  //CRhinoView* CRhinoDoc_ViewListGet(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ViewListGet(int docId, int index);

  //CRhinoView* CRhinoDoc_FindView(int docId, ON_UUID mainViewportId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_FindView(int docId, Guid mainViewportId);

  //CRhinoView* CRhinoDoc_FindView2(int docId, const RHMONO_STRING* _mainViewportName, bool compareCase)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_FindView2(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _mainViewportName, [MarshalAs(UnmanagedType.U1)]bool compareCase);

  //bool CRhinoDoc_CreatePreviewImage( int docId,
  //                                                 const RHMONO_STRING* _filepath,
  //                                                 ON_UUID viewport_id,
  //                                                 int width,
  //                                                 int height,
  //                                                 int flags,
  //                                                 bool wireframe )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_CreatePreviewImage(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _filepath, Guid viewport_id, int width, int height, int flags, [MarshalAs(UnmanagedType.U1)]bool wireframe);

  //CRhinoDib* CRhinoDoc_ExtractPreviewImage( const RHMONO_STRING* _filepath )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ExtractPreviewImage([MarshalAs(UnmanagedType.LPWStr)]string _filepath);

  //void CRhinoDoc_GetRevisionDate(int docId, int* year, int* month, int* day, int* hour, int* minute, bool createdDate)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_GetRevisionDate(int docId, ref int year, ref int month, ref int day, ref int hour, ref int minute, [MarshalAs(UnmanagedType.U1)]bool createdDate);

  //void CRhinoDoc_GetDefaultObjectAttributes(int docId, ON_3dmObjectAttributes* attrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_GetDefaultObjectAttributes(int docId, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddPoint(int docId, ON_3DPOINT_STRUCT point, const ON_3dmObjectAttributes* attrs )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddPoint(int docId, Point3d point, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddPointCloud(int docId, int count, /*ARRAY*/const ON_3dPoint* points, const ON_3dmObjectAttributes* attrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddPointCloud(int docId, int count, Point3d[] points, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddPointCloud2(int docId, const ON_PointCloud* pCloud, const ON_3dmObjectAttributes* attr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddPointCloud2(int docId, IntPtr pCloud, IntPtr attr);

  //ON_UUID CRhinoDoc_AddPolyLine(int docId, int count, /*ARRAY*/const ON_3dPoint* points, const ON_3dmObjectAttributes* attrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddPolyLine(int docId, int count, Point3d[] points, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddArc(int docId, ON_Arc* pArc, const ON_3dmObjectAttributes* attrs )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddArc(int docId, ref Arc pArc, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddCircle(int docId, const ON_CIRCLE_STRUCT* pCircle, const ON_3dmObjectAttributes* attr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddCircle(int docId, ref Circle pCircle, IntPtr attr);

  //ON_UUID CRhinoDoc_AddEllipse(int docId, ON_Ellipse* pEllipse, const ON_3dmObjectAttributes* attr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddEllipse(int docId, ref Ellipse pEllipse, IntPtr attr);

  //ON_UUID CRhinoDoc_AddSphere(int docId, ON_Sphere* sphere, const ON_3dmObjectAttributes* pAttr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddSphere(int docId, ref Sphere sphere, IntPtr pAttr);

  //ON_UUID CRhinoDoc_AddClippingPlane(int docId, const ON_PLANE_STRUCT* plane, double du, double dv, int count, /*ARRAY*/const ON_UUID* clippedViewportIds, const ON_3dmObjectAttributes* attrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddClippingPlane(int docId, ref Plane plane, double du, double dv, int count, Guid[] clippedViewportIds, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddLine(int docId, ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to, const ON_3dmObjectAttributes* attr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddLine(int docId, Point3d from, Point3d to, IntPtr attr);

  //ON_UUID CRhinoDoc_AddLinearDimension( int docId, const ON_LinearDimension2* pConstDimension, const ON_3dmObjectAttributes* pConstAttributes )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddLinearDimension(int docId, IntPtr pConstDimension, IntPtr pConstAttributes);

  //ON_UUID CRhinoDoc_AddCurve(int docId, const ON_Curve* pCurve, const ON_3dmObjectAttributes* attr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddCurve(int docId, IntPtr pCurve, IntPtr attr);

  //ON_UUID CRhinoDoc_AddSurface(int docId, const ON_Surface* pSurface, const ON_3dmObjectAttributes* attr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddSurface(int docId, IntPtr pSurface, IntPtr attr);

  //ON_UUID CRhinoDoc_AddExtrusion(int docId, const ON_Extrusion* pConstExtrusion, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddExtrusion(int docId, IntPtr pConstExtrusion, IntPtr pConstAttributes);

  //ON_UUID CRhinoDoc_AddMesh(int docId, const ON_Mesh* pMesh, const ON_3dmObjectAttributes* attr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddMesh(int docId, IntPtr pMesh, IntPtr attr);

  //ON_UUID CRhinoDoc_AddTextDot(int docId, ON_TextDot* pDot, const ON_3dmObjectAttributes* attrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddTextDot(int docId, IntPtr pDot, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddText(int docId, const RHMONO_STRING* _text, const ON_PLANE_STRUCT* plane, double height, const RHMONO_STRING* _fontName, int fontStyle, const ON_3dmObjectAttributes* attrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddText(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _text, ref Plane plane, double height, [MarshalAs(UnmanagedType.LPWStr)]string _fontName, int fontStyle, IntPtr attrs);

  //ON_UUID CRhinoDoc_AddBrep(int docId, const ON_Brep* pBrep, const ON_3dmObjectAttributes* attr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddBrep(int docId, IntPtr pBrep, IntPtr attr);

  //ON_UUID CRhinoDoc_AddLeader(int docId, const RHMONO_STRING* _text, const ON_PLANE_STRUCT* plane, int count, /*ARRAY*/const ON_2dPoint* points2d, const CRhinoObjectAttributes* pAttrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddLeader(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _text, ref Plane plane, int count, Point2d[] points2d, IntPtr pAttrs);

  //ON_UUID CRhinoDoc_AddHatch(int docId, const ON_Hatch* pConstHatch, const ON_3dmObjectAttributes* attrs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddHatch(int docId, IntPtr pConstHatch, IntPtr attrs);

  //CRhinoView* CRhinoDoc_ActiveView(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ActiveView(int docId);

  //void CRhinoDoc_SetActiveView(int docId, CRhinoView* pRhinoView)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_SetActiveView(int docId, IntPtr pRhinoView);

  //void CRhinoDoc_ViewLayout(int docId, int which, bool useMatchingViews)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_ViewLayout(int docId, int which, [MarshalAs(UnmanagedType.U1)]bool useMatchingViews);

  //int CRhinoDoc_UnselectAll(int docId, bool ignorePersistentSelections)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDoc_UnselectAll(int docId, [MarshalAs(UnmanagedType.U1)]bool ignorePersistentSelections);

  //const CRhinoObject* CRhinoDoc_LookupObject(int docId, ON_UUID objectId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_LookupObject(int docId, Guid objectId);

  //int CRhinoDoc_LookupObjectsByGroup(int docId, int groupIndex, ON_SimpleArray<CRhinoObject*>* pObjectArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDoc_LookupObjectsByGroup(int docId, int groupIndex, IntPtr pObjectArray);

  //int CRhinoDoc_LookupObjectsByLayer(int docId, int layerIndex, ON_SimpleArray<CRhinoObject*>* pObjectArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDoc_LookupObjectsByLayer(int docId, int layerIndex, IntPtr pObjectArray);

  //const CRhinoObject* CRhinoDoc_LookupObjectByRuntimeSerialNumber(int docId, unsigned int runtimeSerialNumber)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_LookupObjectByRuntimeSerialNumber(int docId, uint runtimeSerialNumber);

  //bool CRhinoDoc_SetObjectState( int docId, const CRhinoObjRef* pObjRef, bool ignoreLayerMode, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_SetObjectState(int docId, IntPtr pObjRef, [MarshalAs(UnmanagedType.U1)]bool ignoreLayerMode, int which);

  //bool CRhinoDoc_DeleteObject( int docId, const CRhinoObjRef* pObjRef, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_DeleteObject(int docId, IntPtr pObjRef, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //bool CRhinoDoc_ModifyObjectAttributes(int docId, const CRhinoObjRef* pObjRef, const CRhinoObjectAttributes* pAttrs, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_ModifyObjectAttributes(int docId, IntPtr pObjRef, IntPtr pAttrs, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //bool CRhinoDoc_ReplaceTextDot(int docId, const CRhinoObjRef* pObjRef, const ON_TextDot* pDot)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_ReplaceTextDot(int docId, IntPtr pObjRef, IntPtr pDot);

  //bool CRhinoDoc_ReplaceTextEntity(int docId, const CRhinoObjRef* pObjRef, const ON_TextEntity2* pText)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_ReplaceTextEntity(int docId, IntPtr pObjRef, IntPtr pText);

  //const CRhinoPointObject* CRhinoDoc_ReplaceObject2(int docId, const CRhinoObjRef* pObjRef, ON_3DPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ReplaceObject2(int docId, IntPtr pObjRef, Point3d point);

  //const CRhinoCurveObject* CRhinoDoc_ReplaceObject3(int docId, const CRhinoObjRef* pObjRef, const ON_Curve* pCurve)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ReplaceObject3(int docId, IntPtr pObjRef, IntPtr pCurve);

  //const CRhinoSurfaceObject* CRhinoDoc_ReplaceObject4(int docId, const CRhinoObjRef* pObjRef, const ON_Surface* pSurface)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ReplaceObject4(int docId, IntPtr pObjRef, IntPtr pSurface);

  //const CRhinoBrepObject* CRhinoDoc_ReplaceObject5(int docId, const CRhinoObjRef* pObjRef, const ON_Brep* pBrep)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ReplaceObject5(int docId, IntPtr pObjRef, IntPtr pBrep);

  //const CRhinoMeshObject* CRhinoDoc_ReplaceObject6(int docId, const CRhinoObjRef* pObjRef, const ON_Mesh* pMesh)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_ReplaceObject6(int docId, IntPtr pObjRef, IntPtr pMesh);

  //ON_UUID CRhinoDoc_TransformObject(int docId, CRhinoObjRef* pObjRef, const ON_Xform* xform, bool deleteOriginal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_TransformObject(int docId, IntPtr pObjRef, ref Transform xform, [MarshalAs(UnmanagedType.U1)]bool deleteOriginal);

  //ON_UUID CRhinoDoc_AddInstanceObject(int docId, int instanceDefinitionIndex, ON_Xform* instanceXform, const ON_3dmObjectAttributes* pAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoDoc_AddInstanceObject(int docId, int instanceDefinitionIndex, ref Transform instanceXform, IntPtr pAttributes);

  //CRhinoObjectIterator* CRhinoObjectIterator_New(int docId,
  //                                                             int os,
  //                                                             int cat)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjectIterator_New(int docId, int os, int cat);

  //bool CRhinoDoc_BoundingBox(int docId, ON_3dPoint* min, ON_3dPoint* max, bool onlyVisible)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_BoundingBox(int docId, ref Point3d min, ref Point3d max, [MarshalAs(UnmanagedType.U1)]bool onlyVisible);

  //void CRhinoObjectIterator_Delete(CRhinoObjectIterator* pRhinoObjectIterator)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoObjectIterator_Delete(IntPtr pRhinoObjectIterator);

  //int CRhinoObjectIterator_Count(CRhinoObjectIterator* pRhinoObjectIterator, const RHMONO_STRING* _namefilter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObjectIterator_Count(IntPtr pRhinoObjectIterator, [MarshalAs(UnmanagedType.LPWStr)]string _namefilter);

  //CRhinoObject* CRhinoObjectIterator_FirstNext(CRhinoObjectIterator* pRhinoObjectIterator, bool first, const RHMONO_STRING* _namefilter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjectIterator_FirstNext(IntPtr pRhinoObjectIterator, [MarshalAs(UnmanagedType.U1)]bool first, [MarshalAs(UnmanagedType.LPWStr)]string _namefilter);

  //void CRhinoObjectIterator_Initialize( CRhinoObjectIterator* pIterator,
  //                                                    bool includeLights,
  //                                                    bool includeGrips,
  //                                                    bool includePhantoms,
  //                                                    bool selectedObjects,
  //                                                    bool checkSubObjects,
  //                                                    bool visibleFilter,
  //                                                    unsigned int objectfilter,
  //                                                    int layerIndexFilter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoObjectIterator_Initialize(IntPtr pIterator, [MarshalAs(UnmanagedType.U1)]bool includeLights, [MarshalAs(UnmanagedType.U1)]bool includeGrips, [MarshalAs(UnmanagedType.U1)]bool includePhantoms, [MarshalAs(UnmanagedType.U1)]bool selectedObjects, [MarshalAs(UnmanagedType.U1)]bool checkSubObjects, [MarshalAs(UnmanagedType.U1)]bool visibleFilter, uint objectfilter, int layerIndexFilter);

  //HBITMAP CRhinoDib_Bitmap(const CRhinoDib* pDib)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDib_Bitmap(IntPtr pDib);

  //void CRhinoDib_Delete(CRhinoDib* pDib)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDib_Delete(IntPtr pDib);

  //int CRhinoDoc_GetDocTextCount(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDoc_GetDocTextCount(int docId);

  //void CRhinoDoc_GetDocTextString(int docId, int index, bool bKey, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_GetDocTextString(int docId, int index, [MarshalAs(UnmanagedType.U1)]bool bKey, IntPtr pString);

  //void CRhinoDoc_GetDocTextString2(int docId, const RHMONO_STRING* key, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_GetDocTextString2(int docId, [MarshalAs(UnmanagedType.LPWStr)]string key, IntPtr pString);

  //void CRhinoDoc_SetDocTextString(int docId, const RHMONO_STRING* key, const RHMONO_STRING* value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_SetDocTextString(int docId, [MarshalAs(UnmanagedType.LPWStr)]string key, [MarshalAs(UnmanagedType.LPWStr)]string value);

  //void CRhinoDoc_FlashObjectList(int doc_id, ON_SimpleArray<const CRhinoObject*>* list, bool useSelectionColor)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDoc_FlashObjectList(int doc_id, IntPtr list, [MarshalAs(UnmanagedType.U1)]bool useSelectionColor);
  #endregion


  #region rh_docproperties.cpp
  //const RHMONO_STRING* CRhinoDoc_GetSetString( int docId, int which, bool set, const RHMONO_STRING* _str )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDoc_GetSetString(int docId, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.LPWStr)]string _str);

  //double CRhinoDocProperties_GetSetDouble( int docId, int which, bool set, double set_val )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double CRhinoDocProperties_GetSetDouble(int docId, int which, [MarshalAs(UnmanagedType.U1)]bool set, double set_val);

  //int CRhinoDocProperties_DistanceDisplayPrecision(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_DistanceDisplayPrecision(int docId);

  //bool CRhinoDoc_GetSetBool( int docId, int which, bool set, bool set_value )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDoc_GetSetBool(int docId, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_value);

  //int CRhinoDocProperties_ReadFileVersion(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_ReadFileVersion(int docId);

  //int CRhinoDocProperties_GetSetUnitSystem(int docId, bool model, bool set, int set_val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_GetSetUnitSystem(int docId, [MarshalAs(UnmanagedType.U1)]bool model, [MarshalAs(UnmanagedType.U1)]bool set, int set_val);

  //void CRhinoDocProperties_GetUnitSystemName(int docId, bool modelUnits, bool capitalize, bool singular, bool abbreviate, CRhCmnStringHolder* pString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDocProperties_GetUnitSystemName(int docId, [MarshalAs(UnmanagedType.U1)]bool modelUnits, [MarshalAs(UnmanagedType.U1)]bool capitalize, [MarshalAs(UnmanagedType.U1)]bool singular, [MarshalAs(UnmanagedType.U1)]bool abbreviate, IntPtr pString);

  //void CRhinoDocProperties_AdjustUnitSystem(int docId, bool model, int us, bool scale)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDocProperties_AdjustUnitSystem(int docId, [MarshalAs(UnmanagedType.U1)]bool model, int us, [MarshalAs(UnmanagedType.U1)]bool scale);

  //int CRhinoDocProperties_CPlaneCount(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_CPlaneCount(int docId);

  //const ON_3dmConstructionPlane* CRhinoDocProperties_GetCPlane(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDocProperties_GetCPlane(int docId, int index);

  //int CRhinoDocProperties_FindCPlane(int docId, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_FindCPlane(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //int CRhinoDocProperties_AddCPlane(int docId, const RHMONO_STRING* _name, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_AddCPlane(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _name, ref Plane plane);

  //bool CRhinoDocProperties_RemoveCPlane(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDocProperties_RemoveCPlane(int docId, int index);

  //int CRhinoDocProperties_NamedViewCount(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_NamedViewCount(int docId);

  //const ON_3dmView* CRhinoDocProperties_GetNamedView(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDocProperties_GetNamedView(int docId, int index);

  //int CRhinoDocProperties_AddNamedView(int docId, const RHMONO_STRING* _name, ON_UUID viewportId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_AddNamedView(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _name, Guid viewportId);

  //int CRhinoDocProperties_FindNamedView(int docId, const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoDocProperties_FindNamedView(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _name);

  //bool CRhinoDocProperties_RemoveNamedView(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDocProperties_RemoveNamedView(int docId, int index);
  #endregion


  #region rh_eventwatcher.cpp
  //void CRhinoEventWatcher_SetInitAppCallback(APPEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetCloseAppCallback(APPEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetCloseDocumentCallback(DOCEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetNewDocumentCallback(DOCEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetBeginOpenDocumentCallback(DOCEVENTIOPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetEndOpenDocumentCallback(DOCEVENTIOPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetBeginSaveDocumentCallback(DOCEVENTIOPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetEndSaveDocumentCallback(DOCEVENTIOPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetDocPropChangeCallback(DOCEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetAppSettingsChangeCallback(APPEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetCreateViewCallback(VIEWEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetDestroyViewCallback(VIEWEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetActiveViewCallback(VIEWEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetRenameViewCallback(VIEWEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetBeginCommandCallback(CMDEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetEndCommandCallback(CMDEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetAddObjectCallback(OBJEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetDeleteObjectCallback(OBJEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetReplaceObjectCallback(OBJEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetUnDeleteObjectCallback(OBJEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetPurgeObjectCallback(OBJEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoEventWatcher_SetUndoEventCallback(UNDOEVENTPROC cb, REPORTPROC report)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //ON_UUID CRhinoEventWatcher_LastCommandId()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoEventWatcher_LastCommandId();

  //int CRhinoEventWatcher_LastCommandResult()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoEventWatcher_LastCommandResult();

  //void CRhinoEventWatcher_LogState( const RHMONO_STRING* _str )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoEventWatcher_LogState([MarshalAs(UnmanagedType.LPWStr)]string _str);
  #endregion


  #region rh_font.cpp
  //const RHMONO_STRING* CRhinoFont_FaceName( int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoFont_FaceName(int docId, int index);

  //bool CRhinoFont_GetBool(int docId, int index, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoFont_GetBool(int docId, int index, int which);

  //int CRhinoFontTable_FontCount(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoFontTable_FontCount(int docId);

  //int CRhinoFontTable_FindOrCreate(int docId, const RHMONO_STRING* _facename, bool bold, bool italic)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoFontTable_FindOrCreate(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _facename, [MarshalAs(UnmanagedType.U1)]bool bold, [MarshalAs(UnmanagedType.U1)]bool italic);
  #endregion


  #region rh_get.cpp
  //void CRhinoGet_Delete(CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_Delete(IntPtr ptr);

  //unsigned int RhinoSdkGet_RhinoGetPoint( const RHMONO_STRING* _prompt, bool acceptnothing, ON_3dPoint* pt )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RhinoSdkGet_RhinoGetPoint([MarshalAs(UnmanagedType.LPWStr)]string _prompt, [MarshalAs(UnmanagedType.U1)]bool acceptnothing, ref Point3d pt);

  //unsigned int RhinoSdkGet_RhinoGetColor( const RHMONO_STRING* _prompt, bool acceptnothing, int* argb, bool setDefault )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RhinoSdkGet_RhinoGetColor([MarshalAs(UnmanagedType.LPWStr)]string _prompt, [MarshalAs(UnmanagedType.U1)]bool acceptnothing, ref int argb, [MarshalAs(UnmanagedType.U1)]bool setDefault);

  //const RHMONO_STRING* RhinoSdkGet_RhinoGetString( const RHMONO_STRING* _prompt, bool acceptnothing, const RHMONO_STRING* _defaultstr, unsigned int* rc )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhinoSdkGet_RhinoGetString([MarshalAs(UnmanagedType.LPWStr)]string _prompt, [MarshalAs(UnmanagedType.U1)]bool acceptnothing, [MarshalAs(UnmanagedType.LPWStr)]string _defaultstr, ref uint rc);

  //unsigned int RhinoSdkGet_RhinoGetNumber( const RHMONO_STRING* _prompt, bool acceptnothing, bool isInteger, double* outputNumber, double lowerlim, double upperlim)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RhinoSdkGet_RhinoGetNumber([MarshalAs(UnmanagedType.LPWStr)]string _prompt, [MarshalAs(UnmanagedType.U1)]bool acceptnothing, [MarshalAs(UnmanagedType.U1)]bool isInteger, ref double outputNumber, double lowerlim, double upperlim);

  //bool CRhinoGet_IsValidName( const RHMONO_STRING* _str, bool optionName)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGet_IsValidName([MarshalAs(UnmanagedType.LPWStr)]string _str, [MarshalAs(UnmanagedType.U1)]bool optionName);

  //void CRhinoGet_SetString( CRhinoGet* pGet, const RHMONO_STRING* _str, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_SetString(IntPtr pGet, [MarshalAs(UnmanagedType.LPWStr)]string _str, int which);

  //void CRhinoGet_SetDefaultPoint( CRhinoGet* pGet, ON_3DPOINT_STRUCT point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_SetDefaultPoint(IntPtr pGet, Point3d point);

  //void CRhinoGet_SetDefaultNumber( CRhinoGet* pGet, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_SetDefaultNumber(IntPtr pGet, double val);

  //void CRhinoGet_SetDefaultInteger( CRhinoGet* pGet, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_SetDefaultInteger(IntPtr pGet, int val);

  //void CRhinoGet_SetDefaultColor( CRhinoGet* ptr, int argb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_SetDefaultColor(IntPtr ptr, int argb);

  //void CRhinoGet_SetWaitDuration( CRhinoGet* ptr, double seconds)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_SetWaitDuration(IntPtr ptr, double seconds);

  //void CRhinoGet_ClearDefault( CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_ClearDefault(IntPtr ptr);

  //bool CRhinoGet_GotDefault( const CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGet_GotDefault(IntPtr ptr);

  //unsigned int CRhinoGet_CommandResult( const CRhinoGet* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoGet_CommandResult(IntPtr ptr);

  //void CRhinoGet_Point( const CRhinoGet* ptr, ON_3dPoint* pt )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_Point(IntPtr ptr, ref Point3d pt);

  //void CRhinoGet_SetBool(CRhinoGet* ptr, int which, bool b)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_SetBool(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool b);

  //void CRhinoGet_AcceptNumber(CRhinoGet* ptr, bool enable, bool acceptZero)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_AcceptNumber(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool enable, [MarshalAs(UnmanagedType.U1)]bool acceptZero);

  //unsigned int CRhinoGet_Result(const CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoGet_Result(IntPtr ptr);

  //double CRhinoGet_Number(const CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double CRhinoGet_Number(IntPtr ptr);

  //const RHMONO_STRING* CRhinoGet_String(const CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGet_String(IntPtr ptr);

  //void CRhinoGet_Vector(const CRhinoGet* ptr, ON_3dVector* rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_Vector(IntPtr ptr, ref Vector3d rc);

  //unsigned int CRhinoGet_Color(const CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoGet_Color(IntPtr ptr);

  //CRhinoView* CRhinoGet_View(const CRhinoGet* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGet_View(IntPtr ptr);

  //void CRhinoGet_GetRectangle( const CRhinoGet* ptr, int* lrtb, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_GetRectangle(IntPtr ptr, ref int lrtb, int which);

  //void CRhinoGet_Point2d( const CRhinoGet* ptr, int* x, int* y)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_Point2d(IntPtr ptr, ref int x, ref int y);

  //void CRhinoGet_Line2d( const CRhinoGet* ptr, int* x0, int* y0, int* x1, int* y1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_Line2d(IntPtr ptr, ref int x0, ref int y0, ref int x1, ref int y1);

  //int CRhinoGet_AddCommandOption( CRhinoGet* pRhinoGet, const RHMONO_STRING* _option, const RHMONO_STRING* _optionval, bool hiddenOption)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGet_AddCommandOption(IntPtr pRhinoGet, [MarshalAs(UnmanagedType.LPWStr)]string _option, [MarshalAs(UnmanagedType.LPWStr)]string _optionval, [MarshalAs(UnmanagedType.U1)]bool hiddenOption);

  //int CRhinoGet_AddCommandOptionList(CRhinoGet* pRhinoGet, const RHMONO_STRING* english_name, ON_ClassArray<ON_wString>* pStrings, int listIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGet_AddCommandOptionList(IntPtr pRhinoGet, [MarshalAs(UnmanagedType.LPWStr)]string english_name, IntPtr pStrings, int listIndex);

  //CRhCommonOptionHolder* CRhCommonOptionHolder_New(double dVal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhCommonOptionHolder_New(double dVal);

  //CRhCommonOptionHolder* CRhCommonOptionHolder_New2(int iVal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhCommonOptionHolder_New2(int iVal);

  //CRhCommonOptionHolder* CRhCommonOptionHolder_New3(bool bVal)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhCommonOptionHolder_New3([MarshalAs(UnmanagedType.U1)]bool bVal);

  //void CRhCommonOptionHolder_Delete(CRhCommonOptionHolder* pHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhCommonOptionHolder_Delete(IntPtr pHolder);

  //double CRhCommonOptionHolder_Double(CRhCommonOptionHolder* pHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double CRhCommonOptionHolder_Double(IntPtr pHolder);

  //void CRhCommonOptionHolder_SetDouble(CRhCommonOptionHolder* pHolder, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhCommonOptionHolder_SetDouble(IntPtr pHolder, double val);

  //int CRhCommonOptionHolder_Integer(CRhCommonOptionHolder* pHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhCommonOptionHolder_Integer(IntPtr pHolder);

  //void CRhCommonOptionHolder_SetInt(CRhCommonOptionHolder* pHolder, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhCommonOptionHolder_SetInt(IntPtr pHolder, int val);

  //bool CRhCommonOptionHolder_Bool(CRhCommonOptionHolder* pHolder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhCommonOptionHolder_Bool(IntPtr pHolder);

  //void CRhCommonOptionHolder_SetBool(CRhCommonOptionHolder* pHolder, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhCommonOptionHolder_SetBool(IntPtr pHolder, [MarshalAs(UnmanagedType.U1)]bool val);

  //int CRhinoGet_AddCommandOption3( CRhinoGet* pRhinoGet, const RHMONO_STRING* _englishName, CRhCommonOptionHolder* pHolder, double lowerLimit, double upperLimit, const RHMONO_STRING* _prompt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGet_AddCommandOption3(IntPtr pRhinoGet, [MarshalAs(UnmanagedType.LPWStr)]string _englishName, IntPtr pHolder, double lowerLimit, double upperLimit, [MarshalAs(UnmanagedType.LPWStr)]string _prompt);

  //int CRhinoGet_AddCommandOption4( CRhinoGet* pRhinoGet, const RHMONO_STRING* _englishName, CRhCommonOptionHolder* pHolder, double lowerLimit, double upperLimit, const RHMONO_STRING* _prompt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGet_AddCommandOption4(IntPtr pRhinoGet, [MarshalAs(UnmanagedType.LPWStr)]string _englishName, IntPtr pHolder, double lowerLimit, double upperLimit, [MarshalAs(UnmanagedType.LPWStr)]string _prompt);

  //void CRhinoGet_ClearCommandOptions( CRhinoGet* pRhinoGet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGet_ClearCommandOptions(IntPtr pRhinoGet);

  //const CRhinoCommandOption* CRhinoGet_Option(const CRhinoGet* pRhinoGet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGet_Option(IntPtr pRhinoGet);

  //int CRhinoCommandOption_OptionIndex(const CRhinoCommandOption* pOption)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoCommandOption_OptionIndex(IntPtr pOption);

  //const RHMONO_STRING* CRhinoCommandOption_EnglishName(const CRhinoCommandOption* pOption)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoCommandOption_EnglishName(IntPtr pOption);

  //int CRhinoGet_AddCommandOptionToggle(CRhinoGet* pRhinoGet, CRhCommonOptionHolder* pHolder,
  //                                                   const RHMONO_STRING* _englishName, 
  //                                                   const RHMONO_STRING* _offValue, 
  //                                                   const RHMONO_STRING* _onValue)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGet_AddCommandOptionToggle(IntPtr pRhinoGet, IntPtr pHolder, [MarshalAs(UnmanagedType.LPWStr)]string _englishName, [MarshalAs(UnmanagedType.LPWStr)]string _offValue, [MarshalAs(UnmanagedType.LPWStr)]string _onValue);

  //unsigned int RHC_RhinoGetSpiralHelix( ON_NurbsCurve* curve, bool spiral )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RHC_RhinoGetSpiralHelix(IntPtr curve, [MarshalAs(UnmanagedType.U1)]bool spiral);

  //unsigned int RHC_RhinoGetLine( ON_Line* line )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RHC_RhinoGetLine(ref Line line);

  //unsigned int RHC_RhinoGetArc( ON_Arc* arc )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RHC_RhinoGetArc(ref Arc arc);

  //unsigned int RHC_RhinoGetCircle( ON_CIRCLE_STRUCT* circle )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RHC_RhinoGetCircle(ref Circle circle);
  #endregion


  #region rh_getdimlinear.cpp
  //ON_LinearDimension2* RHC_RhinoGetDimLinear(unsigned int* command_rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoGetDimLinear(ref uint command_rc);
  #endregion


  #region rh_getfiledialog.cpp
  //CRhCmnFileDialog* CRhinoUiFileDialog_NewOpen( const RHMONO_STRING* _default_ext,
  //                                                            const RHMONO_STRING* _filename,
  //                                                            const RHMONO_STRING* _filter,
  //                                                            const RHMONO_STRING* _initDir,
  //                                                            const RHMONO_STRING* _title)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoUiFileDialog_NewOpen([MarshalAs(UnmanagedType.LPWStr)]string _default_ext, [MarshalAs(UnmanagedType.LPWStr)]string _filename, [MarshalAs(UnmanagedType.LPWStr)]string _filter, [MarshalAs(UnmanagedType.LPWStr)]string _initDir, [MarshalAs(UnmanagedType.LPWStr)]string _title);

  //CRhCmnFileDialog* CRhinoUiFileDialog_NewSave( const RHMONO_STRING* _default_ext,
  //                                                              const RHMONO_STRING* _filename,
  //                                                              const RHMONO_STRING* _filter,
  //                                                              const RHMONO_STRING* _initDir,
  //                                                              const RHMONO_STRING* _title)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoUiFileDialog_NewSave([MarshalAs(UnmanagedType.LPWStr)]string _default_ext, [MarshalAs(UnmanagedType.LPWStr)]string _filename, [MarshalAs(UnmanagedType.LPWStr)]string _filter, [MarshalAs(UnmanagedType.LPWStr)]string _initDir, [MarshalAs(UnmanagedType.LPWStr)]string _title);

  //void CRhinoUiFileDialog_Delete(CRhCmnFileDialog* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoUiFileDialog_Delete(IntPtr ptr);

  //int CRhinoUiFileDialog_Show(CRhCmnFileDialog* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoUiFileDialog_Show(IntPtr ptr);

  //const RHMONO_STRING* CRhinoUiFileDialog_Filename(CRhCmnFileDialog* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoUiFileDialog_Filename(IntPtr ptr);
  #endregion


  #region rh_getobject.cpp
  //CRhinoGetObject* CRhinoGetObject_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGetObject_New();

  //unsigned int CRhinoGetObject_GetSetGeometryFilter(CRhinoGetObject* ptr, bool set, unsigned int set_val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoGetObject_GetSetGeometryFilter(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, uint set_val);

  //unsigned int CRhinoGetObject_GetSetGeometryAttrFilter(CRhinoGetObject* ptr, bool set, unsigned int set_val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoGetObject_GetSetGeometryAttrFilter(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, uint set_val);

  //bool CRhinoGetObject_PassesGeometryAttributeFilter( CRhinoGetObject* ptr,
  //                                                                     const CRhinoObject* pRhinoObject,
  //                                                                     const ON_Geometry* pGeometry,
  //                                                                     ON_2INTS ci )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetObject_PassesGeometryAttributeFilter(IntPtr ptr, IntPtr pRhinoObject, IntPtr pGeometry, ComponentIndex ci);

  //void CRhinoGetObject_EnablePreSelect( CRhinoGetObject* ptr, bool enable, bool ignore )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetObject_EnablePreSelect(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool enable, [MarshalAs(UnmanagedType.U1)]bool ignore);

  //bool CRhinoGetObject_GetSetBool( CRhinoGetObject* ptr, int which, bool set, bool set_val )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetObject_GetSetBool(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]bool set_val);

  //void CRhinoGetObject_SetPressEnterWhenDonePrompt( CRhinoGetObject* ptr, const RHMONO_STRING* _prompt )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetObject_SetPressEnterWhenDonePrompt(IntPtr ptr, [MarshalAs(UnmanagedType.LPWStr)]string _prompt);

  //unsigned int CRhinoGetObject_GetObjects( CRhinoGetObject* ptr, int min, int max, GEOMETRYFILTERPROC fn )
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //int CRhinoGetObject_ObjectCount( CRhinoGetObject* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGetObject_ObjectCount(IntPtr ptr);

  //void CRhinoGetObject_Object( CRhinoGetObject* ptr, int index, CRhinoObjRef* pObjRef )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetObject_Object(IntPtr ptr, int index, IntPtr pObjRef);

  //unsigned int CRhinoGetObject_SerialNumber( CRhinoGetObject* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoGetObject_SerialNumber(IntPtr ptr);
  #endregion


  #region rh_getplane.cpp
  //CArgsRhinoGetPlane* CArgsRhinoGetPlane_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CArgsRhinoGetPlane_New();

  //void CArgsRhinoGetPlane_Delete(CArgsRhinoGetPlane* pArgs)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CArgsRhinoGetPlane_Delete(IntPtr pArgs);

  //void CArgsRhinoGetPlane_SetMode(CArgsRhinoGetPlane* pArgs, int mode)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CArgsRhinoGetPlane_SetMode(IntPtr pArgs, int mode);

  //void CArgsRhinoGetPlane_SetFirstPoint(CArgsRhinoGetPlane* pArgs, ON_3DPOINT_STRUCT pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CArgsRhinoGetPlane_SetFirstPoint(IntPtr pArgs, Point3d pt);

  //void CArgsRhinoGetPlane_SetPrompt(CArgsRhinoGetPlane* pArgs, RHMONO_STRING* prompt, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CArgsRhinoGetPlane_SetPrompt(IntPtr pArgs, [MarshalAs(UnmanagedType.LPWStr)]string prompt, int i);

  //unsigned int RHC_RhinoGetPlane( ON_PLANE_STRUCT* plane )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RHC_RhinoGetPlane(ref Plane plane);

  //unsigned int RHC_RhinoGetRectangle( /*ARRAY*/ON_3dPoint* corners, CArgsRhinoGetPlane* pGetPlaneArgs )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RHC_RhinoGetRectangle([In,Out] Point3d[] corners, IntPtr pGetPlaneArgs);

  //CRhinoView* RHC_RhinoGet2dRectangle(int* left, int* top, int* right, int* bottom, int penstyle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoGet2dRectangle(ref int left, ref int top, ref int right, ref int bottom, int penstyle);

  //ON_PlaneSurface* RHC_RhinoPlaneThroughBox( ON_Line* line, ON_3DVECTOR_STRUCT normal, ON_BoundingBox* bbox )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoPlaneThroughBox(ref Line line, Vector3d normal, ref BoundingBox bbox);

  //ON_PlaneSurface* RHC_RhinoPlaneThroughBox2( const ON_PLANE_STRUCT* plane, ON_BoundingBox* bbox )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoPlaneThroughBox2(ref Plane plane, ref BoundingBox bbox);

  //unsigned int RHC_RhinoGetBox(/*ARRAY*/ON_3dPoint* corners,
  //                                           int mode,
  //                                           ON_3DPOINT_STRUCT _basepoint,
  //                                           const RHMONO_STRING* _prompt1,
  //                                           const RHMONO_STRING* _prompt2,
  //                                           const RHMONO_STRING* _prompt3)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint RHC_RhinoGetBox([In,Out] Point3d[] corners, int mode, Point3d _basepoint, [MarshalAs(UnmanagedType.LPWStr)]string _prompt1, [MarshalAs(UnmanagedType.LPWStr)]string _prompt2, [MarshalAs(UnmanagedType.LPWStr)]string _prompt3);
  #endregion


  #region rh_getpoint.cpp
  //CRhinoGetPoint* CRhinoGetPoint_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGetPoint_New();

  //void CRhinoGetPoint_SetBasePoint(CRhinoGetPoint* ptr, ON_3DPOINT_STRUCT basePoint, bool showDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_SetBasePoint(IntPtr ptr, Point3d basePoint, [MarshalAs(UnmanagedType.U1)]bool showDistance);

  //bool CRhinoGetPoint_GetBasePoint(const CRhinoGetPoint* pConstGetPoint, ON_3dPoint* basePoint )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_GetBasePoint(IntPtr pConstGetPoint, ref Point3d basePoint);

  //void CRhinoGetPoint_ConstrainDistanceFromBasePoint(CRhinoGetPoint* ptr, double distance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_ConstrainDistanceFromBasePoint(IntPtr ptr, double distance);

  //void CRhinoGetPoint_DynamicDrawColor(CRhinoGetPoint* ptr, int* argb, bool set)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_DynamicDrawColor(IntPtr ptr, ref int argb, [MarshalAs(UnmanagedType.U1)]bool set);

  //void CRhinoGetPoint_DrawLineFromPoint(CRhinoGetPoint* ptr, ON_3DPOINT_STRUCT pt, bool showDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_DrawLineFromPoint(IntPtr ptr, Point3d pt, [MarshalAs(UnmanagedType.U1)]bool showDistance);

  //void CRhinoGetPoint_EnableItem(CRhinoGetPoint* ptr, int which, bool enable)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_EnableItem(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool enable);

  //void CRhinoGetPoint_EnableItem2(CRhinoGetPoint* ptr, int which, bool enable0, bool enable1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_EnableItem2(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool enable0, [MarshalAs(UnmanagedType.U1)]bool enable1);

  //void CRhinoGetPoint_PermitElevatorMode(CRhinoGetPoint* ptr, int mode)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_PermitElevatorMode(IntPtr ptr, int mode);

  //int CRhinoGetPoint_AddSnapPoints(CRhinoGetPoint* ptr, int count, /*ARRAY*/const ON_3dPoint* points, bool snap)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGetPoint_AddSnapPoints(IntPtr ptr, int count, Point3d[] points, [MarshalAs(UnmanagedType.U1)]bool snap);

  //void CRhinoGetPoint_ClearSnapPoints(CRhinoGetPoint* ptr, bool snap)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_ClearSnapPoints(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool snap);

  //void CRhinoGetPoint_GetSnapPoints(const CRhinoGetPoint* ptr, ON_SimpleArray<ON_3dPoint>* pArray, bool snap)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_GetSnapPoints(IntPtr ptr, IntPtr pArray, [MarshalAs(UnmanagedType.U1)]bool snap);

  //bool CRhinoGetPoint_Constrain1(CRhinoGetPoint* ptr, ON_3DPOINT_STRUCT from, ON_3DPOINT_STRUCT to)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain1(IntPtr ptr, Point3d from, Point3d to);

  //bool CRhinoGetPoint_Constrain2(CRhinoGetPoint* ptr, ON_Arc* arc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain2(IntPtr ptr, ref Arc arc);

  //bool CRhinoGetPoint_Constrain3(CRhinoGetPoint* ptr, const ON_CIRCLE_STRUCT* pCircle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain3(IntPtr ptr, ref Circle pCircle);

  //bool CRhinoGetPoint_Constrain4(CRhinoGetPoint* ptr, const ON_PLANE_STRUCT* plane, bool allowElevator)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain4(IntPtr ptr, ref Plane plane, [MarshalAs(UnmanagedType.U1)]bool allowElevator);

  //bool CRhinoGetPoint_Constrain5(CRhinoGetPoint* ptr, const ON_Sphere* sphere)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain5(IntPtr ptr, ref Sphere sphere);

  //bool CRhinoGetPoint_Constrain6(CRhinoGetPoint* ptr, const ON_Cylinder* cylinder)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain6(IntPtr ptr, ref Cylinder cylinder);

  //bool CRhinoGetPoint_Constrain7(CRhinoGetPoint* ptr, const ON_Curve* pCurve, bool allowPickingPointOffObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain7(IntPtr ptr, IntPtr pCurve, [MarshalAs(UnmanagedType.U1)]bool allowPickingPointOffObject);

  //bool CRhinoGetPoint_Constrain8(CRhinoGetPoint* ptr, const ON_Surface* pSurface, bool allowPickingPointOffObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain8(IntPtr ptr, IntPtr pSurface, [MarshalAs(UnmanagedType.U1)]bool allowPickingPointOffObject);

  //bool CRhinoGetPoint_Constrain9(CRhinoGetPoint* ptr, const ON_Brep* pBrep, int wireDensity, int faceIndex, bool allowPickingPointOffObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_Constrain9(IntPtr ptr, IntPtr pBrep, int wireDensity, int faceIndex, [MarshalAs(UnmanagedType.U1)]bool allowPickingPointOffObject);

  //bool CRhinoGetPoint_ConstrainToConstructionPlane(CRhinoGetPoint* ptr, bool throughBasePoint)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_ConstrainToConstructionPlane(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool throughBasePoint);

  //bool CRhinoGetPoint_ConstrainToVirtualCPlaneIntersection(CRhinoGetPoint* ptr, const ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_ConstrainToVirtualCPlaneIntersection(IntPtr ptr, ref Plane plane);

  //void CRhinoGetPoint_ClearConstraints(CRhinoGetPoint* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetPoint_ClearConstraints(IntPtr ptr);

  //bool CRhinoGetPoint_InterruptMouseMose(const CRhinoGetPoint* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_InterruptMouseMose(IntPtr ptr);

  //unsigned int CRhinoGetPoint_GetPoint(CRhinoGetPoint* ptr, bool onMouseUp, GETPOINTMOUSEPROC mouseCB, GETPOINTDRAWPROC drawCB)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //bool CRhinoGetPoint_PointOnObject(const CRhinoGetPoint* ptr, CRhinoObjRef* pObjRef)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGetPoint_PointOnObject(IntPtr ptr, IntPtr pObjRef);
  #endregion


  #region rh_getstring.cpp
  //CRhinoGetString* CRhinoGetString_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGetString_New();

  //int CRhinoGetString_Get(CRhinoGetString* ptr, bool literalString)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGetString_Get(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool literalString);

  //CRhinoGetOption* CRhinoGetOption_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGetOption_New();

  //int CRhinoGetOption_Get(CRhinoGetOption* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGetOption_Get(IntPtr ptr);

  //CRhinoGetNumber* CRhinoGetNumber_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGetNumber_New();

  //int CRhinoGetNumber_Get(CRhinoGetNumber* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGetNumber_Get(IntPtr ptr);

  //void CRhinoGetNumber_SetLimit(CRhinoGetNumber* ptr, double limit, bool strict, bool lower)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetNumber_SetLimit(IntPtr ptr, double limit, [MarshalAs(UnmanagedType.U1)]bool strict, [MarshalAs(UnmanagedType.U1)]bool lower);

  //CRhinoGetInteger* CRhinoGetInteger_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGetInteger_New();

  //int CRhinoGetInteger_Get(CRhinoGetInteger* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGetInteger_Get(IntPtr ptr);

  //int CRhinoGetInteger_Number(CRhinoGetInteger* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGetInteger_Number(IntPtr ptr);

  //void CRhinoGetInteger_SetLimit(CRhinoGetInteger* ptr, int limit, bool strict, bool lower)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGetInteger_SetLimit(IntPtr ptr, int limit, [MarshalAs(UnmanagedType.U1)]bool strict, [MarshalAs(UnmanagedType.U1)]bool lower);
  #endregion


  #region rh_getview.cpp
  //CRhinoView* RHC_RhinoGetView(const RHMONO_STRING* _command_prompt, unsigned int* command_rc)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoGetView([MarshalAs(UnmanagedType.LPWStr)]string _command_prompt, ref uint command_rc);
  #endregion


  #region rh_grips.cpp
  //CRhinoObject* RHC_RhinoUpdateGripOwner( CRhinoObject* pObject, bool deleteOriginal )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoUpdateGripOwner(IntPtr pObject, [MarshalAs(UnmanagedType.U1)]bool deleteOriginal);
  #endregion


  #region rh_group.cpp
  //int CRhinoGroupTable_GroupCount(int doc_id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGroupTable_GroupCount(int doc_id);

  //int CRhinoGroupTable_FindGroup(int doc_id, const RHMONO_STRING* _name, bool ignoreDeletedGroups)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGroupTable_FindGroup(int doc_id, [MarshalAs(UnmanagedType.LPWStr)]string _name, [MarshalAs(UnmanagedType.U1)]bool ignoreDeletedGroups);

  //int CRhinoGroupTable_Add(int doc_id, const RHMONO_STRING* _name, int count, /*ARRAY*/const ON_UUID* object_ids)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGroupTable_Add(int doc_id, [MarshalAs(UnmanagedType.LPWStr)]string _name, int count, Guid[] object_ids);

  //bool CRhinoGroupTable_AddToGroup(int doc_id, int groupIndex, int count, /*ARRAY*/const ON_UUID* object_ids)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGroupTable_AddToGroup(int doc_id, int groupIndex, int count, Guid[] object_ids);

  //bool CRhinoGroupTable_DeleteGroup(int doc_id, int groupIndex, bool performDelete)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGroupTable_DeleteGroup(int doc_id, int groupIndex, [MarshalAs(UnmanagedType.U1)]bool performDelete);

  //bool CRhinoGroupTable_IsDeleted(int doc_id, int groupIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGroupTable_IsDeleted(int doc_id, int groupIndex);

  //const RHMONO_STRING* CRhinoGroupTable_GroupName(int docId, int groupIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoGroupTable_GroupName(int docId, int groupIndex);

  //int CRhinoGroupTable_GroupOp(int docId, int groupIndex, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGroupTable_GroupOp(int docId, int groupIndex, int which);

  //bool CRhinoGroupTable_ChangeGroupName(int docId, int groupIndex, const RHMONO_STRING* _newName)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGroupTable_ChangeGroupName(int docId, int groupIndex, [MarshalAs(UnmanagedType.LPWStr)]string _newName);
  #endregion


  #region rh_hatchpattern.cpp
  //bool CRhinoHatchPattern_GetBool( const CRhinoHatchPattern* pConstHatchPattern, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoHatchPattern_GetBool(IntPtr pConstHatchPattern, int which);

  //int CRhinoHatchPattern_GetIndex(const CRhinoHatchPattern* pConstHatchPattern)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoHatchPattern_GetIndex(IntPtr pConstHatchPattern);

  //int CRhinoHatchPatternTable_HatchPatternCount(int doc_id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoHatchPatternTable_HatchPatternCount(int doc_id);

  //ON_UUID CRhinoHatchPatternTable_GetHatchPatternId(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoHatchPatternTable_GetHatchPatternId(int docId, int index);

  //const ON_HatchPattern* CRhinoHatchPatternTable_GetHatchPatternPointer(int doc_id, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoHatchPatternTable_GetHatchPatternPointer(int doc_id, Guid id);

  //int CRhinoHatchPatternTable_GetCurrentIndex(int doc_id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoHatchPatternTable_GetCurrentIndex(int doc_id);

  //void CRhinoHatchPatternTable_SetCurrentIndex(int doc_id, int val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoHatchPatternTable_SetCurrentIndex(int doc_id, int val);

  //int CRhinoHatchPatternTable_Find(int doc_id, const RHMONO_STRING* name, bool ignore_deleted)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoHatchPatternTable_Find(int doc_id, [MarshalAs(UnmanagedType.LPWStr)]string name, [MarshalAs(UnmanagedType.U1)]bool ignore_deleted);

  //int CRhinoHatchPatternTable_AddPattern(int doc_id, const ON_HatchPattern* pConstPattern, bool reference)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoHatchPatternTable_AddPattern(int doc_id, IntPtr pConstPattern, [MarshalAs(UnmanagedType.U1)]bool reference);

  //int RHC_RhinoCreateHatches(ON_SimpleArray<const ON_Curve*>* curves,
  //                                         int index, double rotation_radians, double scale,
  //                                         ON_SimpleArray<ON_Hatch*>* pOutput)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoCreateHatches(IntPtr curves, int index, double rotation_radians, double scale, IntPtr pOutput);

  //int RHC_RhinoReadHatchPatterns(const RHMONO_STRING* filename, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoReadHatchPatterns([MarshalAs(UnmanagedType.LPWStr)]string filename, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //ON_HatchPattern* RHC_RhinoReadHatchPatterns2(int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoReadHatchPatterns2(int index);
  #endregion


  #region rh_instance.cpp
  //void CRhinoInstanceObject_InstanceXform( const CRhinoInstanceObject* ptr, ON_Xform* xf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoInstanceObject_InstanceXform(IntPtr ptr, ref Transform xf);

  //int CRhinoInstanceObject_InstanceDefinition( const CRhinoInstanceObject* ptr, int* docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceObject_InstanceDefinition(IntPtr ptr, ref int docId);

  //int CRhinoInstanceDefinition_ObjectCount( int docId, int idef_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinition_ObjectCount(int docId, int idef_index);

  //const CRhinoObject* CRhinoInstanceDefinition_Object( int docId, int idef_index, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoInstanceDefinition_Object(int docId, int idef_index, int index);

  //int CRhinoInstanceDefintition_GetReferences1( int docId, int idef_index, int whereToLook)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefintition_GetReferences1(int docId, int idef_index, int whereToLook);

  //const CRhinoInstanceObject* CRhinoInstanceDefinition_GetReferences2( int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoInstanceDefinition_GetReferences2(int index);

  //void CRhinoInstanceDefinition_GetReferences3()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoInstanceDefinition_GetReferences3();

  //int CRhinoInstanceDefinition_GetContainers(int docId, int idef_index, ON_SimpleArray<int>* pIntArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinition_GetContainers(int docId, int idef_index, IntPtr pIntArray);

  //int CRhinoInstanceDefinition_UsesDefinition( int docId, int idef_index, int otherIdefIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinition_UsesDefinition(int docId, int idef_index, int otherIdefIndex);

  //bool CRhinoInstanceDefinition_InUse(int docId, int idef_index, int whereToLook)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoInstanceDefinition_InUse(int docId, int idef_index, int whereToLook);

  //bool CRhinoInstanceDefinition_IsDeleted( int docId, int idef_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoInstanceDefinition_IsDeleted(int docId, int idef_index);

  //bool CRhinoInstanceDefinition_IsReference( int docId, int idef_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoInstanceDefinition_IsReference(int docId, int idef_index);

  //const RHMONO_STRING* CRhinoInstanceDefinition_GetString( int docId, int idef_index, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoInstanceDefinition_GetString(int docId, int idef_index, int which);

  //ON_UUID CRhinoInstanceDefinition_GetUuid( int docId, int idef_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoInstanceDefinition_GetUuid(int docId, int idef_index);

  //int CRhinoInstanceDefinition_UpdateType( int docId, int idef_index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinition_UpdateType(int docId, int idef_index);

  //int CRhinoInstanceDefinitionTable_InstanceDefinitionCount( int docId )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinitionTable_InstanceDefinitionCount(int docId);

  //int CRhinoInstanceDefinitionTable_FindInstanceDefinition( int docId, const RHMONO_STRING* _instanceDefinitionName, bool ignoreDeletedInstanceDefinitions)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinitionTable_FindInstanceDefinition(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _instanceDefinitionName, [MarshalAs(UnmanagedType.U1)]bool ignoreDeletedInstanceDefinitions);

  //int CRhinoInstanceDefinitionTable_FindInstanceDefinition2( int docId, ON_UUID instanceId, bool ignoreDeletedInstanceDefinitions)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinitionTable_FindInstanceDefinition2(int docId, Guid instanceId, [MarshalAs(UnmanagedType.U1)]bool ignoreDeletedInstanceDefinitions);

  //bool CRhinoInstanceDefinitionTable_ModifyInstanceDefinition( int docId, int idef_index, const RHMONO_STRING* _newName, const RHMONO_STRING* _newDescription, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoInstanceDefinitionTable_ModifyInstanceDefinition(int docId, int idef_index, [MarshalAs(UnmanagedType.LPWStr)]string _newName, [MarshalAs(UnmanagedType.LPWStr)]string _newDescription, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //int CRhinoInstanceDefinitionTable_GetList( int docId, ON_SimpleArray<int>* pIntArray, bool ignoreDeleted)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoInstanceDefinitionTable_GetList(int docId, IntPtr pIntArray, [MarshalAs(UnmanagedType.U1)]bool ignoreDeleted);

  //bool CRhinoInstanceDefinitionTable_DeleteInstanceDefinition(int docId, int idefIndex, bool deleteReferences, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoInstanceDefinitionTable_DeleteInstanceDefinition(int docId, int idefIndex, [MarshalAs(UnmanagedType.U1)]bool deleteReferences, [MarshalAs(UnmanagedType.U1)]bool quiet);
  #endregion


  #region rh_layer.cpp
  //bool CRhinoLayer_IsDeleted( int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayer_IsDeleted(int docId, int index);

  //bool CRhinoLayer_IsReference( int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayer_IsReference(int docId, int index);

  //ON_UUID CRhinoLayerTable_GetLayerId(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoLayerTable_GetLayerId(int docId, int index);

  //const ON_Layer* CRhinoLayerTable_GetLayerPointer2(int docId, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoLayerTable_GetLayerPointer2(int docId, Guid id);

  //bool CRhinoLayerTable_CommitChanges(int docId, ON_Layer* pLayer, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayerTable_CommitChanges(int docId, IntPtr pLayer, Guid id);

  //int CRhinoLayerTable_LayerCount(int docId, bool onlyActive)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLayerTable_LayerCount(int docId, [MarshalAs(UnmanagedType.U1)]bool onlyActive);

  //int CRhinoLayerTable_CurrentLayerIndex(int docId)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLayerTable_CurrentLayerIndex(int docId);

  //bool CRhinoLayerTable_SetCurrentLayerIndex( int docId, int layerIndex, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayerTable_SetCurrentLayerIndex(int docId, int layerIndex, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //int CRhinoLayerTable_FindLayer(int docId, const RHMONO_STRING* _layerName, bool ignoreDeletedLayers)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLayerTable_FindLayer(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _layerName, [MarshalAs(UnmanagedType.U1)]bool ignoreDeletedLayers);

  //int CRhinoLayerTable_FindLayer2(int docId, ON_UUID layerId, bool ignoreDeletedLayers)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLayerTable_FindLayer2(int docId, Guid layerId, [MarshalAs(UnmanagedType.U1)]bool ignoreDeletedLayers);

  //void CRhinoLayerTable_GetDefaultLayerProperties(ON_Layer* pLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoLayerTable_GetDefaultLayerProperties(IntPtr pLayer);

  //int CRhinoLayerTable_AddLayer(int docId, const ON_Layer* pLayer, bool referenceLayer)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLayerTable_AddLayer(int docId, IntPtr pLayer, [MarshalAs(UnmanagedType.U1)]bool referenceLayer);

  //const RHMONO_STRING* CRhinoLayerTable_GetUnusedLayerName(int docId, bool ignoreDeleted)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoLayerTable_GetUnusedLayerName(int docId, [MarshalAs(UnmanagedType.U1)]bool ignoreDeleted);

  //bool CRhinoLayerTable_ModifyLayer(int docId, const ON_Layer* pLayer, int layerIndex, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayerTable_ModifyLayer(int docId, IntPtr pLayer, int layerIndex, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //bool CRhinoLayerTable_UndoModifyLayer(int docId, int layerIndex, unsigned int undoRecordSerialNumber)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayerTable_UndoModifyLayer(int docId, int layerIndex, uint undoRecordSerialNumber);

  //bool CRhinoLayerTable_DeleteLayer(int docId, int layerIndex, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayerTable_DeleteLayer(int docId, int layerIndex, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //bool CRhinoLayerTable_UndeleteLayer(int docId, int layerIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLayerTable_UndeleteLayer(int docId, int layerIndex);

  //const ON_Layer* CRhinoLayerTable_GetLayerPointer(int docId, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoLayerTable_GetLayerPointer(int docId, int index);

  //bool RHC_IsValidName(const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_IsValidName([MarshalAs(UnmanagedType.LPWStr)]string _name);

  //int CRhinoLayerNode_IsChildOrParent(int docId, int layerToTest, int parentOrChildIndex, bool isChildOf)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLayerNode_IsChildOrParent(int docId, int layerToTest, int parentOrChildIndex, [MarshalAs(UnmanagedType.U1)]bool isChildOf);

  //int CRhinoLayerNode_GetChildren(int docId, int layerIndex, ON_SimpleArray<int>* pIndices)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLayerNode_GetChildren(int docId, int layerIndex, IntPtr pIndices);
  #endregion


  #region rh_light.cpp
  //int CRhinoLightTable_LightCount(int doc_id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLightTable_LightCount(int doc_id);

  //unsigned int CRhinoLightTable_Light(int doc_id, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoLightTable_Light(int doc_id, int index);

  //int CRhinoLightTable_Add(int doc_id, const ON_Light* pConstLight, const ON_3dmObjectAttributes* pConstAttributes)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLightTable_Add(int doc_id, IntPtr pConstLight, IntPtr pConstAttributes);

  //int CRhinoLightTable_Find(int doc_id, ON_UUID id, bool ignoreDeleted)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoLightTable_Find(int doc_id, Guid id, [MarshalAs(UnmanagedType.U1)]bool ignoreDeleted);

  //bool CRhinoLightTable_Modify(int doc_id, int index, const ON_Light* pConstLight)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoLightTable_Modify(int doc_id, int index, IntPtr pConstLight);
  #endregion


  #region rh_material.cpp
  //bool CRhinoMaterial_GetBool( const CRhinoMaterial* pConstRhinoMaterial, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoMaterial_GetBool(IntPtr pConstRhinoMaterial, int which);

  //int CRhinoMaterial_InUse( const CRhinoMaterial* pConstRhinoMaterial )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoMaterial_InUse(IntPtr pConstRhinoMaterial);

  //ON_UUID CRhinoMaterialTable_GetMaterialId( int docId, int index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoMaterialTable_GetMaterialId(int docId, int index);

  //const ON_Material* CRhinoMaterialTable_GetMaterialPointer( int docId, ON_UUID id )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoMaterialTable_GetMaterialPointer(int docId, Guid id);

  //int CRhinoMaterialTable_GetInt( int docId, int which )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoMaterialTable_GetInt(int docId, int which);

  //bool CRhinoMaterialTable_SetCurrentMaterialIndex( int docId, int index, bool quiet )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoMaterialTable_SetCurrentMaterialIndex(int docId, int index, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //bool CRhinoMaterialTable_SetCurrentMaterialSource( int docId, int source )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoMaterialTable_SetCurrentMaterialSource(int docId, int source);

  //bool CRhinoMaterialTable_ModifyMaterial(int docId, const ON_Material* pConstMaterial, int materialIndex, bool quiet)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoMaterialTable_ModifyMaterial(int docId, IntPtr pConstMaterial, int materialIndex, [MarshalAs(UnmanagedType.U1)]bool quiet);

  //int CRhinoMaterialTable_FindByName(int docId, const RHMONO_STRING* _name, bool ignoreDeleted)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoMaterialTable_FindByName(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _name, [MarshalAs(UnmanagedType.U1)]bool ignoreDeleted);

  //int CRhinoMaterialTable_FindById(int docId, ON_UUID id, bool ignoreDeleted)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoMaterialTable_FindById(int docId, Guid id, [MarshalAs(UnmanagedType.U1)]bool ignoreDeleted);

  //bool CRhinoMaterialTable_CommitChanges(int docId, ON_Material* pMaterial, ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoMaterialTable_CommitChanges(int docId, IntPtr pMaterial, Guid id);

  //bool CRhinoMaterialTable_ResetMaterial(int docId, int materialIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoMaterialTable_ResetMaterial(int docId, int materialIndex);
  #endregion


  #region rh_meshutilities.cpp
  //int RHC_RhinoGetPointOnMesh(ON_UUID id, const RHMONO_STRING* _prompt, bool acceptNothing, ON_3dPoint* point)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoGetPointOnMesh(Guid id, [MarshalAs(UnmanagedType.LPWStr)]string _prompt, [MarshalAs(UnmanagedType.U1)]bool acceptNothing, ref Point3d point);
  #endregion


  #region rh_mouse.cpp
  //void CRhinoMouseCallback_Enable( bool on, RHMOUSECALLBACK_PROC callback_func )
  // SKIPPING - Contains a function pointer which needs to be written by hand
  #endregion


  #region rh_object.cpp
  //int CRhinoRhinoObject_GetRhinoObjectType(const CRhinoObject* pRhinoObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoRhinoObject_GetRhinoObjectType(IntPtr pRhinoObject);

  //unsigned int CRhinoObject_ObjectType( const CRhinoObject* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoObject_ObjectType(IntPtr ptr);

  //ON_UUID CRhinoObject_Id(const CRhinoObject* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoObject_Id(IntPtr ptr);

  //unsigned int CRhinoObject_RuntimeSN(const CRhinoObject* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoObject_RuntimeSN(IntPtr ptr);

  //int CRhinoObject_GetSubObjects(const CRhinoObject* pRhinoObject, ON_SimpleArray<CRhinoObject*>* pRhinoObjectArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_GetSubObjects(IntPtr pRhinoObject, IntPtr pRhinoObjectArray);

  //int CRhinoObject_IsSelected( const CRhinoObject* pRhinoObject, bool checkSubObjects)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_IsSelected(IntPtr pRhinoObject, [MarshalAs(UnmanagedType.U1)]bool checkSubObjects);

  //bool CRhinoObject_IsSubObjectSelected( const CRhinoObject* pRhinoObject, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_IsSubObjectSelected(IntPtr pRhinoObject, ComponentIndex componentIndex);

  //int CRhinoObject_GetSelectedSubObjects( const CRhinoObject* pRhinoObject, ON_SimpleArray<ON_COMPONENT_INDEX>* pComponentIndexArray, bool selected)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_GetSelectedSubObjects(IntPtr pRhinoObject, IntPtr pComponentIndexArray, [MarshalAs(UnmanagedType.U1)]bool selected);

  //bool CRhinoObject_IsSelectable(const CRhinoObject* pRhinoObject, bool ignoreSelectionState, bool ignoreGripsState,
  //                                             bool ignoreLayerLocking, bool ignoreLayerVisibility)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_IsSelectable(IntPtr pRhinoObject, [MarshalAs(UnmanagedType.U1)]bool ignoreSelectionState, [MarshalAs(UnmanagedType.U1)]bool ignoreGripsState, [MarshalAs(UnmanagedType.U1)]bool ignoreLayerLocking, [MarshalAs(UnmanagedType.U1)]bool ignoreLayerVisibility);

  //bool CRhinoObject_IsSubObjectSelectable(const CRhinoObject* pRhinoObject, ON_2INTS componentIndex, bool ignoreSelectionState)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_IsSubObjectSelectable(IntPtr pRhinoObject, ComponentIndex componentIndex, [MarshalAs(UnmanagedType.U1)]bool ignoreSelectionState);

  //int CRhinoObject_Select(const CRhinoObject* pRhinoObject,
  //                                      bool select, bool syncHighlight,
  //                                      bool persistentSelect,
  //                                      bool ignoreGripsState,
  //                                      bool ignoreLayerLocking,
  //                                      bool ignoreLayerVisibility)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_Select(IntPtr pRhinoObject, [MarshalAs(UnmanagedType.U1)]bool select, [MarshalAs(UnmanagedType.U1)]bool syncHighlight, [MarshalAs(UnmanagedType.U1)]bool persistentSelect, [MarshalAs(UnmanagedType.U1)]bool ignoreGripsState, [MarshalAs(UnmanagedType.U1)]bool ignoreLayerLocking, [MarshalAs(UnmanagedType.U1)]bool ignoreLayerVisibility);

  //int CRhinoObject_SelectSubObject(const CRhinoObject* pRhinoObject, ON_2INTS componentIndex,
  //                                                bool select, bool syncHighlight)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_SelectSubObject(IntPtr pRhinoObject, ComponentIndex componentIndex, [MarshalAs(UnmanagedType.U1)]bool select, [MarshalAs(UnmanagedType.U1)]bool syncHighlight);

  //int CRhinoObject_IsHighlighted(const CRhinoObject* pRhinoObject, bool checkSubObjects)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_IsHighlighted(IntPtr pRhinoObject, [MarshalAs(UnmanagedType.U1)]bool checkSubObjects);

  //bool CRhinoObject_Highlight(const CRhinoObject* pRhinoObject, bool enable)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_Highlight(IntPtr pRhinoObject, [MarshalAs(UnmanagedType.U1)]bool enable);

  //bool CRhinoObject_IsSubObjectHighlighted(const CRhinoObject* pRhinoObject, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_IsSubObjectHighlighted(IntPtr pRhinoObject, ComponentIndex componentIndex);

  //bool CRhinoObject_HighlightSubObject(const CRhinoObject* pRhinoObject, ON_2INTS componentIndex, bool highlight)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_HighlightSubObject(IntPtr pRhinoObject, ComponentIndex componentIndex, [MarshalAs(UnmanagedType.U1)]bool highlight);

  //int CRhinoObject_Document(const CRhinoObject* pRhinoObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_Document(IntPtr pRhinoObject);

  //CRhinoObject* RHC_LookupObjectBySerialNumber(unsigned int sn)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_LookupObjectBySerialNumber(uint sn);

  //const ON_Geometry* CRhinoObject_Geometry(unsigned int rhino_object_serial_number, ON_2INTS componentIndex)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObject_Geometry(uint rhino_object_serial_number, ComponentIndex componentIndex);

  //const CRhinoObjectAttributes* CRhinoObject_Attributes(unsigned int rhino_object_serial_number)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObject_Attributes(uint rhino_object_serial_number);

  //bool CRhinoObject_GetBool(const CRhinoObject* pRhinoObject, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_GetBool(IntPtr pRhinoObject, int which);

  //int CRhinoObject_GetInt(const CRhinoObject* pRhinoObject, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_GetInt(IntPtr pRhinoObject, int which);

  //int CRhinoObject_GripsOn(const CRhinoObject* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_GripsOn(IntPtr ptr);

  //void CRhinoObject_EnableGrips(const CRhinoObject* ptr, bool on)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoObject_EnableGrips(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool on);

  //ON_SimpleArray<CRhinoGripObject*>* ON_GripList_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_GripList_New();

  //void ON_GripList_Delete(ON_SimpleArray<CRhinoGripObject*>* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_GripList_Delete(IntPtr pList);

  //CRhinoGripObject* ON_GripList_Get(ON_SimpleArray<CRhinoGripObject*>* pList, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr ON_GripList_Get(IntPtr pList, int index);

  //int CRhinoObject_GetGrips( const CRhinoObject* ptr, ON_SimpleArray<CRhinoGripObject*>* griplist )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObject_GetGrips(IntPtr ptr, IntPtr griplist);

  //void CRhinoObject_GetGroupList(const CRhinoObject* ptr, int* groupList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoObject_GetGroupList(IntPtr ptr, ref int groupList);

  //CRhinoObjRef* CRhinoObjRef_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_New();

  //CRhinoObjRef* CRhinoObjRef_New1(ON_UUID id)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_New1(Guid id);

  //CRhinoObjRef* CRhinoObjRef_New2(const CRhinoObject* pRhinoObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_New2(IntPtr pRhinoObject);

  //CRhinoObjRef* CRhinoObjRef_Copy(const CRhinoObjRef* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Copy(IntPtr pOther);

  //void CRhinoObjRef_Delete( CRhinoObjRef* p )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoObjRef_Delete(IntPtr p);

  //bool CRhinoObjRef_IsSubGeometry( const CRhinoObjRef* pConstObjRef )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObjRef_IsSubGeometry(IntPtr pConstObjRef);

  //ON_UUID CRhinoObjRef_ObjectUuid( const CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoObjRef_ObjectUuid(IntPtr ptr);

  //unsigned int CRhinoObjRef_RuntimeSN( const CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoObjRef_RuntimeSN(IntPtr ptr);

  //const ON_Geometry* CRhinoObjRef_Geometry(CRhinoObjRef* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Geometry(IntPtr ptr);

  //const ON_ClippingPlaneSurface* CRhinoObjRef_ClippingPlaneSurface(CRhinoObjRef* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_ClippingPlaneSurface(IntPtr ptr);

  //const ON_Curve* CRhinoObjRef_Curve( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Curve(IntPtr ptr);

  //const ON_BrepFace* CRhinoObjRef_Face( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Face(IntPtr ptr);

  //const ON_Brep* CRhinoObjRef_Brep( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Brep(IntPtr ptr);

  //const ON_Surface* CRhinoObjRef_Surface( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Surface(IntPtr ptr);

  //const ON_TextDot* CRhinoObjRef_TextDot( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_TextDot(IntPtr ptr);

  //const ON_Point* CRhinoObjRef_Point( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Point(IntPtr ptr);

  //const ON_PointCloud* CRhinoObjRef_PointCloud( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_PointCloud(IntPtr ptr);

  //const ON_Mesh* CRhinoObjRef_Mesh( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Mesh(IntPtr ptr);

  //const CRhinoObject* CRhinoObjRef_Object( CRhinoObjRef* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Object(IntPtr ptr);

  //const ON_Annotation2* CRhinoObjRef_Annotation(CRhinoObjRef* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Annotation(IntPtr ptr);

  //const ON_Light* CRhinoObjRef_Light(CRhinoObjRef* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_Light(IntPtr ptr);

  //int CRhinoObjRef_SelectionMethod(CRhinoObjRef* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObjRef_SelectionMethod(IntPtr ptr);

  //bool CRhinoObjRef_SelectionPoint(CRhinoObjRef* ptr, ON_3dPoint* pt)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObjRef_SelectionPoint(IntPtr ptr, ref Point3d pt);

  //const ON_Curve* CRhinoObjRef_CurveParameter(CRhinoObjRef* ptr, double* parameter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_CurveParameter(IntPtr ptr, ref double parameter);

  //const ON_Surface* CRhinoObjRef_SurfaceParameter(CRhinoObjRef* pRhinoObjRef, double* u, double* v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjRef_SurfaceParameter(IntPtr pRhinoObjRef, ref double u, ref double v);

  //bool CRhinoObjRef_IsTopLevelGeometryPointer(const CRhinoObjRef* pConstRhinoObjRef, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObjRef_IsTopLevelGeometryPointer(IntPtr pConstRhinoObjRef, IntPtr pConstGeometry);

  //ON_SimpleArray<CRhinoObject*>* RhinoObjectArray_New(int initialCapacity)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhinoObjectArray_New(int initialCapacity);

  //int RhinoObjectArray_Count(const ON_SimpleArray<CRhinoObject*>* pArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhinoObjectArray_Count(IntPtr pArray);

  //CRhinoObject* RhinoObjectArray_Get(ON_SimpleArray<CRhinoObject*>* pArray, int i)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhinoObjectArray_Get(IntPtr pArray, int i);

  //void RhinoObjectArray_Add(ON_SimpleArray<CRhinoObject*>* pArray, CRhinoObject* pRhinoObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhinoObjectArray_Add(IntPtr pArray, IntPtr pRhinoObject);

  //void RhinoObjectArray_Delete(ON_SimpleArray<CRhinoObject*>* pArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhinoObjectArray_Delete(IntPtr pArray);

  //unsigned int CRhinoBrepObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoBrepObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoSurfaceObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoSurfaceObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoCurveObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoCurveObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoMeshObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoMeshObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoPointObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoPointObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoPointCloudObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoPointCloudObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoClippingPlaneObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoClippingPlaneObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoDetailObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoDetailObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoHatch_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoHatch_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoLight_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoLight_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoTextDot_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoTextDot_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoExtrusionObject_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoExtrusionObject_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoLinearDimension_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoLinearDimension_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //unsigned int CRhinoAnnotationText_InternalCommitChanges(unsigned int serial_number, const ON_Geometry* pConstGeometry)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoAnnotationText_InternalCommitChanges(uint serial_number, IntPtr pConstGeometry);

  //bool CRhinoObject_GetTightBoundingBox(const CRhinoObject* ptr, ON_BoundingBox* bbox, ON_Xform* xform, bool useXform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_GetTightBoundingBox(IntPtr ptr, ref BoundingBox bbox, ref Transform xform, [MarshalAs(UnmanagedType.U1)]bool useXform);

  //bool CRhinoObject_BoundingBox( const CRhinoObject* ptr, ON_BoundingBox* bbox )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoObject_BoundingBox(IntPtr ptr, ref BoundingBox bbox);

  //unsigned int CRhinoObject_NextRuntimeObjectSerialNumber()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoObject_NextRuntimeObjectSerialNumber();

  //void CRhinoObject_ShortDescription(const CRhinoObject* pConstRhinoObject, CRhCmnStringHolder* pString, bool plural)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoObject_ShortDescription(IntPtr pConstRhinoObject, IntPtr pString, [MarshalAs(UnmanagedType.U1)]bool plural);
  #endregion


  #region rh_objectattributes.cpp
  //CRhinoObjectAttributes* CRhinoObjectAttributes_New(const CRhinoObjectAttributes* pOther)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoObjectAttributes_New(IntPtr pOther);

  //int CRhinoObjectAttributes_DrawColor( const CRhinoObjectAttributes* pConstAttr, int doc_id, ON_UUID viewport_id )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoObjectAttributes_DrawColor(IntPtr pConstAttr, int doc_id, Guid viewport_id);
  #endregion


  #region rh_pagelayoutview.cpp
  //ON_SimpleArray<CRhinoDetailViewObject*>* CRhinoDetailViewArray_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDetailViewArray_New();

  //void CRhinoDetailViewArray_Delete(ON_SimpleArray<CRhinoDetailViewObject*>* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDetailViewArray_Delete(IntPtr pList);

  //CRhinoDetailViewObject* CRhinoDetailViewArray_Item(ON_SimpleArray<CRhinoDetailViewObject*>* pList, int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDetailViewArray_Item(IntPtr pList, int index);

  //int CRhinoPageView_GetDetailViewObjects(const CRhinoPageView* pPageView, ON_SimpleArray<CRhinoDetailViewObject*>* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoPageView_GetDetailViewObjects(IntPtr pPageView, IntPtr pList);

  //CRhinoPageView* CRhinoPageView_CreateView( const RHMONO_STRING* _title, double pageWidth, double pageHeight )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoPageView_CreateView([MarshalAs(UnmanagedType.LPWStr)]string _title, double pageWidth, double pageHeight);

  //CRhinoDetailViewObject* CRhinoPageView_AddDetailView(CRhinoPageView* pPageView,
  //                                                                   ON_2DPOINT_STRUCT corner1,
  //                                                                   ON_2DPOINT_STRUCT corner2,
  //                                                                   const RHMONO_STRING* _title,
  //                                                                   int initialProjection )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoPageView_AddDetailView(IntPtr pPageView, Point2d corner1, Point2d corner2, [MarshalAs(UnmanagedType.LPWStr)]string _title, int initialProjection);

  //bool CRhinoDetailViewObject_IsActive(const CRhinoDetailViewObject* pConstDetailViewObject)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDetailViewObject_IsActive(IntPtr pConstDetailViewObject);

  //bool CRhinoDetailViewObject_SetActive(const CRhinoDetailViewObject* pConstDetailViewObject, bool active)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoDetailViewObject_SetActive(IntPtr pConstDetailViewObject, [MarshalAs(UnmanagedType.U1)]bool active);

  //CRhinoViewport* CRhinoDetailViewObject_DuplicateViewport(const CRhinoDetailViewObject* pConstDetail)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDetailViewObject_DuplicateViewport(IntPtr pConstDetail);

  //const CRhinoViewport* CRhinoDetailViewObject_GetViewport(const CRhinoDetailViewObject* pConstDetail)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoDetailViewObject_GetViewport(IntPtr pConstDetail);

  //unsigned int CRhinoDetailViewObject_CommitViewportChanges(const CRhinoDetailViewObject* pConstDetail, const CRhinoViewport* pConstViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoDetailViewObject_CommitViewportChanges(IntPtr pConstDetail, IntPtr pConstViewport);

  //int CRhinoPageView_GetPageNumber(const CRhinoPageView* pConstPageView)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoPageView_GetPageNumber(IntPtr pConstPageView);
  #endregion


  #region rh_plugin.cpp
  //bool CRhinoPlugIn_Create(int sn, ON_UUID plugin_id, const RHMONO_STRING* _plugin_name, const RHMONO_STRING* _plugin_version, int plugin_class)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoPlugIn_Create(int sn, Guid plugin_id, [MarshalAs(UnmanagedType.LPWStr)]string _plugin_name, [MarshalAs(UnmanagedType.LPWStr)]string _plugin_version, int plugin_class);

  //CRhinoPlugIn* CRhinoPlugIn_Pointer(int serial_number)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoPlugIn_Pointer(int serial_number);

  //void CRhinoPlugIn_SetCallbacks(ONLOADPLUGINPROC onload, SHUTDOWNPLUGINPROC shutdown, GETPLUGINOBJECTPROC getobj)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoPlugIn_SetCallbacks2(ONCALLWRITEDOCPLUGINPROC oncallwrite, WRITEDOCPLUGINPROC writedoc, READDOCPLUGINPROC readdoc)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoFileImportPlugIn_SetCallbacks(ADDREADFILETYPEPROC addfiletype, READFILEPROC readfile)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoFileExportPlugIn_SetCallbacks(ADDWRITEFILETYPEPROC addfiletype, WRITEFILEPROC writefile)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoDigitizerPlugIn_SetCallbacks(ENABLEDIGITIZERPROC enabledigitizer, UNITSYSTEMPROC unitsystem, POINTTOLERANCEPROC pointtolerance)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void CRhinoPlugIn_SetLoadErrorMessage(int serial_number, const RHMONO_STRING* _message)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoPlugIn_SetLoadErrorMessage(int serial_number, [MarshalAs(UnmanagedType.LPWStr)]string _message);

  //int CRhinoFileTypeList_Add( ON_ClassArray<CRhinoFileType>* list, ON_UUID plugin_id, const RHMONO_STRING* _description)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoFileTypeList_Add(IntPtr list, Guid plugin_id, [MarshalAs(UnmanagedType.LPWStr)]string _description);

  //void CRhinoFileTypeList_SetExtension( ON_ClassArray<CRhinoFileType>* list, int index, const RHMONO_STRING* _extension)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoFileTypeList_SetExtension(IntPtr list, int index, [MarshalAs(UnmanagedType.LPWStr)]string _extension);

  //const RHMONO_STRING* CRhinoFileImportPlugIn_MakeReferenceTableName(int serial_number, const RHMONO_STRING* _nameToPrefix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoFileImportPlugIn_MakeReferenceTableName(int serial_number, [MarshalAs(UnmanagedType.LPWStr)]string _nameToPrefix);

  //void CRhinoDigitizerPlugIn_SendPoint(int serial_number, ON_3DPOINT_STRUCT point, unsigned int flags)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDigitizerPlugIn_SendPoint(int serial_number, Point3d point, uint flags);

  //void CRhinoDigitizerPlugIn_SendRay(int serial_number, ON_3DPOINT_STRUCT point, ON_3DVECTOR_STRUCT vector, unsigned int flags)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoDigitizerPlugIn_SendRay(int serial_number, Point3d point, Vector3d vector, uint flags);
  #endregion


  #region rh_pluginmanager.cpp
  //int CRhinoPlugInManager_PlugInCount()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoPlugInManager_PlugInCount();

  //const wchar_t* CRhinoPlugInManager_GetFileName(int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoPlugInManager_GetFileName(int index);

  //const wchar_t* CRhinoPlugInManager_GetName(int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoPlugInManager_GetName(int index);

  //ON_UUID CRhinoPlugInManager_GetID(int index)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoPlugInManager_GetID(int index);

  //bool CRhinoPlugInManager_LoadPlugIn(ON_UUID plugin_uuid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoPlugInManager_LoadPlugIn(Guid plugin_uuid);

  //ON_UUID CRhinoPlugInManager_GetPlugInId(const RHMONO_STRING* _name)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoPlugInManager_GetPlugInId([MarshalAs(UnmanagedType.LPWStr)]string _name);
  #endregion


  #region rh_pointobject.cpp
  //void CRhinoGripObject_GripLocation( const CRhinoGripObject* ptr, ON_3dPoint* location, bool current )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGripObject_GripLocation(IntPtr ptr, ref Point3d location, [MarshalAs(UnmanagedType.U1)]bool current);

  //bool CRhinoGripObject_Moved( const CRhinoGripObject* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoGripObject_Moved(IntPtr ptr);

  //void CRhinoGripObject_MoveGrip1( CRhinoGripObject* ptr, ON_Xform* xform )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGripObject_MoveGrip1(IntPtr ptr, ref Transform xform);

  //void CRhinoGripObject_MoveGrip2( CRhinoGripObject* ptr, ON_3DPOINT_STRUCT point, bool asVector )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGripObject_MoveGrip2(IntPtr ptr, Point3d point, [MarshalAs(UnmanagedType.U1)]bool asVector);

  //void CRhinoGripObject_UndoMode( CRhinoGripObject* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoGripObject_UndoMode(IntPtr ptr);

  //double CRhinoGripObject_GetSetWeight( CRhinoGripObject* ptr, bool set, double setval )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double CRhinoGripObject_GetSetWeight(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, double setval);

  //ON_UUID CRhinoGripObject_GetOwnerId( const CRhinoGripObject* ptr )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoGripObject_GetOwnerId(IntPtr ptr);

  //int CRhinoGripObject_Index(const CRhinoGripObject* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoGripObject_Index(IntPtr ptr);
  #endregion


  #region rh_skindll.cpp
  //CRhinoSkinDLL* CRhinoSkin_New( SPLASHPROC cb )
  // SKIPPING - Contains a function pointer which needs to be written by hand
  #endregion


  #region rh_textout.cpp
  //int CRhinoTextOut_ShowDialog(const RHMONO_STRING* _text, const RHMONO_STRING* _title )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoTextOut_ShowDialog([MarshalAs(UnmanagedType.LPWStr)]string _text, [MarshalAs(UnmanagedType.LPWStr)]string _title);
  #endregion


  #region rh_utilities.cpp
  //void RHC_SetPythonEvaluateCallback(EVALUATEPROC proc)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void RHC_SetGetNowProc(GETNOWPROC proc, GETFORMATEDTIMEPROC gftproc)
  // SKIPPING - Contains a function pointer which needs to be written by hand

  //void ON_wString_Set(ON_wString* pString, const RHMONO_STRING* _text)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void ON_wString_Set(IntPtr pString, [MarshalAs(UnmanagedType.LPWStr)]string _text);

  //ON_Brep* RHC_RhinoCreate1FaceBrepFromPoints(int count, /*ARRAY*/const ON_3dPoint* points, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoCreate1FaceBrepFromPoints(int count, Point3d[] points, double tolerance);

  //ON_NurbsSurface* RHC_RhinoCreateSurfaceFromCorners(ON_3DPOINT_STRUCT c1, ON_3DPOINT_STRUCT c2, ON_3DPOINT_STRUCT c3, ON_3DPOINT_STRUCT c4, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoCreateSurfaceFromCorners(Point3d c1, Point3d c2, Point3d c3, Point3d c4, double tolerance);

  //ON_Brep* RHC_RhinoCreateEdgeSrf(const ON_NurbsCurve* pNC1,const ON_NurbsCurve* pNC2, const ON_NurbsCurve* pNC3, const ON_NurbsCurve* pNC4)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoCreateEdgeSrf(IntPtr pNC1, IntPtr pNC2, IntPtr pNC3, IntPtr pNC4);

  //int RHC_RhinoJoinBreps(ON_SimpleArray<ON_Brep*>* pInput, ON_SimpleArray<ON_Brep*>* pOutput, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoJoinBreps(IntPtr pInput, IntPtr pOutput, double tolerance);

  //bool RHC_RhinoJoinBreps2(ON_Brep* pThisBrep, const ON_Brep* pOther, double tolerance, bool compact)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoJoinBreps2(IntPtr pThisBrep, IntPtr pOther, double tolerance, [MarshalAs(UnmanagedType.U1)]bool compact);

  //int RHC_RhinoBooleanUnion(const ON_SimpleArray<const ON_Brep*>* pConstInput, ON_SimpleArray<ON_Brep*>* pOutput, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoBooleanUnion(IntPtr pConstInput, IntPtr pOutput, double tolerance);

  //bool RHC_RhinoBooleanIntDiff( const ON_SimpleArray<const ON_Brep*>* pConstInputSet1,
  //                                            const ON_SimpleArray<const ON_Brep*>* pConstInputSet2,
  //                                            ON_SimpleArray<ON_Brep*>* pOutput,
  //                                            double tolerance, bool intersection )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoBooleanIntDiff(IntPtr pConstInputSet1, IntPtr pConstInputSet2, IntPtr pOutput, double tolerance, [MarshalAs(UnmanagedType.U1)]bool intersection);

  //int RHC_RhinoMakePlanarBreps(ON_SimpleArray<const ON_Curve*>* pInputLoops, ON_SimpleArray<ON_Brep*>* pBreps)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoMakePlanarBreps(IntPtr pInputLoops, IntPtr pBreps);

  //int RHC_FitPlaneToPoints(int point_count, /*ARRAY*/const ON_3dPoint* points, ON_PLANE_STRUCT* plane, double* maximumDeviation)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_FitPlaneToPoints(int point_count, Point3d[] points, ref Plane plane, ref double maximumDeviation);

  //bool RHC_FitLineToPoints(int point_count, /*ARRAY*/const ON_3dPoint* points, ON_Line* line)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_FitLineToPoints(int point_count, Point3d[] points, ref Line line);

  //bool RHC_GetFilletPoints( const ON_Curve* c0, const ON_Curve* c1,
  //                                        double radius, double t0_base, double t1_base,
  //                                        double* t0, double* t1, ON_PLANE_STRUCT* plane )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_GetFilletPoints(IntPtr c0, IntPtr c1, double radius, double t0_base, double t1_base, ref double t0, ref double t1, ref Plane plane);

  //ON_NurbsCurve* RHC_RhinoInterpCurve(int degree, int count, /*ARRAY*/const ON_3dPoint* _array_pts, ON_3DVECTOR_STRUCT start_tan, ON_3DVECTOR_STRUCT end_tan, int knotStyle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoInterpCurve(int degree, int count, Point3d[] _array_pts, Vector3d start_tan, Vector3d end_tan, int knotStyle);

  //bool RHC_RhinoOffsetCurve(const ON_Curve* pCurve, ON_3DVECTOR_STRUCT normal, ON_3DPOINT_STRUCT origin, double distance, ON_SimpleArray<ON_Curve*>* pCurveArray, double tol, double angleTol, int corner_style)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoOffsetCurve(IntPtr pCurve, Vector3d normal, Point3d origin, double distance, IntPtr pCurveArray, double tol, double angleTol, int corner_style);

  //bool RHC_RhinoOffsetCurve2( const ON_Curve* pCurve,
  //                                          double distance,
  //                                          ON_3DPOINT_STRUCT direction_point, 
  //                                          ON_3DVECTOR_STRUCT normal,
  //                                          int corner_style,
  //                                          double tolerance,
  //                                          ON_SimpleArray<ON_Curve*>* pCurveArray)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoOffsetCurve2(IntPtr pCurve, double distance, Point3d direction_point, Vector3d normal, int corner_style, double tolerance, IntPtr pCurveArray);

  //bool RHC_RhinoMakeCurveClosed( ON_Curve* pCurve, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoMakeCurveClosed(IntPtr pCurve, double tolerance);

  //bool RHC_RhinoIsPointInBrep( const ON_Brep* pBrep, ON_3DPOINT_STRUCT point, double tolerance, bool strictlyIn )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoIsPointInBrep(IntPtr pBrep, Point3d point, double tolerance, [MarshalAs(UnmanagedType.U1)]bool strictlyIn);

  //bool RHC_RhinoProjectCurveToBrep(const ON_Brep* pBrep, const ON_Curve* pCurve, ON_3DVECTOR_STRUCT dir, double tolerance, ON_SimpleArray<ON_Curve*>* outputCurves)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoProjectCurveToBrep(IntPtr pBrep, IntPtr pCurve, Vector3d dir, double tolerance, IntPtr outputCurves);

  //bool RHC_RhinoProjectCurveToBrepEx(ON_SimpleArray<const ON_Brep*>* breps, 
  //                                                 ON_SimpleArray<const ON_Curve*>* curves, 
  //                                                 ON_3DVECTOR_STRUCT dir, 
  //                                                 double tolerance,
  //                                                 ON_SimpleArray<ON_Curve*>* outputCurves, 
  //                                                 ON_SimpleArray<int>* brepTopology, 
  //                                                 ON_SimpleArray<int>* curveTopology)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoProjectCurveToBrepEx(IntPtr breps, IntPtr curves, Vector3d dir, double tolerance, IntPtr outputCurves, IntPtr brepTopology, IntPtr curveTopology);

  //bool RHC_RhinoProjectCurveToMesh(ON_SimpleArray<const ON_Mesh*>* meshes,
  //                                               ON_SimpleArray<const ON_Curve*>* curves,
  //                                               ON_3DVECTOR_STRUCT dir, 
  //                                               double tolerance,
  //                                               ON_SimpleArray<ON_Curve*>* outputCurves)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoProjectCurveToMesh(IntPtr meshes, IntPtr curves, Vector3d dir, double tolerance, IntPtr outputCurves);

  //int RHC_RhinoUnifyMeshNormals(ON_Mesh* pMesh, bool countOnly)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoUnifyMeshNormals(IntPtr pMesh, [MarshalAs(UnmanagedType.U1)]bool countOnly);

  //int RHC_RhinoMessageBox( const RHMONO_STRING* _text, const RHMONO_STRING* _title, unsigned int flags )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoMessageBox([MarshalAs(UnmanagedType.LPWStr)]string _text, [MarshalAs(UnmanagedType.LPWStr)]string _title, uint flags);

  //void RHC_DisplayOleAlerts( bool bDisplay )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RHC_DisplayOleAlerts([MarshalAs(UnmanagedType.U1)]bool bDisplay);

  //bool RHC_RhinoColorDialog( int* argb, bool includeButtonColors, const RHMONO_STRING* _title )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoColorDialog(ref int argb, [MarshalAs(UnmanagedType.U1)]bool includeButtonColors, [MarshalAs(UnmanagedType.LPWStr)]string _title);

  //bool RHC_RhinoSelectLayerDialog( const RHMONO_STRING* _title, int* layerIndex, bool showNewLayerButton, bool showSetCurrentButton, bool* initialSetCurrentState )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoSelectLayerDialog([MarshalAs(UnmanagedType.LPWStr)]string _title, ref int layerIndex, [MarshalAs(UnmanagedType.U1)]bool showNewLayerButton, [MarshalAs(UnmanagedType.U1)]bool showSetCurrentButton, [MarshalAs(UnmanagedType.U1)]ref bool initialSetCurrentState);

  //ON_Curve* RHC_RhinoShortPath( const ON_Surface* pConstSurface, ON_2DPOINT_STRUCT start, ON_2DPOINT_STRUCT end, double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoShortPath(IntPtr pConstSurface, Point2d start, Point2d end, double tolerance);

  //int RHC_RhinoSdkLoft( ON_SimpleArray<const ON_Curve*>* pCurves,
  //                                    ON_3DPOINT_STRUCT start_point,
  //                                    ON_3DPOINT_STRUCT end_point,
  //                                    int loft_type,
  //                                    int simplify_method,
  //                                    int rebuild_point_count,
  //                                    double refit_tolerance,
  //                                    bool bClosed,
  //                                    ON_SimpleArray<ON_Brep*>* pBreps )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoSdkLoft(IntPtr pCurves, Point3d start_point, Point3d end_point, int loft_type, int simplify_method, int rebuild_point_count, double refit_tolerance, [MarshalAs(UnmanagedType.U1)]bool bClosed, IntPtr pBreps);

  //ON_Brep* RHC_CapPlanarHoles(const ON_Brep* pBrep, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_CapPlanarHoles(IntPtr pBrep, double tolerance);

  //int RHC_RhinoGetBrepFaceIsoCurves( const ON_Brep* pConstBrep, int face_index, int direction, double parameter, ON_SimpleArray<ON_Curve*>* curves)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoGetBrepFaceIsoCurves(IntPtr pConstBrep, int face_index, int direction, double parameter, IntPtr curves);

  //ON_NurbsSurface* RHC_RhinoRebuildSurface( const ON_Surface* pConstSurface, int udegree, int vdegree, int upointcount, int vpointcount )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoRebuildSurface(IntPtr pConstSurface, int udegree, int vdegree, int upointcount, int vpointcount);

  //bool RHC_RhinoProjectPointsToMeshes( ON_SimpleArray<const ON_Mesh*>* pConstMeshes, ON_3DVECTOR_STRUCT projection_dir, double tolerance, int point_count, /*ARRAY*/ON_3dPoint* points, ON_3dPointArray* pOutputPoints)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoProjectPointsToMeshes(IntPtr pConstMeshes, Vector3d projection_dir, double tolerance, int point_count, [In,Out] Point3d[] points, IntPtr pOutputPoints);

  //bool RHC_RhinoProjectPointsToBreps( ON_SimpleArray<const ON_Brep*>* pConstBreps, ON_3DVECTOR_STRUCT projection_dir, double tolerance, int point_count, /*ARRAY*/ON_3dPoint* points, ON_3dPointArray* pOutputPoints)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoProjectPointsToBreps(IntPtr pConstBreps, Vector3d projection_dir, double tolerance, int point_count, [In,Out] Point3d[] points, IntPtr pOutputPoints);

  //ON_ClassArray<CRhinoObjRef>* RHC_RhinoGetRenderMeshes( const ON_SimpleArray<const CRhinoObject*>* pRhinoObjects, bool bOkToCreate, bool bReturnAllObjects )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoGetRenderMeshes(IntPtr pRhinoObjects, [MarshalAs(UnmanagedType.U1)]bool bOkToCreate, [MarshalAs(UnmanagedType.U1)]bool bReturnAllObjects);

  //ON_Brep* RHC_RhinoOffsetSurface(const ON_BrepFace* pConstFace, double offset_distance, double offset_tolerance, bool both_sides, bool create_solid)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoOffsetSurface(IntPtr pConstFace, double offset_distance, double offset_tolerance, [MarshalAs(UnmanagedType.U1)]bool both_sides, [MarshalAs(UnmanagedType.U1)]bool create_solid);

  //int RhinoObjRefArray_Count( const ON_ClassArray<CRhinoObjRef>* pObjRefArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RhinoObjRefArray_Count(IntPtr pObjRefArray);

  //const CRhinoObjRef* RhinoObjRefArray_GetItem( const ON_ClassArray<CRhinoObjRef>* pObjRefArray, int index )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RhinoObjRefArray_GetItem(IntPtr pObjRefArray, int index);

  //void RhinoObjRefArray_Delete( ON_ClassArray<CRhinoObjRef>* pObjRefArray )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RhinoObjRefArray_Delete(IntPtr pObjRefArray);

  //bool RHC_RhinoReadFile( const RHMONO_STRING* _path, const CRhinoFileReadOptions* pOptions )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoReadFile([MarshalAs(UnmanagedType.LPWStr)]string _path, IntPtr pOptions);

  //bool RHC_RhinoWriteFile( int docId, const RHMONO_STRING* _path, const CRhinoFileWriteOptions* pOptions )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoWriteFile(int docId, [MarshalAs(UnmanagedType.LPWStr)]string _path, IntPtr pOptions);

  //CRhinoFileWriteOptions* CRhinoFileWriteOptions_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoFileWriteOptions_New();

  //void CRhinoFileWriteOptions_Delete( CRhinoFileWriteOptions* pOptions )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoFileWriteOptions_Delete(IntPtr pOptions);

  //bool CRhinoFileWriteOptions_GetBool(const CRhinoFileWriteOptions* pOptions, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoFileWriteOptions_GetBool(IntPtr pOptions, int which);

  //void CRhinoFileWriteOptions_SetBool(CRhinoFileWriteOptions* pOptions, int which, bool value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoFileWriteOptions_SetBool(IntPtr pOptions, int which, [MarshalAs(UnmanagedType.U1)]bool value);

  //int CRhinoFileWriteOptions_GetFileVersion(const CRhinoFileWriteOptions* pOptions)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoFileWriteOptions_GetFileVersion(IntPtr pOptions);

  //void CRhinoFileWriteOptions_SetFileVersion(CRhinoFileWriteOptions* pOptions, int version)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoFileWriteOptions_SetFileVersion(IntPtr pOptions, int version);

  //void CRhinoFileWriteOptions_Transform(CRhinoFileWriteOptions* pOptions, bool get, ON_Xform* xform)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoFileWriteOptions_Transform(IntPtr pOptions, [MarshalAs(UnmanagedType.U1)]bool get, ref Transform xform);

  //CRhinoFileReadOptions* CRhinoFileReadOptions_New()
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoFileReadOptions_New();

  //CRhinoFileReadOptions* CRhinoFileReadOptions_New2(bool import)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoFileReadOptions_New2([MarshalAs(UnmanagedType.U1)]bool import);

  //void CRhinoFileReadOptions_Delete( CRhinoFileReadOptions* pOptions )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoFileReadOptions_Delete(IntPtr pOptions);

  //bool CRhinoFileReadOptions_GetBool(const CRhinoFileReadOptions* pOptions, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoFileReadOptions_GetBool(IntPtr pOptions, int which);

  //void CRhinoFileReadOptions_SetBool(CRhinoFileReadOptions* pOptions, int which, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoFileReadOptions_SetBool(IntPtr pOptions, int which, [MarshalAs(UnmanagedType.U1)]bool val);

  //bool CRhinoFileMenu_Open(const RHMONO_STRING* _path)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoFileMenu_Open([MarshalAs(UnmanagedType.LPWStr)]string _path);

  //ON_Curve* RHC_RhinoExtendCurve( const ON_Curve* pConstCurve, double length0, double length1, int type)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoExtendCurve(IntPtr pConstCurve, double length0, double length1, int type);

  //ON_Curve* RHC_RhinoExtendCurve1(const ON_Curve* pConstCurve, int type, int side, const ON_SimpleArray<const ON_Geometry*>* pGeometryList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoExtendCurve1(IntPtr pConstCurve, int type, int side, IntPtr pGeometryList);

  //ON_Curve* RHC_RhinoExtendCurve2(const ON_Curve* pConstCurve, int type, int side, ON_3DPOINT_STRUCT endPoint)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_RhinoExtendCurve2(IntPtr pConstCurve, int type, int side, Point3d endPoint);

  //bool RHC_RhinoGetClosestPoint( const ON_Curve* pConstCurve,
  //                                             const ON_SimpleArray<const ON_Geometry*>* pGeometryArray,
  //                                             double maximum_distance,
  //                                             ON_3dPoint* curve_point,
  //                                             ON_3dPoint* object_point,
  //                                             int* which_object)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoGetClosestPoint(IntPtr pConstCurve, IntPtr pGeometryArray, double maximum_distance, ref Point3d curve_point, ref Point3d object_point, ref int which_object);

  //bool RHC_MakeRhinoContours1(const ON_Curve* pConstCurve,
  //                                          ON_3DPOINT_STRUCT start_point,
  //                                          ON_3DPOINT_STRUCT end_point,
  //                                          double interval,
  //                                          ON_SimpleArray<ON_3dPoint>* output_points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_MakeRhinoContours1(IntPtr pConstCurve, Point3d start_point, Point3d end_point, double interval, IntPtr output_points);

  //int RHC_MakeRhinoContours2(const ON_Brep* pConstBrep,
  //                                          ON_3DPOINT_STRUCT start_point,
  //                                          ON_3DPOINT_STRUCT end_point,
  //                                          double interval,
  //                                          ON_SimpleArray<ON_Curve*>* output_curves)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_MakeRhinoContours2(IntPtr pConstBrep, Point3d start_point, Point3d end_point, double interval, IntPtr output_curves);

  //int RHC_MakeRhinoContours3(const ON_Brep* pConstBrep,
  //                                          ON_PLANE_STRUCT* plane,
  //                                          ON_SimpleArray<ON_Curve*>* output_curves)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_MakeRhinoContours3(IntPtr pConstBrep, ref Plane plane, IntPtr output_curves);

  //bool RHC_RhinoGetOverlapDistance( const ON_Curve* pConstCurve1,
  //                                                const ON_Curve* pConstCurve2,
  //                                                double tolerance,
  //                                                double* max_a,
  //                                                double* max_b,
  //                                                double* max_d,
  //                                                double* min_a,
  //                                                double* min_b,
  //                                                double* min_d )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoGetOverlapDistance(IntPtr pConstCurve1, IntPtr pConstCurve2, double tolerance, ref double max_a, ref double max_b, ref double max_d, ref double min_a, ref double min_b, ref double min_d);

  //int RHC_RhinoPlanarClosedCurveContainmentTest( const ON_Curve* pConstCurveA,
  //                                                             const ON_Curve* pConstCurveB,
  //                                                             ON_PLANE_STRUCT* plane,
  //                                                             double tolerance )
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoPlanarClosedCurveContainmentTest(IntPtr pConstCurveA, IntPtr pConstCurveB, ref Plane plane, double tolerance);

  //bool RHC_RhinoArePointsCoplanar( int count, /*ARRAY*/const ON_3dPoint* points, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoArePointsCoplanar(int count, Point3d[] points, double tolerance);

  //int RHC_RhinoPullPointsToFace( const ON_Brep* pConstBrep, int face_index, int count, /*ARRAY*/const ON_3dPoint* inpoints, ON_SimpleArray<ON_3dPoint>* outpoints, double tolerance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int RHC_RhinoPullPointsToFace(IntPtr pConstBrep, int face_index, int count, Point3d[] inpoints, IntPtr outpoints, double tolerance);
  #endregion


  #region rh_view.cpp
  //ON_UUID CRhinoView_Details(const CRhinoView* ptr, bool* bIsPageView)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoView_Details(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]ref bool bIsPageView);

  //CRhinoViewport* CRhinoView_MainViewport(CRhinoView* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoView_MainViewport(IntPtr ptr);

  //CRhinoDoc* CRhinoView_Document(CRhinoView* pRhinoView)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoView_Document(IntPtr pRhinoView);

  //void CRhinoView_Redraw(CRhinoView* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoView_Redraw(IntPtr ptr);

  //void CRhinoView_EnableDrawing(bool set, bool* get_set_value)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoView_EnableDrawing([MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.U1)]ref bool get_set_value);

  //bool CRhinoView_GetSetBool(CRhinoView* ptr, int which, bool setval, bool set)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoView_GetSetBool(IntPtr ptr, int which, [MarshalAs(UnmanagedType.U1)]bool setval, [MarshalAs(UnmanagedType.U1)]bool set);

  //bool CRhinoView_FloatRhinoView(CRhinoView* pView, bool bFloat)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoView_FloatRhinoView(IntPtr pView, [MarshalAs(UnmanagedType.U1)]bool bFloat);

  //CRhinoViewport* CRhinoView_ActiveViewport(CRhinoView* ptr, bool* isMainViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoView_ActiveViewport(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]ref bool isMainViewport);

  //ON_UUID CRhinoView_ActiveViewportID(CRhinoView* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoView_ActiveViewportID(IntPtr ptr);

  //void CRhinoView_GetRect(const CRhinoView* pView, int which, int* lrtb)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoView_GetRect(IntPtr pView, int which, ref int lrtb);

  //CWndList* RHC_PushPickButtonHide(HWND hFormHandle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr RHC_PushPickButtonHide(IntPtr hFormHandle);

  //void RHC_PushPickButtonShow(CWndList* pList)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void RHC_PushPickButtonShow(IntPtr pList);
  #endregion


  #region rh_viewport.cpp
  //void CRhinoViewport_Delete(CRhinoViewport* pViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_Delete(IntPtr pViewport);

  //bool CRhinoViewport_GetBool(CRhinoViewport* pViewport, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_GetBool(IntPtr pViewport, int which);

  //ON_UUID CRhinoViewport_ViewportId(const CRhinoViewport* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern Guid CRhinoViewport_ViewportId(IntPtr ptr);

  //unsigned int CRhinoViewport_ChangeCounter(const CRhinoViewport* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern uint CRhinoViewport_ChangeCounter(IntPtr ptr);

  //bool CRhinoViewport_IsVisible(const CRhinoViewport* ptr, ON_3DPOINT_STRUCT p0, ON_3DPOINT_STRUCT p1, bool usep1)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_IsVisible(IntPtr ptr, Point3d p0, Point3d p1, [MarshalAs(UnmanagedType.U1)]bool usep1);

  //const RHMONO_STRING* CRhinoViewport_GetSetName(CRhinoViewport* ptr, bool set, const RHMONO_STRING* _str)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoViewport_GetSetName(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool set, [MarshalAs(UnmanagedType.LPWStr)]string _str);

  //void CRhinoViewport_ConstructionPlane(CRhinoViewport* ptr, ON_PLANE_STRUCT* plane, bool set)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_ConstructionPlane(IntPtr ptr, ref Plane plane, [MarshalAs(UnmanagedType.U1)]bool set);

  //void CRhinoViewport_SetConstructionPlane(CRhinoViewport* pViewport, const ON_3dmConstructionPlane* pCPlane, bool push)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_SetConstructionPlane(IntPtr pViewport, IntPtr pCPlane, [MarshalAs(UnmanagedType.U1)]bool push);

  //CRhinoView* CRhinoViewport_ParentView(const CRhinoViewport* pViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern IntPtr CRhinoViewport_ParentView(IntPtr pViewport);

  //bool CRhinoViewport_SetTraceImage(CRhinoViewport* ptr, const RHMONO_STRING* _bitmapFilename, const ON_PLANE_STRUCT* plane, double width, double height, bool grayscale, bool filtered)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_SetTraceImage(IntPtr ptr, [MarshalAs(UnmanagedType.LPWStr)]string _bitmapFilename, ref Plane plane, double width, double height, [MarshalAs(UnmanagedType.U1)]bool grayscale, [MarshalAs(UnmanagedType.U1)]bool filtered);

  //void CRhinoViewport_ClearTraceImage(CRhinoViewport* ptr)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_ClearTraceImage(IntPtr ptr);

  //bool CRhinoViewport_VP_GetBool(const CRhinoViewport* viewport_ptr, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetBool(IntPtr viewport_ptr, int which);

  //void CRhinoViewport_VP_SetVector(CRhinoViewport* pViewport, int which, ON_3DVECTOR_STRUCT v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_VP_SetVector(IntPtr pViewport, int which, Vector3d v);

  //void CRhinoViewport_VP_GetVector(const CRhinoViewport* viewport_ptr, int which, ON_3dVector* v)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_VP_GetVector(IntPtr viewport_ptr, int which, ref Vector3d v);

  //bool CRhinoViewport_VP_ChangeToParallelProjection(CRhinoViewport* pViewport, bool symmetricFrustum)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_ChangeToParallelProjection(IntPtr pViewport, [MarshalAs(UnmanagedType.U1)]bool symmetricFrustum);

  //bool CRhinoViewport_VP_ChangeToPerspectiveProjection(CRhinoViewport* pViewport, double targetDistance, bool symmetricFrustum, double lensLength)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_ChangeToPerspectiveProjection(IntPtr pViewport, double targetDistance, [MarshalAs(UnmanagedType.U1)]bool symmetricFrustum, double lensLength);

  //bool CRhinoViewport_VP_GetCameraFrame(const CRhinoViewport* pViewport, ON_PLANE_STRUCT* frame)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetCameraFrame(IntPtr pViewport, ref Plane frame);

  //bool CRhinoViewport_VP_GetFrustum(const CRhinoViewport* viewport_ptr, double* items)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetFrustum(IntPtr viewport_ptr, ref double items);

  //double CRhinoViewport_VP_GetDouble(const CRhinoViewport* viewport_ptr, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern double CRhinoViewport_VP_GetDouble(IntPtr viewport_ptr, int which);

  //void CRhinoViewport_VP_SetCamera35mmLensLength(CRhinoViewport* pViewport, double val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_VP_SetCamera35mmLensLength(IntPtr pViewport, double val);

  //bool CRhinoViewport_VP_GetFrustumCenter(const CRhinoViewport* ptr, ON_3dPoint* center)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetFrustumCenter(IntPtr ptr, ref Point3d center);

  //bool CRhinoViewport_VP_GetDepth1(const CRhinoViewport* ptr, ON_3DPOINT_STRUCT point, double* distance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetDepth1(IntPtr ptr, Point3d point, ref double distance);

  //bool CRhinoViewport_VP_GetDepth2(const CRhinoViewport* ptr, ON_3DPOINT_STRUCT boxMin, ON_3DPOINT_STRUCT boxMax, double* nearDistance, double* farDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetDepth2(IntPtr ptr, Point3d boxMin, Point3d boxMax, ref double nearDistance, ref double farDistance);

  //bool CRhinoViewport_VP_GetDepth3(const CRhinoViewport* ptr, ON_Sphere* sphere, double* nearDistance, double* farDistance)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetDepth3(IntPtr ptr, ref Sphere sphere, ref double nearDistance, ref double farDistance);

  //bool CRhinoViewport_VP_GetPlane(const CRhinoViewport* ptr, int which, ON_PLANE_STRUCT* plane)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetPlane(IntPtr ptr, int which, ref Plane plane);

  //bool CRhinoViewport_VP_GetRect(const CRhinoViewport* ptr, bool nearRect, /*ARRAY*/ON_3dPoint* points)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetRect(IntPtr ptr, [MarshalAs(UnmanagedType.U1)]bool nearRect, [In,Out] Point3d[] points);

  //bool CRhinoViewport_VP_GetScreenPort(const CRhinoViewport* ptr, int* items)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetScreenPort(IntPtr ptr, ref int items);

  //bool CRhinoViewport_VP_GetCameraAngle(const CRhinoViewport* ptr, double* halfDiagonalAngle, double* halfVerticalAngle, double* halfHorizontalAngle)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetCameraAngle(IntPtr ptr, ref double halfDiagonalAngle, ref double halfVerticalAngle, ref double halfHorizontalAngle);

  //bool CRhinoViewport_VP_GetXform(const CRhinoViewport* ptr, int sourceSystem, int destinationSystem, ON_Xform* matrix)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetXform(IntPtr ptr, int sourceSystem, int destinationSystem, ref Transform matrix);

  //bool CRhinoViewport_VP_GetFrustumLine(const CRhinoViewport* ptr, double screenX, double screenY, ON_Line* worldLine)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetFrustumLine(IntPtr ptr, double screenX, double screenY, ref Line worldLine);

  //bool CRhinoViewport_VP_GetWorldToScreenScale(const CRhinoViewport* ptr, ON_3DPOINT_STRUCT pointInFrustum, double* pixelsPerUnit)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_GetWorldToScreenScale(IntPtr ptr, Point3d pointInFrustum, ref double pixelsPerUnit);

  //bool CRhinoViewport_PushViewInfo(CRhinoViewport* pViewport, const ON_3dmView* pView, bool includeTraceImage)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_PushViewInfo(IntPtr pViewport, IntPtr pView, [MarshalAs(UnmanagedType.U1)]bool includeTraceImage);

  //void CRhinoViewport_PushViewProjection(CRhinoViewport* pViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_PushViewProjection(IntPtr pViewport);

  //bool CRhinoViewport_PopViewProjection(CRhinoViewport* pViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_PopViewProjection(IntPtr pViewport);

  //void CRhinoViewport_Target(const CRhinoViewport* pViewport, ON_3dPoint* pTarget)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_Target(IntPtr pViewport, ref Point3d pTarget);

  //void CRhinoViewport_SetCameraTarget(CRhinoViewport* pViewport, ON_3DPOINT_STRUCT pt, bool update, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_SetCameraTarget(IntPtr pViewport, Point3d pt, [MarshalAs(UnmanagedType.U1)]bool update, int which);

  //void CRhinoViewport_SetCameraLocations(CRhinoViewport* pViewport, ON_3DPOINT_STRUCT target, ON_3DPOINT_STRUCT camera)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_SetCameraLocations(IntPtr pViewport, Point3d target, Point3d camera);

  //bool CRhinoViewport_KeyboardRotate(CRhinoViewport* pViewport, bool leftRight, double angleRadians)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_KeyboardRotate(IntPtr pViewport, [MarshalAs(UnmanagedType.U1)]bool leftRight, double angleRadians);

  //bool CRhinoViewport_View_GetBool(const CRhinoViewport* pViewport, int which)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_View_GetBool(IntPtr pViewport, int which);

  //void CRhinoViewport_View_SetBool(CRhinoViewport* pViewport, int which, bool val)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern void CRhinoViewport_View_SetBool(IntPtr pViewport, int which, [MarshalAs(UnmanagedType.U1)]bool val);

  //bool CRhinoViewport_VP_Rotate(CRhinoViewport* pViewport, double angleRadians, ON_3DVECTOR_STRUCT rotationAxis, ON_3DPOINT_STRUCT rotationCenter)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_VP_Rotate(IntPtr pViewport, double angleRadians, Vector3d rotationAxis, Point3d rotationCenter);

  //bool CRhinoViewport_Magnify(CRhinoViewport* pViewport, double magnificationFactor, int mode, int fixedScreenPointX, int fixedScreenPointY)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool CRhinoViewport_Magnify(IntPtr pViewport, double magnificationFactor, int mode, int fixedScreenPointX, int fixedScreenPointY);

  //bool RHC_RhinoDollyExtents(CRhinoViewport* pViewport, bool selectedObjects)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhinoDollyExtents(IntPtr pViewport, [MarshalAs(UnmanagedType.U1)]bool selectedObjects);

  //bool RHC_RhZoomExtentsHelper(CRhinoViewport* pViewport, ON_3DPOINT_STRUCT boxmin, ON_3DPOINT_STRUCT boxmax)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static extern bool RHC_RhZoomExtentsHelper(IntPtr pViewport, Point3d boxmin, Point3d boxmax);

  //int CRhinoViewport_ViewportType(const CRhinoViewport* pConstRhinoViewport)
  [DllImport(Import.lib, CallingConvention=CallingConvention.Cdecl )]
  internal static extern int CRhinoViewport_ViewportType(IntPtr pConstRhinoViewport);
  #endregion


}
